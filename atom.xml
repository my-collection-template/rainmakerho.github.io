<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>亂馬客 - Re:從零開始的軟體開發生活</title>
  <icon>https://www.gravatar.com/avatar/cd3aed042ccd7a5a5d9956b0bc07dc81</icon>
  <subtitle>Re:從零開始的軟體開發生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rainmakerho.github.io/"/>
  <updated>2019-07-03T05:42:20.333Z</updated>
  <id>https://rainmakerho.github.io/</id>
  
  <author>
    <name>亂馬客</name>
    <email>rainmaker_ho@gss.com.tw</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Microsoft Threat Modeling Tool</title>
    <link href="https://rainmakerho.github.io/2019/07/03/2019016/"/>
    <id>https://rainmakerho.github.io/2019/07/03/2019016/</id>
    <published>2019-07-03T02:01:57.000Z</published>
    <updated>2019-07-03T05:42:20.333Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>大家在開發系統時除了畫系統架構圖之外，不知有沒畫 Threat Modeling 呢?<br>有了 Threat Modeling 可以看到整個系統大約有那些的 威脅，然後在開發系統時，一併考量進去。<br>跟 bug 一樣，逾早發現安全性威脅，解決成本逾低。<br>我們可以從 <a href="https://aka.ms/threatmodelingtool" target="_blank" rel="noopener">Microsoft Threat Modeling Tool</a> 來安裝 (windows only)。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="Application-Review"><a href="#Application-Review" class="headerlink" title="Application Review"></a>Application Review</h4><p><strong>Microsoft Threat Modeling Tool</strong> 讓我們透過畫 Data Flow Diagrams(DFDs) 後，自動產生相關的安全性威脅。<br>安裝完成後，開啟程式可以選擇 Azure or SDL 的範本，請依您系統的類別選取範本，這裡筆者是使用 SDL 範本。<br><img src="/2019/07/03/2019016/001.png" title="選取範本"></p><p>然後按下「Create A Model」就會進入空白的 Diagram 。<br><img src="/2019/07/03/2019016/002.png" title="NewModel"></p><p>而我們在畫的過程中，應著重在安全性方面進行系統架構 Review，考量以下幾點，</p><ul><li>這系統會有那些使用者?</li><li>有什麼合規的要求嗎?</li><li>有那些資料需要被保護嗎?</li><li>有跟其他系統互動?</li></ul><h4 id="Data-Flow-Diagrams"><a href="#Data-Flow-Diagrams" class="headerlink" title="Data Flow Diagrams"></a>Data Flow Diagrams</h4><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/24/Data-flow-diagram-notation.svg/440px-Data-flow-diagram-notation.svg.png" alt="Data Flow Diagrams" width="250"></p><h4 id="開始作畫"><a href="#開始作畫" class="headerlink" title="開始作畫"></a>開始作畫</h4><p>1.先拉出 Elements<br>一開始，先將跟安全性相關的項目拉到畫布上<br><img src="/2019/07/03/2019016/003.png" title="Elements"></p><p>2.用 Flow 串起來<br>再將每個項目透過 Flow 串接起來<br><img src="/2019/07/03/2019016/004.png" title="Flow"></p><p>3.標示 Elements<br>再檢視有那些需要做額外的標示，例如 Process 使用的語言(c#, Node, Java…)<br><img src="/2019/07/03/2019016/005.png" title="Flow"></p><p>4.加上備註</p><p>5.找其他人一起來 Review</p><h4 id="Threat-Types"><a href="#Threat-Types" class="headerlink" title="Threat Types"></a>Threat Types</h4><p><strong>Microsoft Threat Modeling Tool</strong> 會套用 STRIDE Threat Types，<br>參考自<a href="https://docs.microsoft.com/en-us/azure/security/azure-security-threat-modeling-tool-threats" target="_blank" rel="noopener">Microsoft Threat Modeling Tool threats</a></p><table><thead><tr><th>類別</th><th>描述</th></tr></thead><tbody><tr><td>詐騙 Spoofing</td><td>涉及非法存取然後使用其他使用者的驗證資訊，例如使用者名稱和密碼</td></tr><tr><td>竄改 Tampering</td><td>涉及惡意修改資料。 範例包括未經授權變更持續性資料 (例如保存在資料庫中的資料)，以及修改在兩部電腦之間透過開放式網路 (例如網際網路) 流動的資料 (中間人攻擊，修改交易金額…)</td></tr><tr><td>否認性 Repudiation</td><td>與拒絕執行動作但沒有其他任何一方有辦法另外證明的使用者有關，比方說，使用者在無法追蹤禁止作業的系統中執行非法作業。 不可否認性是指系統對抗否認性威脅的能力。 例如，購買商品的使用者可能必須在收到商品時簽名。 然後，廠商可以使用簽名收據做為使用者已收到包裹的證據</td></tr><tr><td>資訊洩漏 Information Disclosure</td><td>涉及將資訊暴露給不應該具有其存取權的個人，例如，使用者可以讀取它們未被授權存取的檔案，或入侵者能夠讀取在兩部電腦之間傳輸的資料</td></tr><tr><td>阻斷服務 Denial of Service</td><td>阻斷服務 (DoS) 攻擊可阻斷對有效使用者提供的服務，例如，藉由讓網頁伺服器暫時無法存取或無法使用。 您必須防止特定類型的 DoS 威脅，以便提升系統的可用性和可靠性</td></tr><tr><td>權限提高 Elevation of Privilege</td><td>未授權的使用者取得授權的存取權，因此有足夠存取權危害或摧毀整個系統。 提高權限威脅包含下列情況：攻擊者已有效地滲透所有系統防禦，並成為受信任系統本身的一部分，這確實是危險的情況</td></tr></tbody></table><p><br></p><h4 id="分析-Threats"><a href="#分析-Threats" class="headerlink" title="分析 Threats"></a>分析 Threats</h4><p>畫好之後，切到 Analysis View，就可以看到下面有一堆的 Threats ，大家可依它們的說明來了解為什麼會有那些 Threats 以及如何調整它們，<br><img src="/2019/07/03/2019016/006.png" title="Analysis View"><br>大家可以查看每個 Threat ，設定它們的優先序，及在 Justification 寫入因應作法，設定 Status 。</p><h4 id="產生報表"><a href="#產生報表" class="headerlink" title="產生報表"></a>產生報表</h4><p>我們可以按 Menu 上的 Report 來產生 html 報表。<br><img src="https://docs.microsoft.com/en-us/azure/security/media/azure-security-threat-modeling-tool-feature-overview/report.png" alt="Threats Modeling Report"></p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>我們有了 Threat Model ，會對整個系統整體的安全性有一定的了解，也可以儘早針對高風險的 Threat 進行防範。</p><ul><li>註: 自動列出 Threats ?<br>不知大家是否對於該 Tool 為什麼可以自動列出 Threats 而感到好奇呢?<br>只要大家開啟 Template 就可以知道，它其實是有寫 Rule 在裡面，當 Elements 有相關，並且屬性值為某個值時，就會出現那個 Threat ，例如下圖，當 Source 為 Generic External Interactor ， Target 為 Generic Process 就會出現那個 Threat ，但如果 Flow 的屬性有設設定 Source Authenticated 是 Yes ，或是 Generic External Interactor 屬性有設定 Authenticates Itself 為 Yes ，就不會出現那個 Threat<img src="/2019/07/03/2019016/007.png" title="Threat Rule"></li></ul><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://resources.infosecinstitute.com/applications-threat-modeling/#gref" target="_blank" rel="noopener">Applications Threat Modeling</a><br><a href="https://www.geeksforgeeks.org/microsoft-threat-modelling-tool-2016-set-1/" target="_blank" rel="noopener">Microsoft Threat modelling tool 2016 | Set 1</a><br><a href="https://aka.ms/threatmodelingtool" target="_blank" rel="noopener">下載 Microsoft Threat Modeling Tool</a><br><a href="https://docs.microsoft.com/en-us/azure/security/azure-security-threat-modeling-tool-feature-overview" target="_blank" rel="noopener">Threat Modeling Tool feature overview</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;大家在開發系統時除了畫系統架構圖之外，不知有沒畫 Threat Modeling 呢?&lt;br&gt;有了 Threat Modeling 可以看到
      
    
    </summary>
    
    
      <category term="Microsoft Threat Modeling Tool" scheme="https://rainmakerho.github.io/tags/Microsoft-Threat-Modeling-Tool/"/>
    
      <category term="STRIDE" scheme="https://rainmakerho.github.io/tags/STRIDE/"/>
    
      <category term="威脅模型" scheme="https://rainmakerho.github.io/tags/%E5%A8%81%E8%84%85%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>SQL Replace 後，怎麼會留空白呢?</title>
    <link href="https://rainmakerho.github.io/2019/06/12/2019015/"/>
    <id>https://rainmakerho.github.io/2019/06/12/2019015/</id>
    <published>2019-06-12T05:49:14.000Z</published>
    <updated>2019-06-12T07:35:21.790Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>最近客戶將 SQL Server 從 SQL 2012 升級到 SQL 2016 後，有些 Store Procedure 居然發生了錯誤。<br>結果發現，原本在 SQL 2012 中去 Replace 後，原本後面有空字串的會一併 RTrim 掉，但在 SQL 2016 中，那些空白就會留著。</p><p>怎麼會這樣子呢? 查看官方文件中，這個行為在 SQL 2008 之後就是如此了呀~<br><a href="https://docs.microsoft.com/en-us/previous-versions/sql/sql-server-2008/ms143359(v=sql.100)#replace-function" target="_blank" rel="noopener">Behavior Changes to Database Engine Features in SQL Server 2008 - REPLACE Function</a></p><blockquote><p>In SQL Server 2005, trailing spaces specified in the first input parameter to the REPLACE function are trimmed when the parameter is of type char. For example, in the statement SELECT ‘&lt;’ + REPLACE(CONVERT(char(6), ‘ABC ‘), ‘ ‘, ‘L’) + ‘&gt;’, the value ‘ABC ‘ is incorrectly evaluated as ‘ABC’.</p></blockquote><blockquote><p>In SQL Server 2008, trailing spaces are always preserved. For applications that rely on the previous behavior of the function, use the RTRIM function when specifying the first input parameter for the function. For example, the following syntax will reproduce the SQL Server 2005 behavior SELECT ‘&lt;’ + REPLACE(RTRIM(CONVERT(char(6), ‘ABC ‘)), ‘ ‘, ‘L’) + ‘&gt;’.</p></blockquote><p>也就是說，SQL 2008 之後，如果要將 Replace 後的空字串 Trim 掉，請自已加一下 RTRIM !!!</p><p>嗯，不過，我們的現況是 SQL 2012 跟 SQL 2016 ，這到底是怎麼回事呢?</p><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><p>結果透過 SSMS 來看資料庫，發現 SQL 2012 的那個資料庫，相容性層級設定的是 SQL 2005，而 SQL 2016 最底的相容性層級只到 SQL 2008。所以才在 SQL 2016 上才發生這樣子的錯誤。</p><p>即然知道問題了，就要看怎麼解了。<br>依官網來說，程式就給它改下去吧，可能要盤點一下有那些 Store Procedure 有影響吧。</p><p>另一個解法是設定 <a href="https://docs.microsoft.com/en-us/sql/t-sql/statements/set-ansi-padding-transact-sql?view=sql-server-2017" target="_blank" rel="noopener">ANSI_PADDING</a> 為 OFF (預設為 ON)。<br>如果目前使用 Replace 是因為遇到了 Char 資料型態，可以在運算之前，設定 <a href="https://docs.microsoft.com/en-us/sql/t-sql/statements/set-ansi-padding-transact-sql?view=sql-server-2017" target="_blank" rel="noopener">ANSI_PADDING</a> 為 OFF，這樣子就不會把空字串加上去了。<br>例如，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[table1] (</span><br><span class="line">    [<span class="keyword">id</span>]        TINYINT       <span class="keyword">IDENTITY</span> (<span class="number">1</span>, <span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    [char1]     <span class="built_in">CHAR</span> (<span class="number">10</span>)     <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    [nchar2]    <span class="keyword">NCHAR</span> (<span class="number">10</span>)    <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    [varchar1]  <span class="built_in">VARCHAR</span> (<span class="number">10</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    [<span class="keyword">nvarchar2</span>] <span class="keyword">NVARCHAR</span> (<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> table1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> [dbo].[table1]([char1], [nchar2], [varchar1], [<span class="keyword">nvarchar2</span>])</span><br><span class="line"><span class="keyword">values</span> (<span class="string">'char1'</span>, N<span class="string">'nchar2'</span>, <span class="string">'varchar1'</span>, N<span class="string">'nvarchar2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 預設是 SET ANSI_PADDING ON</span></span><br><span class="line"><span class="comment">-- 所以 char1 欄位 replace 後，會留有空白哦!</span></span><br><span class="line"><span class="keyword">SET</span> ANSI_PADDING <span class="keyword">ON</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="string">'['</span> + char1 + <span class="string">']'</span> <span class="keyword">as</span> char1,</span><br><span class="line"><span class="string">'['</span> + <span class="keyword">replace</span>(char1, <span class="string">'char'</span>, <span class="string">'rm'</span>) + <span class="string">']'</span> <span class="keyword">as</span> char1_replace ,</span><br><span class="line"><span class="string">'['</span> + nchar2 + <span class="string">']'</span> <span class="keyword">as</span> nchar2,</span><br><span class="line">N<span class="string">'['</span> + <span class="keyword">replace</span>(nchar2, N<span class="string">'char'</span>, N<span class="string">'rm'</span>) + N<span class="string">']'</span> <span class="keyword">as</span> nchar2_replace,</span><br><span class="line"><span class="string">'['</span> + varchar1 + <span class="string">']'</span> <span class="keyword">as</span> varchar1,</span><br><span class="line"><span class="string">'['</span> + <span class="keyword">replace</span>(varchar1, <span class="string">'char'</span>, <span class="string">'rm'</span>) + <span class="string">']'</span> <span class="keyword">as</span> varchar1_replace,</span><br><span class="line"><span class="string">'['</span> + <span class="keyword">nvarchar2</span> + <span class="string">']'</span> <span class="keyword">as</span> <span class="keyword">nvarchar2</span>,</span><br><span class="line">N<span class="string">'['</span> + <span class="keyword">replace</span>(<span class="keyword">nvarchar2</span>, N<span class="string">'char'</span>, N<span class="string">'rm'</span>) + N<span class="string">']'</span> <span class="keyword">as</span> nvarchar2_replace</span><br><span class="line"><span class="keyword">from</span> table1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> ANSI_PADDING <span class="keyword">off</span>;</span><br><span class="line"><span class="comment">-- 所以 char1 欄位 replace 後，會不會有空白了哦~</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">'['</span> + char1 + <span class="string">']'</span> <span class="keyword">as</span> char1,</span><br><span class="line"><span class="string">'['</span> + <span class="keyword">replace</span>(char1, <span class="string">'char'</span>, <span class="string">'rm'</span>) + <span class="string">']'</span> <span class="keyword">as</span> char1_replace ,</span><br><span class="line"><span class="string">'['</span> + nchar2 + <span class="string">']'</span> <span class="keyword">as</span> nchar2,</span><br><span class="line">N<span class="string">'['</span> + <span class="keyword">replace</span>(nchar2, N<span class="string">'char'</span>, N<span class="string">'rm'</span>) + N<span class="string">']'</span> <span class="keyword">as</span> nchar2_replace,</span><br><span class="line"><span class="string">'['</span> + varchar1 + <span class="string">']'</span> <span class="keyword">as</span> varchar1,</span><br><span class="line"><span class="string">'['</span> + <span class="keyword">replace</span>(varchar1, <span class="string">'char'</span>, <span class="string">'rm'</span>) + <span class="string">']'</span> <span class="keyword">as</span> varchar1_replace,</span><br><span class="line"><span class="string">'['</span> + <span class="keyword">nvarchar2</span> + <span class="string">']'</span> <span class="keyword">as</span> <span class="keyword">nvarchar2</span>,</span><br><span class="line">N<span class="string">'['</span> + <span class="keyword">replace</span>(<span class="keyword">nvarchar2</span>, N<span class="string">'char'</span>, N<span class="string">'rm'</span>) + N<span class="string">']'</span> <span class="keyword">as</span> nvarchar2_replace</span><br><span class="line"><span class="keyword">from</span> table1;</span><br></pre></td></tr></table></figure><p>執行結果如下，<br><img src="/2019/06/12/2019015/001.png" title="ANSI_PADDING on/off 比較"><br>可以看到上面 ANSI_PADDING ON 時，Replace 後是有空白的，Off 之後 char1 欄位是沒有空白的。<br>但對於 NCHAR 的資料型態是沒有改變的哦!</p><p>所以，如果您在 Replace 遇到的問題是 CHAR ，那您可以在執行 SQL 之前，先去下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> ANSI_PADDING <span class="keyword">OFF</span></span><br><span class="line"><span class="comment">-- 你原本的SQL</span></span><br></pre></td></tr></table></figure><p>依據大多數系統大多會將執行 SQL 的部份抽出來，所以目前您可以在那先去設定 ANSI_PADDING OFF。</p><ul><li>請注意 NCHAR ， ANSI_PADDING 固定會是 ON 的哦! 所以設定 SET ANSI_PADDING OFF 只針對 CHAR 有效果哦!</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;最近客戶將 SQL Server 從 SQL 2012 升級到 SQL 2016 後，有些 Store Procedure 居然發生了錯誤。
      
    
    </summary>
    
    
      <category term="sql" scheme="https://rainmakerho.github.io/tags/sql/"/>
    
      <category term="sql 2016" scheme="https://rainmakerho.github.io/tags/sql-2016/"/>
    
      <category term="sql 2005" scheme="https://rainmakerho.github.io/tags/sql-2005/"/>
    
      <category term="sql 2008" scheme="https://rainmakerho.github.io/tags/sql-2008/"/>
    
      <category term="replace" scheme="https://rainmakerho.github.io/tags/replace/"/>
    
      <category term="rtrim" scheme="https://rainmakerho.github.io/tags/rtrim/"/>
    
  </entry>
  
  <entry>
    <title>使用 NPOI.HSSF.UserModel.HSSFSheet.CopyRow 造成 IIS 應用程式重啟問題</title>
    <link href="https://rainmakerho.github.io/2019/06/04/2019014/"/>
    <id>https://rainmakerho.github.io/2019/06/04/2019014/</id>
    <published>2019-06-04T02:09:26.000Z</published>
    <updated>2019-06-20T02:41:23.407Z</updated>
    
    <content type="html"><![CDATA[<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><p>Windows 2012 R2, IIS, NPOI v2.1.1.0<br>.net 3.x , 應用程式集區為 32 位元</p><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>最近同事在一台 Windows 2012 R2 上安裝系統，把 8 個 iis 的應用程式放在同一個應用程式集區之中。<br>其中一個應用程式中，有使用到 NOPI 去產生 Excel 報表。<br>那個報表是依 DataTable 將資料 Loop 放到 Excel 之中，但神奇的是，程式在執行到一半，卻會讓那個應用程式集區直接重啟。<br>而事件檢視器之中就只有「失敗的應用程式名稱: w3wp.exe，版本: 8.5.9600.16384，時間戳記: 0x52157ba0」的錯誤，如下，<br><img src="/2019/06/04/2019014/001.png" title="w3wp.exe錯誤"></p><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><p>因為是 w3wp.exe 直接重啟，所以就透過 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=58210" target="_blank" rel="noopener">Debug Diagnostic Tool</a>來收集 IIS 的 Crash 資料，所以先透過 DebugDiag 2 Collection 來收集發生錯誤時，將 Stack Trace Log 起來，如下，<br><img src="/2019/06/04/2019014/002.png" title="DebugDiag 2 Collection"></p><p>最後發現，應用程式集區重啟後，的確產生 2 個不同 Process 的 Log 檔，如下，<br><img src="/2019/06/04/2019014/003.png" title="DebugDiag Log File"></p><p>查看最後的 Log 是掛在 NPOI 的 NPOI.HSSF.UserModel.HSSFRow.get_Cells ，如下，</p><blockquote><p>0e5fd908 759c89f2 [HelperMethodFrame_PROTECTOBJ: 0e5fd908] System.Delegate.DelegateConstruct(System.Object, IntPtr)<br>0e5fdaf0 67511c77 System.Collections.Generic.SortedDictionary<code>2+ValueCollection[[System.Int32, mscorlib],[System.__Canon, mscorlib]].CopyTo(System.__Canon[], Int32) 0e5fdb18 6f537a25 System.Collections.Generic.List</code>1[[System.__Canon, mscorlib]]..ctor(System.Collections.Generic.IEnumerable`1&lt;System.__Canon&gt;)<br>0e5fdb50 1ce64bbe NPOI.HSSF.UserModel.HSSFRow.get_Cells()<br>0e5fdb60 1ce64a91 NPOI.HSSF.UserModel.HSSFSheet.NotifyRowShifting(NPOI.HSSF.UserModel.HSSFRow)<br>0e5fdba8 1ce64016 NPOI.HSSF.UserModel.HSSFSheet.ShiftRows(Int32, Int32, Int32, Boolean, Boolean, Boolean)<br>0e5fdc38 1ce63f14 NPOI.HSSF.UserModel.HSSFSheet.ShiftRows(Int32, Int32, Int32)<br>0e5fdc44 1ce628e2 NPOI.SS.Util.SheetUtil.CopyRow(NPOI.SS.UserModel.ISheet, Int32, Int32)<br>0e5fdc70 1ce6281a NPOI.HSSF.UserModel.HSSFSheet.CopyRow(Int32, Int32)</p></blockquote><p>如果將錯誤改成 dump 檔的話，然後再透過 DebugDiag Analysis 來分析，主要錯誤如下，</p><blockquote><p>ntdll!NtWaitForSingleObject+c<br>KERNELBASE!WaitForSingleObjectEx+99<br>mscorwks!CLREventWaitHelper+2f<br>mscorwks!CLREvent::WaitEx+117<br>mscorwks!CLREvent::Wait+17<br>mscorwks!ThreadpoolMgr::SafeWait+73<br>mscorwks!ThreadpoolMgr::WorkerThreadStart+11c<br>mscorwks!Thread::intermediateThreadProc+49<br>kernel32!BaseThreadInitThunk+24<br>ntdll!__RtlUserThreadStart+2f<br>ntdll!_RtlUserThreadStart+1b</p></blockquote><p>而它的錯誤點，就指到了上述 NPOI 的錯誤。</p><p>在沒什麼想法時，想說將那個有錯誤的應用程式，放到一個單獨使用的應用程式集區之中，比較好分析。<br>於是將它放過去之後，錯誤也隨之不見了。<br>再將它放在一起，錯誤又出現了。 @_@</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>新增一個新的應用程式集區，然後讓那個會出錯的應用程式使用，再測試一次程式，居然就不會有問題了。<br>或許也可以更新 NPOI 版本到較新的版本試看看。</p><p>大家有其他的想法嗎? 歡迎提供出來討論哦 :)</p><ul><li>2019/06/20 Update<ul><li>有同事也遇到一樣的問題，但如果將 Application Pool 改成 x64 的話，就沒有問題。</li></ul></li></ul><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://stackify.com/troubleshoot-w3wp-crash/" target="_blank" rel="noopener">How to Troubleshoot an ASP.NET Crash &amp; Analyze w3wp Crash Dumps</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h3&gt;&lt;p&gt;Windows 2012 R2, IIS, NPOI v2.1.1.0&lt;br&gt;.net 3.x , 應用程式集區為 32 位元&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="IIS" scheme="https://rainmakerho.github.io/tags/IIS/"/>
    
      <category term="NPOI" scheme="https://rainmakerho.github.io/tags/NPOI/"/>
    
      <category term="Windows 2012" scheme="https://rainmakerho.github.io/tags/Windows-2012/"/>
    
      <category term="Crash" scheme="https://rainmakerho.github.io/tags/Crash/"/>
    
      <category term="Application Pool" scheme="https://rainmakerho.github.io/tags/Application-Pool/"/>
    
  </entry>
  
  <entry>
    <title>NullReferenceException 在 new class 時?</title>
    <link href="https://rainmakerho.github.io/2019/05/28/2019013/"/>
    <id>https://rainmakerho.github.io/2019/05/28/2019013/</id>
    <published>2019-05-28T07:35:49.000Z</published>
    <updated>2019-05-30T07:30:32.346Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近同事詢問一個很奇怪的問題，在執行程式時會跳「System.NullReferenceException: 並未將物件參考設定為物件的執行個體。」的錯誤。但它錯誤的行號卻是在 new 一個 POCO 的 Class 。錯誤訊息如下，</p><blockquote><p>System.NullReferenceException: 並未將物件參考設定為物件的執行個體。<br>於 xxx.Controllers.rmController.rmAction(String num) 於 D:xxx\Controllers\rmController.cs: 行 482<br>於 lambda_method(Closure , ControllerBase , Object[] )<br>於 System.Web.Mvc.ReflectedActionDescriptor.Execute(ControllerContext controllerContext, IDictionary<code>2 parameters) 於 System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary</code>2 parameters)</p></blockquote><p>而在 Server 端的錯誤黃畫面中，原始碼程式錯誤，卻沒有明確顯示出錯誤的程式碼，如下，<br><img src="/2019/05/28/2019013/001.png" title="[Error Page]"></p><h3 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h3><p>Controller 的程式碼如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">rmAction</span>(<span class="params"><span class="keyword">string</span> num</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> model = <span class="keyword">new</span> rmModel(); <span class="comment">//這裡是 482 行</span></span><br><span class="line">    <span class="comment">// check transfer data</span></span><br><span class="line">    <span class="keyword">bool</span> hasData = <span class="keyword">this</span>.rmBLL.HasTransferToData(<span class="keyword">this</span>.CompanyId, num);</span><br><span class="line">    <span class="comment">// ... 其他程式碼</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟同事 Garry, Leo 一直想不透 new 一個 POCO 的 Class，怎麼可能會噴 NullReferenceException。<br>於是使用了各種方式來測試，例如直接在 View 或是直接建立 aspx 去測試，都不會錯誤。<br>後來同事將下一行的程式碼，也搬到 View 及 aspx 去試，錯誤就在正確的地方噴錯。<br>原來不是那個 new 錯誤，而是下一行的所造成的錯誤。<br>所以下次有類似的問題，可以試著將程式碼搬到 View or aspx 去測試，或許可以加快查問題的速度。<br>aspx 的 inline code 方式，我在 Debug 時蠻長使用的，因為直接新增一支 aspx 然後寫程式碼就可以驗證了。<br>808dk 的範例如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ Import Namespace=<span class="string">"System"</span> %&gt;</span><br><span class="line">&lt;%@ Page Language=<span class="string">"c#"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;script runat=<span class="string">"server"</span>&gt;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">ServerSideFunction</span>(<span class="params"><span class="keyword">string</span> input</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello "</span> + input;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;% <span class="keyword">string</span> pageVariable = <span class="string">"world"</span>; %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span></span><br><span class="line">    <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span> xml:lang=<span class="string">"en"</span> lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=windows-1252"</span> /&gt;</span><br><span class="line">&lt;title&gt;ASP.NET inline&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;% =ServerSideFunction(pageVariable) %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ Import <span class="keyword">Namespace</span>=<span class="string">"System"</span> %&gt;</span><br><span class="line">&lt;%@ Page Language=<span class="string">"VB"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;script runat=<span class="string">"server"</span>&gt;</span><br><span class="line">  <span class="keyword">Public</span> <span class="keyword">Function</span> ServerSideFunction(input <span class="keyword">As</span> <span class="built_in">String</span>) <span class="keyword">As</span> <span class="built_in">String</span></span><br><span class="line">    ServerSideFunction = <span class="string">"Hello "</span> &amp; input</span><br><span class="line">  <span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;% <span class="keyword">Dim</span> pageVariable <span class="keyword">As</span> <span class="built_in">String</span> = <span class="string">"world"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html <span class="keyword">PUBLIC</span> <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span></span><br><span class="line">    <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span> xml:lang=<span class="string">"en"</span> lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=windows-1252"</span> /&gt;</span><br><span class="line">&lt;title&gt;ASP.NET inline&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;% =ServerSideFunction(pageVariable) %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>從這例子中，可以發現，原來錯誤的行號也會騙人(如果 pdb 不對的話，行號或許也會不同)。<br>同一包建置出來的程式在 Local 或公司執行都沒有問題，部署到客戶端就噴錯，一度懷疑是否 web.config 有什麼差異。<br>最後同事以插旗子的方式去驗證不是掛在 new class 的地方。<br>將程式放到 aspx inline code 的方式，也是幫助我們快速找到問題的一個方式哦!</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="http://www.808.dk/?code-aspnet-inline" target="_blank" rel="noopener">Using inline code in ASP.NET (C# and VB.Net)</a></p><p>非常感謝同事 Garry, Leo 的分享</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近同事詢問一個很奇怪的問題，在執行程式時會跳「System.NullReferenceException: 並未將物件參考設定為物件的執行
      
    
    </summary>
    
    
      <category term="NullReferenceException" scheme="https://rainmakerho.github.io/tags/NullReferenceException/"/>
    
      <category term="ASP.NET MVC" scheme="https://rainmakerho.github.io/tags/ASP-NET-MVC/"/>
    
      <category term="Controller" scheme="https://rainmakerho.github.io/tags/Controller/"/>
    
      <category term="lambda_method" scheme="https://rainmakerho.github.io/tags/lambda-method/"/>
    
  </entry>
  
  <entry>
    <title>在目前的命令上發生嚴重錯誤。如果有任何結果，都必須捨棄。</title>
    <link href="https://rainmakerho.github.io/2019/05/24/2019012/"/>
    <id>https://rainmakerho.github.io/2019/05/24/2019012/</id>
    <published>2019-05-24T06:57:16.000Z</published>
    <updated>2019-05-24T07:32:16.904Z</updated>
    
    <content type="html"><![CDATA[<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><p>SQL 2017(14.0.3103.1), Windows 2016 STD</p><h3 id="錯誤訊息"><a href="#錯誤訊息" class="headerlink" title="錯誤訊息"></a>錯誤訊息</h3><blockquote><p>訊息 596，層級 21，狀態 1，行 0<br>工作階段為清除狀態，無法繼續執行。</p></blockquote><blockquote><p>訊息 0，層級 20，狀態 0，行 0<br>在目前的命令上發生嚴重錯誤。如果有任何結果，都必須捨棄。</p></blockquote><blockquote><p>訊息 0，層級 11，狀態 0，行 0<br>在目前的命令上發生嚴重錯誤。如果有任何結果，都必須捨棄。</p></blockquote><blockquote><p>Msg 0, Level 20, State 0, Line 0<br>A severe error occurred on the current command.<br>The results, if any, should be discarded</p></blockquote><h3 id="測試的-SQL"><a href="#測試的-SQL" class="headerlink" title="測試的 SQL"></a>測試的 SQL</h3><p>這個狀況主要是有 Table-valued Functions, variable, view 加 if 所造成的問題，如下，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--空的內容，主要測試使用</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">function</span> [dbo].[ufn_test3]()</span><br><span class="line"><span class="keyword">returns</span> @<span class="keyword">result</span> <span class="keyword">table</span></span><br><span class="line">(</span><br><span class="line">      TenantID <span class="built_in">int</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--定義一個變數</span></span><br><span class="line"><span class="keyword">DECLARE</span> @ORG_TYPE <span class="built_in">VARCHAR</span>(<span class="number">4</span>);</span><br><span class="line"><span class="comment">--執行 Table-valued Functions</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> [ufn_test3]();</span><br><span class="line">IF @ORG_TYPE = 'RMOK'</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> a</span><br><span class="line">  <span class="keyword">FROM</span> [EMP_RMOK]</span><br><span class="line">  <span class="keyword">WHERE</span> PER_SERIL_NO = <span class="string">'7'</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h3 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h3><p>感覺是否為 DB 的問題，做了 DBCC CHECKDB, 也沒有錯誤。<br>將原本那個 View 改建立另一個名稱，也不會有錯誤，但用原本的 View 的名稱就是會噴錯。<br>請同事將 Windows 更新跑一跑再重開機試看看，<br>如果沒有效果的話，以下是暫時的解決方式。</p><p>測試了幾次後，發現如果沒有 if 也不會有錯誤，於是先將變數設定一個初始值。</p><blockquote><p>DECLARE @ORG_TYPE VARCHAR(4);<br>改成<br>DECLARE @ORG_TYPE VARCHAR(4) = ‘’;<br>或是<br>DECLARE @ORG_TYPE VARCHAR(4);<br>SET @ORG_TYPE = ’’;</p></blockquote><p>就不會有那個問題發生了:)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h3&gt;&lt;p&gt;SQL 2017(14.0.3103.1), Windows 2016 STD&lt;/p&gt;
&lt;h3 id=&quot;錯誤訊息&quot;&gt;&lt;a href=&quot;#錯誤
      
    
    </summary>
    
    
      <category term="mssql 2017" scheme="https://rainmakerho.github.io/tags/mssql-2017/"/>
    
      <category term="table function" scheme="https://rainmakerho.github.io/tags/table-function/"/>
    
      <category term="if" scheme="https://rainmakerho.github.io/tags/if/"/>
    
      <category term="variable" scheme="https://rainmakerho.github.io/tags/variable/"/>
    
  </entry>
  
  <entry>
    <title>推薦學習前端的好網站-Scrimba</title>
    <link href="https://rainmakerho.github.io/2019/05/14/2019011/"/>
    <id>https://rainmakerho.github.io/2019/05/14/2019011/</id>
    <published>2019-05-14T02:11:16.000Z</published>
    <updated>2019-05-14T02:47:43.411Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近使用 React 來寫一個簡單的頁面，從 <a href="https://facebook.github.io/create-react-app/docs/getting-started" target="_blank" rel="noopener">Facebook Create React App</a>開始，建立一個專案，就開始了 ReactJS 之旅。</p><h3 id="部署問題"><a href="#部署問題" class="headerlink" title="部署問題"></a>部署問題</h3><p>當透過 npm run build 產生部署的檔案後，放到 IIS 的虛擬目錄之中，立馬噴 404 ，找不到 js 。<br>原來 react 預設是在根目錄，如果要使用相對路徑的話，需要在 package.json 中設定 homepage 的值，如下，</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"homepage": "./"</span><br></pre></td></tr></table></figure><p>詳細可以參考 <a href="https://facebook.github.io/create-react-app/docs/deployment" target="_blank" rel="noopener">React Deployment</a>。<br>可別以為每次搬程式都需要重 Build 一次哦 :)</p><h3 id="jsx-state-props-傻傻分不清"><a href="#jsx-state-props-傻傻分不清" class="headerlink" title="jsx, state, props 傻傻分不清"></a>jsx, state, props 傻傻分不清</h3><p>因為預設是使用 jsx ，所以常常在 {} 物件之間搞不清楚，常常噴錯，就上網去相關的問題來解決。</p><h3 id="Scrimba"><a href="#Scrimba" class="headerlink" title="Scrimba"></a>Scrimba</h3><p>雖然 react 蠻好入手的，但有一些基本的功還是需要學習的，在<a href="https://scrimba.com/g/glearnreact" target="_blank" rel="noopener">Scrimba react</a>中，除了它是免費的之外，它的 UI 本身就是可以讓學習者直接寫 Code 的 IDE。<br>而講師也常常說到一段，就停下來要我們去練習看看，然後再對照講師所寫的程式碼，學習上真的很方便。<br>而在 react 課程式，內容是從一個簡單的 ReactDOM.render 開始練習，從 function component 到 class component ，從小到大到拆分到別的 class，也有點到寫 Code 上需要注意的問題。<br>真的非常推薦，快上 <a href="https://scrimba.com/" target="_blank" rel="noopener">Scrimba</a> 好好學習吧 :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近使用 React 來寫一個簡單的頁面，從 &lt;a href=&quot;https://facebook.github.io/create-reac
      
    
    </summary>
    
    
      <category term="react" scheme="https://rainmakerho.github.io/tags/react/"/>
    
      <category term="scrimba" scheme="https://rainmakerho.github.io/tags/scrimba/"/>
    
      <category term="javascript" scheme="https://rainmakerho.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="https://rainmakerho.github.io/tags/vue/"/>
    
      <category term="css" scheme="https://rainmakerho.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>OpenTracing - Jaeger 接 Elastic Stack</title>
    <link href="https://rainmakerho.github.io/2019/04/02/2019010/"/>
    <id>https://rainmakerho.github.io/2019/04/02/2019010/</id>
    <published>2019-04-02T08:41:01.000Z</published>
    <updated>2019-04-02T10:10:43.659Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>當我們直接跑 jaeger-all-in-one 時，預設將資料放在 memory 之中。<br>如果要長期監控的話，我們可以將資料存起來。<br>所以我們就將資料放到 Elasticsearch 之中。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>我們可以參考 <a href="http://gigi.nullneuron.net/gigilabs/setting-up-elasticsearch-and-kibana-on-windows/" target="_blank" rel="noopener">SETTING UP ELASTICSEARCH AND KIBANA ON WINDOWS</a>就可以了，如下，</p><h4 id="安裝-Java-Runtime-Environment-JRE"><a href="#安裝-Java-Runtime-Environment-JRE" class="headerlink" title="安裝 Java Runtime Environment (JRE)"></a>安裝 Java Runtime Environment (JRE)</h4><p>請到 <a href="https://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html" target="_blank" rel="noopener">Java SE Runtime Environment 8 Downloads</a> 下載，筆者是下載 Java SE Runtime Environment 8u201 來安裝。<br>安裝完成後，檔案會放在 C:\Program Files\Java\jre1.8.0_201 。</p><h5 id="設定-Java-環境變數"><a href="#設定-Java-環境變數" class="headerlink" title="設定 Java 環境變數"></a>設定 Java 環境變數</h5><p>請設定環境變數 JAVA_HOME 為 C:\Program Files\Java\jre1.8.0_201 (依您安裝的路徑)。<br>並將 C:\Program Files\Java\jre1.8.0_201\bin 加入到 Path 之中 (請注意，在 Path 之中是否有別的 Java 路徑)。<br><img src="/2019/04/02/2019010/001.png" title="[Java Home]"></p><p>在 Command 執行 java -version 看看是否為安裝的版本，<br><img src="/2019/04/02/2019010/002.png" title="[Check Java Version]"></p><h4 id="安裝-Elasticsearch"><a href="#安裝-Elasticsearch" class="headerlink" title="安裝 Elasticsearch"></a>安裝 Elasticsearch</h4><h5 id="下載及安裝-Elasticsearch-6-7-0"><a href="#下載及安裝-Elasticsearch-6-7-0" class="headerlink" title="下載及安裝 Elasticsearch 6.7.0"></a>下載及安裝 Elasticsearch 6.7.0</h5><p>請到 <a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">Elasticsearch 官網下載網頁</a>，我的環境是 Windows ，所以我下載 MSI 檔來安裝。因為我是在本機上測試，所以安裝過程中，我不以 service 方式啟動。安裝完成後，程式會放在 C:\Program Files\Elastic\Elasticsearch\6.7.0 路徑(因為我裝的是 6.7.0 版本)，而設定及 Log 則放在 C:\ProgramData\Elastic\Elasticsearch 路徑。<br><img src="/2019/04/02/2019010/003.png" title="[Elasticsearch install path]"></p><h5 id="執行-Elasticsearch"><a href="#執行-Elasticsearch" class="headerlink" title="執行 Elasticsearch"></a>執行 Elasticsearch</h5><p>開啟 Command 視窗，cd 到 C:\Program Files\Elastic\Elasticsearch\6.7.0\bin 目錄，執行 elasticsearch ，如下，<br><img src="/2019/04/02/2019010/004.png" title="[Run elasticsearch.exe]"></p><p>再開啟瀏覽器，在網址列輸入 <a href="http://localhost:9200/" target="_blank" rel="noopener">http://localhost:9200/</a> 看看是否有正常的顯示資料。<br><img src="/2019/04/02/2019010/005.png" title="[Check Elasticsearch]"></p><h4 id="安裝-Kibana"><a href="#安裝-Kibana" class="headerlink" title="安裝 Kibana"></a>安裝 Kibana</h4><h5 id="下載及安裝-Kibana"><a href="#下載及安裝-Kibana" class="headerlink" title="下載及安裝 Kibana"></a>下載及安裝 Kibana</h5><p>請到 <a href="https://www.elastic.co/cn/downloads/kibana" target="_blank" rel="noopener">Kibana 官網下載網頁</a>，下載 Windows 平台的 zip 檔案。<br>下載完成後，請解壓縮到 C:\Program Files\Elastic 目錄，如下，<br><img src="/2019/04/02/2019010/006.png" title="[install kibana]"></p><h5 id="執行-Kibana"><a href="#執行-Kibana" class="headerlink" title="執行 Kibana"></a>執行 Kibana</h5><p>開啟 Command 視窗，cd 到 C:\Program Files\Elastic\kibana\kibana-6.7.0-windows-x86_64\bin 目錄，執行 kibana.bat ，如下，<br><img src="/2019/04/02/2019010/007.png" title="[Run kibana.bat]"><br>註:如果 Elasticsearch 在別台的話，請更改 C:\Program Files\Elastic\kibana\kibana-6.7.0-windows-x86_64\config\kibana.yml 中 elasticsearch.hosts 的設定值。</p><p>再開啟瀏覽器，在網址列輸入 <a href="http://localhost:5601/" target="_blank" rel="noopener">http://localhost:5601/</a> 看看是否有正常的顯示資料。<br><img src="/2019/04/02/2019010/008.png" title="[Check Kibana]"></p><h4 id="設定-Jaeger"><a href="#設定-Jaeger" class="headerlink" title="設定 Jaeger"></a>設定 Jaeger</h4><p>Elasticsearch 正常執行後，就可以開啟 Command 視窗，執行 jaeger-all-in-one.exe ，設定 span-storage.type 為 elasticsearch，如下，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jaeger-all-in-one --collector.zipkin.http-port=9411 --span-storage.type=elasticsearch --es.server-urls=http://localhost:9200/ --es.tags-as-fields.all=true</span><br></pre></td></tr></table></figure><p>當然，如果分別執行 jaeger-collector.exe 及 jaeger-query.exe 也可以哦!</p><p>當服務都起來後，啟動 訂便當 Bot 來測試，然後到 Kibana 建立 Index (Management -&gt; Kibana -&gt; Index Patterns)，我們可以建立 jaeger-span-* ，如下，<br><img src="/2019/04/02/2019010/009.png" title="[create Index]"></p><img src="/2019/04/02/2019010/010.png" title="[create Index with timeFilter]"><p>再點選 Discover ，如果目前沒有資料的話，可以點右上方設定查詢的時間，<br><img src="/2019/04/02/2019010/011.png" title="[Discover]"></p><p>設定時間區間後，就可以看到從 Jaeger 送進來的資料，如下，<br><img src="/2019/04/02/2019010/012.png" title="[Discover jaeger-span-* Data]"></p><p>如果測試沒問題的話，就可以將它們設定為 Service 。</p><p>測試過程中，感謝 George 同事的幫忙。</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="http://gigi.nullneuron.net/gigilabs/setting-up-elasticsearch-and-kibana-on-windows/" target="_blank" rel="noopener">SETTING UP ELASTICSEARCH AND KIBANA ON WINDOWS</a><br><a href="https://hackmd.io/s/SytK_Y9HE#" target="_blank" rel="noopener">Elastic stack(安裝篇 via Docker)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;當我們直接跑 jaeger-all-in-one 時，預設將資料放在 memory 之中。&lt;br&gt;如果要長期監控的話，我們可以將資料存起來。
      
    
    </summary>
    
    
      <category term="OpenTracing" scheme="https://rainmakerho.github.io/tags/OpenTracing/"/>
    
      <category term="Jaeger" scheme="https://rainmakerho.github.io/tags/Jaeger/"/>
    
      <category term="Elasticsearch" scheme="https://rainmakerho.github.io/tags/Elasticsearch/"/>
    
      <category term="Kibana" scheme="https://rainmakerho.github.io/tags/Kibana/"/>
    
  </entry>
  
  <entry>
    <title>document.[formName] is undefined</title>
    <link href="https://rainmakerho.github.io/2019/03/16/2019009/"/>
    <id>https://rainmakerho.github.io/2019/03/16/2019009/</id>
    <published>2019-03-16T05:48:31.000Z</published>
    <updated>2019-03-16T06:09:34.192Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近同時詢問一個 asp.net webform 系統從 .net framework 2.x 升到 .net 4.x 時，javascript 原本使用 document.formName 的物件，卻變成 undefined 而造成錯誤。</p><h3 id="研究與解決"><a href="#研究與解決" class="headerlink" title="研究與解決"></a>研究與解決</h3><p>到另一個沒有升級的版本去試，使用 document.formName 可以正常運作沒問題，但到 .net 4 的就是會變成 undefined。<br>於是檢查 Html 原始檔後發現， .net 4 的 Form 原本應該要有 name 屬性，卻不見了，只有 id 屬性。<br>而 .net 2.x 的 name 屬性有正常 Render 出來。</p><p>查看 <a href="https://docs.microsoft.com/en-us/aspnet/whitepapers/aspnet4/breaking-changes" target="_blank" rel="noopener">ASP.NET 4 Breaking Changes</a> ，原來預設 name 屬性是不會被 render 出來的，如果要讓 name 屬性 render 出來，要設定 pages 的 controlRenderingCompatibilityVersion 屬性，如下，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pages</span> <span class="attr">controlRenderingCompatibilityVersion</span>=<span class="string">"3.5"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>也要調整 requestValidationMode 為 2.0，如下，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">httpRuntime</span> <span class="attr">requestValidationMode</span>=<span class="string">"2.0"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>當然，從舊版升級到新版的 .net 通常還要設定 xhtmlConformance 的 mode 屬性，有時升版後 js 變的怪怪的，可以 check 一下，設定成 Legacy 試看看哦! 如下，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xhtmlConformance</span> <span class="attr">mode</span>=<span class="string">"Legacy"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://docs.microsoft.com/en-us/aspnet/whitepapers/aspnet4/breaking-changes" target="_blank" rel="noopener">ASP.NET 4 Breaking Changes</a><br><a href="https://blogs.msdn.microsoft.com/rakkimk/2011/04/12/asp-net-form-tag-doesnt-have-name-attribute-xhtmlconformance/" target="_blank" rel="noopener">ASP.NET – Form tag doesn’t have “name” attribute – xhtmlConformance</a></p><blockquote><p>非常感謝同事 herman 的測試與回饋</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近同時詢問一個 asp.net webform 系統從 .net framework 2.x 升到 .net 4.x 時，javascri
      
    
    </summary>
    
    
      <category term="軟體求生" scheme="https://rainmakerho.github.io/tags/%E8%BB%9F%E9%AB%94%E6%B1%82%E7%94%9F/"/>
    
      <category term="js" scheme="https://rainmakerho.github.io/tags/js/"/>
    
      <category term="document.formName" scheme="https://rainmakerho.github.io/tags/document-formName/"/>
    
      <category term="undefined" scheme="https://rainmakerho.github.io/tags/undefined/"/>
    
      <category term="asp.net 4" scheme="https://rainmakerho.github.io/tags/asp-net-4/"/>
    
      <category term="Legacy" scheme="https://rainmakerho.github.io/tags/Legacy/"/>
    
  </entry>
  
  <entry>
    <title>使用 OpenTracing - Jaeger (BFv3 使用 PostSharp)</title>
    <link href="https://rainmakerho.github.io/2019/03/11/2019008/"/>
    <id>https://rainmakerho.github.io/2019/03/11/2019008/</id>
    <published>2019-03-11T02:14:12.000Z</published>
    <updated>2019-03-11T03:39:59.746Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在前一篇「<a href="https://rainmakerho.github.io/2019/02/19/2019006/">使用 OpenTracing - Jaeger (BFv3 使用 Fody)</a>」，我們使用 <a href="https://github.com/vescon/MethodBoundaryAspect.Fody" target="_blank" rel="noopener">MethodBoundaryAspect.Fody</a> 來處理 OpenTracing 的程式碼，但是在有些 async 及 Overloading methods 時，會有修改 il 出錯而無法建置的狀況。 所以我們可以改用 PostSharp 的 OnMethodBoundaryAspect 來處理就沒有問題了。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>到 <a href="https://www.postsharp.net/download" target="_blank" rel="noopener">DOWNLOAD POSTSHARP</a> 下載安裝檔，在安裝過程中先選 PostSharp Essentials (限制一個專案只 Support 10 個 Class，詳細請參考:<a href="https://www.postsharp.net/essentials" target="_blank" rel="noopener">PostSharp Essentials</a>)。<br><img src="/2019/03/11/2019008/001.png" title="[PostSharp Essentials License]"></p><h4 id="建立-OpenTracing-的-MethodBoundaryAspect-專案"><a href="#建立-OpenTracing-的-MethodBoundaryAspect-專案" class="headerlink" title="建立 OpenTracing 的 MethodBoundaryAspect 專案"></a>建立 OpenTracing 的 MethodBoundaryAspect 專案</h4><p>當安裝好 PostSharp Essentials 後，新增一個 類別庫 專案，從 Nuget 套件中加入 PostSharp , 或在專案上按右鍵，選擇「Add PostSharp to project 」。<br><img src="/2019/03/11/2019008/002.png" title="[install PostSharp package]"></p><p>新增繼承自 OnMethodBoundaryAspect 的類別，然後在 OnEntry、OnException 及 OnExit 加入 OpetTracing 處理的程式碼，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OpenTracing.PostSharp</span></span><br><span class="line">&#123;</span><br><span class="line">[<span class="meta">PSerializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OpenTracingLoggingAspect</span> : <span class="title">OnMethodBoundaryAspect</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//接由外部 service 傳入的 Header 資料</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> AsyncLocal&lt;Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;&gt; TracerHttpHeaders =</span><br><span class="line"><span class="keyword">new</span> AsyncLocal&lt;Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnEntry</span>(<span class="params">MethodExecutionArgs args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!GlobalTracer.IsRegistered()) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">var</span> operationName = <span class="string">$"<span class="subst">&#123;args.Method.Name&#125;</span>.<span class="subst">&#123;args.Method.ReflectedType.Name&#125;</span>"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line"><span class="keyword">var</span> spanBuilder = tracer.BuildSpan(operationName);</span><br><span class="line"><span class="keyword">if</span> (tracer.ActiveSpan != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">spanBuilder.AsChildOf(tracer.ActiveSpan);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (TracerHttpHeaders.Value != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// check http</span></span><br><span class="line"><span class="keyword">var</span> parentSpanCtx = tracer.Extract(BuiltinFormats.HttpHeaders, <span class="keyword">new</span> TextMapExtractAdapter(TracerHttpHeaders.Value));</span><br><span class="line">spanBuilder.AsChildOf(parentSpanCtx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> activeScope = spanBuilder.StartActive(<span class="literal">true</span>);</span><br><span class="line">args.MethodExecutionTag = activeScope;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnException</span>(<span class="params">MethodExecutionArgs args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!GlobalTracer.IsRegistered()) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//args.FlowBehavior = FlowBehavior.ThrowException;</span></span><br><span class="line"><span class="keyword">var</span> operationName = <span class="string">$"<span class="subst">&#123;args.Method.Name&#125;</span>.<span class="subst">&#123;args.Method.ReflectedType.Name&#125;</span>"</span>;</span><br><span class="line"><span class="keyword">var</span> activeScope = args.MethodExecutionTag <span class="keyword">as</span> IScope;</span><br><span class="line">Tags.Error.Set(activeScope.Span, <span class="literal">true</span>);</span><br><span class="line">activeScope.Span.Log(<span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; &#123; [<span class="string">"error"</span>] = args.Exception.ToString() &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnExit</span>(<span class="params">MethodExecutionArgs args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!GlobalTracer.IsRegistered()) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">var</span> operationName = <span class="string">$"<span class="subst">&#123;args.Method.Name&#125;</span>.<span class="subst">&#123;args.Method.ReflectedType.Name&#125;</span>"</span>;</span><br><span class="line"><span class="keyword">var</span> activeScope = args.MethodExecutionTag <span class="keyword">as</span> IScope;</span><br><span class="line">activeScope.Dispose();</span><br><span class="line">System.Diagnostics.Debug.WriteLine(<span class="string">$"[<span class="subst">&#123;operationName&#125;</span>]:OnExit"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在-Bot-專案中加入"><a href="#在-Bot-專案中加入" class="headerlink" title="在 Bot 專案中加入"></a>在 Bot 專案中加入</h4><p>一樣在 Bot 專案中，一樣要加入 PostSharp 的套件，在 Global.asax.cs 中 Application_BeginRequest 中加入取得 Jaeger Http Header 然後指定給 OpenTracingLoggingAspect 的 TracerHttpHeaders 屬性，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_BeginRequest</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//處理外部送進來的 opentracing data</span></span><br><span class="line"><span class="keyword">var</span> headerDict = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;();</span><br><span class="line"><span class="keyword">var</span> headers = <span class="keyword">base</span>.Context.Request.Headers;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> k <span class="keyword">in</span> headers.AllKeys)</span><br><span class="line">&#123;</span><br><span class="line">headerDict.Add(k, headers[k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (headerDict.Count &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">OpenTracingLoggingAspect.TracerHttpHeaders.Value = headerDict;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">OpenTracingLoggingAspect.TracerHttpHeaders.Value = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="呼叫外部-Service-加入-Jaeger-Http-Header"><a href="#呼叫外部-Service-加入-Jaeger-Http-Header" class="headerlink" title="呼叫外部 Service 加入 Jaeger Http Header"></a>呼叫外部 Service 加入 Jaeger Http Header</h4><p>我們要在呼叫 外部 Service 地方，加入 Jaeger Http Header，所以建議在生成 httpClient 時，可以統一由 Factory 來生成，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//add opentracing</span></span><br><span class="line"><span class="keyword">if</span> (GlobalTracer.IsRegistered())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line">    <span class="keyword">var</span> dictionary = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;();</span><br><span class="line">    <span class="keyword">var</span> span = tracer.ActiveSpan;</span><br><span class="line">    <span class="keyword">if</span> (span != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tracer.Inject(span.Context, BuiltinFormats.HttpHeaders, <span class="keyword">new</span> TextMapInjectAdapter(dictionary));</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> entry <span class="keyword">in</span> dictionary)</span><br><span class="line">            HttpClient.DefaultRequestHeaders.Add(entry.Key, entry.Value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="設定-OpenTracingLoggingAspect-屬性"><a href="#設定-OpenTracingLoggingAspect-屬性" class="headerlink" title="設定 [OpenTracingLoggingAspect] 屬性"></a>設定 [OpenTracingLoggingAspect] 屬性</h4><p>我們可以在需要記錄的 Class 中設定，或是在 Properties / AssemblyInfo.cs 中設定，例如以下我針對 namespace EasyLifeBot.Actions 及 EasyLifeBot.Controllers 開頭的類別去記錄，詳細用法，請參考 <a href="https://doc.postsharp.net/attribute-multicasting" target="_blank" rel="noopener">Adding Aspects to Multiple Declarations Using Attributes</a>，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">assembly: OpenTracingLoggingAspect(</span></span><br><span class="line"><span class="meta">   AttributeTargetTypes = <span class="meta-string">"EasyLifeBot.Actions.*"</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: OpenTracingLoggingAspect(</span></span><br><span class="line"><span class="meta">   AttributeTargetTypes = <span class="meta-string">"EasyLifeBot.Controllers.*"</span>)</span>]</span><br></pre></td></tr></table></figure><p>因為是使用 PostSharp Essentials ，如果類別超過 10 個，就會出現 license 的錯誤，而無法建置哦! 如下，</p><blockquote><p>License error. The project uses non-licensed features. It is not allowed to enhance or analyze more than 10 classes in each project by features not covered by the installed licenses. Please visit <a href="https://www.postsharp.net/purchase" target="_blank" rel="noopener">https://www.postsharp.net/purchase</a> to acquire a license of PostSharp. EasyLifeBot</p></blockquote><h3 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h3><p>當順利建置，就可以把 Jaeger 開起來，並執行程式跑看看，我一樣使用 <strong>訂便當 BOT</strong> 來測試。<br>執行後，可以順利從 Jaeger Search UI 中看到從 Bot Connector =&gt; 訂便當 BOT =&gt; Bot Connector 都串起來了。<br><img src="/2019/03/11/2019008/003.png" title="[Jaeger Search UI]"></p><p>發生錯誤時，除了正常串接起來外，也可以收到 Error 的 Log ，如下，<br><img src="/2019/03/11/2019008/004.png" title="[Log Error]"></p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://doc.postsharp.net/method-decorator" target="_blank" rel="noopener">Injecting Behaviors Before and After Method Execution</a><br><a href="https://doc.postsharp.net/attribute-multicasting" target="_blank" rel="noopener">Adding Aspects to Multiple Declarations Using Attributes</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在前一篇「&lt;a href=&quot;https://rainmakerho.github.io/2019/02/19/2019006/&quot;&gt;使用 Op
      
    
    </summary>
    
    
      <category term="OpenTracing" scheme="https://rainmakerho.github.io/tags/OpenTracing/"/>
    
      <category term="Distributed Tracing" scheme="https://rainmakerho.github.io/tags/Distributed-Tracing/"/>
    
      <category term="Jaeger" scheme="https://rainmakerho.github.io/tags/Jaeger/"/>
    
      <category term="APM" scheme="https://rainmakerho.github.io/tags/APM/"/>
    
      <category term="Dynatrace" scheme="https://rainmakerho.github.io/tags/Dynatrace/"/>
    
      <category term=".NET" scheme="https://rainmakerho.github.io/tags/NET/"/>
    
      <category term="BFv3" scheme="https://rainmakerho.github.io/tags/BFv3/"/>
    
      <category term="Fody" scheme="https://rainmakerho.github.io/tags/Fody/"/>
    
      <category term="MethodBoundaryAspect.Fody" scheme="https://rainmakerho.github.io/tags/MethodBoundaryAspect-Fody/"/>
    
      <category term="IL Rewriting" scheme="https://rainmakerho.github.io/tags/IL-Rewriting/"/>
    
      <category term="IL weaving" scheme="https://rainmakerho.github.io/tags/IL-weaving/"/>
    
      <category term="PostSharp" scheme="https://rainmakerho.github.io/tags/PostSharp/"/>
    
  </entry>
  
  <entry>
    <title>Inheritance security rules violated by type: &#39;System.Net.Http.WebRequestHandler&#39;</title>
    <link href="https://rainmakerho.github.io/2019/02/23/2019007/"/>
    <id>https://rainmakerho.github.io/2019/02/23/2019007/</id>
    <published>2019-02-23T02:41:55.000Z</published>
    <updated>2019-02-23T02:51:08.748Z</updated>
    
    <content type="html"><![CDATA[<p>今天在執行程式時，居然噴「Inheritance security rules violated by type: ‘System.Net.Http.WebRequestHandler’.」的錯誤。</p><p>查了一下，似乎在 System.Net.Http 4.1.0.0 版本有一些問題，解法有 2 個，如下，</p><ol><li>改用回 4.0.0.0 版本<br>在 web.config 中的 bindingRedirect 改用 4.0.0.0 版本，如下，</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bindingRedirect</span> <span class="attr">oldVersion</span>=<span class="string">"0.0.0.0-4.1.1.0"</span> <span class="attr">newVersion</span>=<span class="string">"4.0.0.0"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用新版本<br>在 Nuget 中，找 System.Net.Http ，安裝新的版本，筆者是使用 4.1.1.3</li></ol><p>以上解法分享給大家。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在執行程式時，居然噴「Inheritance security rules violated by type: ‘System.Net.Http.WebRequestHandler’.」的錯誤。&lt;/p&gt;
&lt;p&gt;查了一下，似乎在 System.Net.Http 4.1.0
      
    
    </summary>
    
    
      <category term="System.Net.Http" scheme="https://rainmakerho.github.io/tags/System-Net-Http/"/>
    
      <category term="4.1.0.0" scheme="https://rainmakerho.github.io/tags/4-1-0-0/"/>
    
      <category term="軟體求生" scheme="https://rainmakerho.github.io/tags/%E8%BB%9F%E9%AB%94%E6%B1%82%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>使用 OpenTracing - Jaeger (BFv3 使用 Fody)</title>
    <link href="https://rainmakerho.github.io/2019/02/19/2019006/"/>
    <id>https://rainmakerho.github.io/2019/02/19/2019006/</id>
    <published>2019-02-19T14:29:00.000Z</published>
    <updated>2019-02-23T02:41:34.022Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在前一篇 <a href="https://rainmakerho.github.io/2019/01/20/2019005/">使用 OpenTracing - Jaeger (BFv3 使用 Dynamic Proxy)</a> 中，我們透過 Dynamic Proxy 的方式去封裝那些需要記錄的物件。<br>雖然使用 Dynamic Proxy 的方式，可以讓我們將那些 OpenTracing 的範本程式碼抽離出來，但是在專案還是需要做一些調整，例如使用 Autofac, 修改 Method 為 virtual methods 。 這對於沒有使用 Dependency Injection 的系統來說，是一個負擔。 那是否可以做到像 dynaTrace 這樣，直接寫到 bytecode 之中呢?</p><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><h4 id="Fody"><a href="#Fody" class="headerlink" title="Fody"></a><a href="https://github.com/Fody/Home" target="_blank" rel="noopener">Fody</a></h4><p>上網 Search 後，除了可以透過 <a href="https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/profiling-overview" target="_blank" rel="noopener">.NET Profiling API</a> 外，還可以透過 IL Rewriting 的方式，可以讓我們在 Compile 時，動態地把程式寫到我們註記的地方, 運作方式如下，</p><p><strong>.NET Source Code =&gt; Compiler =&gt; Managed assembly(CIL) =&gt; Fody =&gt; CIL weaving =&gt; modified CIL</strong><br>所以它會拿我們 Build 好的 DLL 去加程式碼後，再產出一個新的 DLL 蓋掉原本的。</p><h4 id="Fody-Addins"><a href="#Fody-Addins" class="headerlink" title="Fody Addins"></a><a href="https://github.com/Fody/Home/blob/master/pages/addins.md" target="_blank" rel="noopener">Fody Addins</a></h4><p>Fody 目前有蠻多的 <a href="https://github.com/Fody/Home/blob/master/pages/addins.md" target="_blank" rel="noopener">Fody Addins</a>，大家只要從 Nuget 加入它們，然後在 FodyWeavers.xml 中設定要用的 Addin ，再依 Addin 需要的 程式碼及在程式中加入 Addins 的 Attribute ，重新建置就可以了。<br>常用的有 <a href="https://github.com/Fody/ToString" target="_blank" rel="noopener">ToString.Fody</a>, <a href="https://github.com/Fody/NullGuard" target="_blank" rel="noopener">NullGuard.Fody</a>, <a href="https://github.com/Fody/PropertyChanged" target="_blank" rel="noopener">PropertyChanged.Fody</a> 及 <a href="https://github.com/Fody/Janitor" target="_blank" rel="noopener">Janitor.Fody</a>。<br>大家可以看看 <a href="https://github.com/Fody/Home/blob/master/pages/addins.md" target="_blank" rel="noopener">Fody Addins</a> 中，有沒有想要用在專案之中的哦!<br>而針對 Opentracing 這樣子的行為，有看到 <a href="https://github.com/vescon/MethodBoundaryAspect.Fody" target="_blank" rel="noopener">MethodBoundaryAspect.Fody</a> 蠻適合拿來用的，所以我們就用它來實作。</p><h4 id="使用-MethodBoundaryAspect-Fody"><a href="#使用-MethodBoundaryAspect-Fody" class="headerlink" title="使用 MethodBoundaryAspect.Fody"></a>使用 <a href="https://github.com/vescon/MethodBoundaryAspect.Fody" target="_blank" rel="noopener">MethodBoundaryAspect.Fody</a></h4><h5 id="規劃流程"><a href="#規劃流程" class="headerlink" title="規劃流程"></a>規劃流程</h5><p>我們的 OpenTracing 的程式碼都是很固定的，所以可以將它們分別放到 <a href="https://github.com/vescon/MethodBoundaryAspect.Fody" target="_blank" rel="noopener">MethodBoundaryAspect.Fody</a> 中的 OnEntry, OnExit 及 OnException 這 3 個 Methods 之中。<br>再來就是要考量的是，如何接由 Bot Connector 傳進來的 Jaeger Http Header 資料。 所以可以在 Global.asax 的 Application_BeginRequest 中接收，然後指定給 Addin 屬性中的 static AsyncLocal 的變數，當然在 Call 外部 api 時，也要將目前的 ActiveSpan 放到 Http Header 之中。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><h4 id="加入-OpenTracing-Jaeger-Client"><a href="#加入-OpenTracing-Jaeger-Client" class="headerlink" title="加入 OpenTracing Jaeger Client"></a>加入 OpenTracing Jaeger Client</h4><p>這部份請參考 <a href="https://rainmakerho.github.io/2019/01/04/2019002/">使用 OpenTracing - Jaeger - .NET FRAMEWORK (以 BFV3 訂便當 BOT 為範例)</a> 區段的介紹，加入需要的 Nuget 套件及 Jaeger Client DLL 後，在 Globa.asax.cs 的 Application_Start Method 去註冊 Jaeger，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// using Opentracing</span></span><br><span class="line"><span class="keyword">var</span> tracer = <span class="keyword">new</span> Jaeger.Tracer.Builder(<span class="string">"訂便當Bot"</span>)</span><br><span class="line">    .WithSampler(<span class="keyword">new</span> ConstSampler(<span class="literal">true</span>))</span><br><span class="line">    .Build();</span><br><span class="line"></span><br><span class="line">GlobalTracer.Register(tracer);</span><br></pre></td></tr></table></figure><h4 id="加入-MethodBoundaryAspect-Fody"><a href="#加入-MethodBoundaryAspect-Fody" class="headerlink" title="加入 MethodBoundaryAspect.Fody"></a>加入 <a href="https://github.com/vescon/MethodBoundaryAspect.Fody" target="_blank" rel="noopener">MethodBoundaryAspect.Fody</a></h4><p>從 Nuget 中加入 MethodBoundaryAspect.Fody ，<br><img src="/2019/02/19/2019006/001.png" title="[MethodBoundaryAspect.Fody]"></p><p>然後在 FodyWeavers.xml 中加入 MethodBoundaryAspect.Fody ，如下，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">Weavers</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"FodyWeavers.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">VerifyAssembly</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MethodBoundaryAspect</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Weavers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <strong>VerifyAssembly=”true”</strong> 的原因是因為我們想要在插入 IL 時，檢查看看是否有錯誤，才不會在執行時發生<strong>System.InvalidProgramException: Common Language Runtime detected an invalid program.</strong>的錯誤訊息。</p><h4 id="實作-OpenTracingLogAttribute"><a href="#實作-OpenTracingLogAttribute" class="headerlink" title="實作 OpenTracingLogAttribute"></a>實作 OpenTracingLogAttribute</h4><p>繼承自 OnMethodBoundaryAspect ，在 OnEntry, OnExit 及 OnException 這 3 個 Methods 之中寫入 Opentracing 的程式碼，其中包含 async 的處理，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OpenTracingLogAttribute</span> : <span class="title">OnMethodBoundaryAspect</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//接由外部 service 傳入的 Header 資料</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AsyncLocal&lt;Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;&gt; TracerHttpHeaders =</span><br><span class="line">        <span class="keyword">new</span> AsyncLocal&lt;Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 判斷是否要 Log 到 OpenTracing 之中</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="operationName"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 有些 async 的Method 並不想要記錄，所以在此判斷</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsNeedLog</span>(<span class="params"><span class="keyword">string</span> operationName</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span>[] ignoreMethodNames = <span class="keyword">new</span> <span class="keyword">string</span>[]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"SetStateMachine.&lt;"</span>,</span><br><span class="line">            <span class="string">"MoveNext.&lt;"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> result = !ignoreMethodNames.Any(ig =&gt; operationName.StartsWith(ig));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnEntry</span>(<span class="params">MethodExecutionArgs args</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!GlobalTracer.IsRegistered()) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">var</span> operationName = <span class="string">$"<span class="subst">&#123;args.Method.Name&#125;</span>.<span class="subst">&#123;args.Method.ReflectedType.Name&#125;</span>"</span>;</span><br><span class="line">        <span class="keyword">if</span> (!IsNeedLog(operationName)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line">        <span class="keyword">var</span> spanBuilder = tracer.BuildSpan(operationName);</span><br><span class="line">        <span class="keyword">if</span> (tracer.ActiveSpan != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            spanBuilder.AsChildOf(tracer.ActiveSpan);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (TracerHttpHeaders.Value != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// check http</span></span><br><span class="line">            <span class="keyword">var</span> parentSpanCtx = tracer.Extract(BuiltinFormats.HttpHeaders, <span class="keyword">new</span> TextMapExtractAdapter(TracerHttpHeaders.Value));</span><br><span class="line">            spanBuilder.AsChildOf(parentSpanCtx);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> activeScope = spanBuilder.StartActive(<span class="literal">true</span>);</span><br><span class="line">        args.MethodExecutionTag = activeScope;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnExit</span>(<span class="params">MethodExecutionArgs args</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!GlobalTracer.IsRegistered()) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">var</span> operationName = <span class="string">$"<span class="subst">&#123;args.Method.Name&#125;</span>.<span class="subst">&#123;args.Method.ReflectedType.Name&#125;</span>"</span>;</span><br><span class="line">        <span class="keyword">if</span> (!IsNeedLog(operationName)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> returnTask = args.ReturnValue <span class="keyword">as</span> Task;</span><br><span class="line">        <span class="keyword">if</span> (returnTask != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//async 要加在後面</span></span><br><span class="line">            returnTask.ContinueWith(task =&gt; LogOnExit(args));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            LogOnExit(args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnException</span>(<span class="params">MethodExecutionArgs args</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!GlobalTracer.IsRegistered()) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">var</span> operationName = <span class="string">$"<span class="subst">&#123;args.Method.Name&#125;</span>.<span class="subst">&#123;args.Method.ReflectedType.Name&#125;</span>"</span>;</span><br><span class="line">        <span class="keyword">if</span> (!IsNeedLog(operationName)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> returnTask = args.ReturnValue <span class="keyword">as</span> Task;</span><br><span class="line">        <span class="comment">//如果是 Task 在 OnExit 中處理</span></span><br><span class="line">        <span class="keyword">if</span> (returnTask == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//這裡處理同步的部份</span></span><br><span class="line">            <span class="keyword">var</span> activeScope = args.MethodExecutionTag <span class="keyword">as</span> IScope;</span><br><span class="line">            Tags.Error.Set(activeScope.Span, <span class="literal">true</span>);</span><br><span class="line">            activeScope.Span.Log(<span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; &#123; [<span class="string">"error"</span>] = args.Exception.ToString() &#125;);</span><br><span class="line">            activeScope.Dispose();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LogOnExit</span>(<span class="params">MethodExecutionArgs args</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> activeScope = args.MethodExecutionTag <span class="keyword">as</span> IScope;</span><br><span class="line">        <span class="keyword">var</span> operationName = <span class="string">$"<span class="subst">&#123;args.Method.Name&#125;</span>.<span class="subst">&#123;args.Method.ReflectedType.Name&#125;</span>"</span>;</span><br><span class="line">        <span class="keyword">var</span> returnTask = args.ReturnValue <span class="keyword">as</span> Task;</span><br><span class="line">        <span class="keyword">if</span> (returnTask != <span class="literal">null</span> &amp;&amp; returnTask.IsFaulted)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//exception for async</span></span><br><span class="line">            Tags.Error.Set(activeScope.Span, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">var</span> exIndex = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> ex <span class="keyword">in</span> returnTask.Exception.InnerExceptions)</span><br><span class="line">            &#123;</span><br><span class="line">                activeScope.Span.Log(<span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; &#123; [<span class="string">$"error<span class="subst">&#123;exIndex++&#125;</span>"</span>] = ex.ToString() &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        activeScope.Dispose();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收外部傳入的-Jaeger-Http-Header"><a href="#接收外部傳入的-Jaeger-Http-Header" class="headerlink" title="接收外部傳入的 Jaeger Http Header"></a>接收外部傳入的 Jaeger Http Header</h4><p>在 Global.asax.cs 中 Application_BeginRequest 中加入取得 Jaeger Http Header 然後指定給 OpenTracingLogAttribute 的 TracerHttpHeaders 屬性，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_BeginRequest</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//處理外部送進來的 opentracing data</span></span><br><span class="line">    <span class="keyword">var</span> headerDict = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;();</span><br><span class="line">    <span class="keyword">var</span> headers = <span class="keyword">base</span>.Context.Request.Headers;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> k <span class="keyword">in</span> headers.AllKeys)</span><br><span class="line">    &#123;</span><br><span class="line">        headerDict.Add(k, headers[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (headerDict.Count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        OpenTracingLogAttribute.TracerHttpHeaders.Value = headerDict;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        OpenTracingLogAttribute.TracerHttpHeaders.Value = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="呼叫外部-Service-加入-Jaeger-Http-Header"><a href="#呼叫外部-Service-加入-Jaeger-Http-Header" class="headerlink" title="呼叫外部 Service 加入 Jaeger Http Header"></a>呼叫外部 Service 加入 Jaeger Http Header</h4><p>我們要在呼叫 外部 Service 地方，加入 Jaeger Http Header，所以建議在生成 httpClient 時，可以統一由 Factory 來生成，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//add opentracing</span></span><br><span class="line"><span class="keyword">if</span> (GlobalTracer.IsRegistered())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line">    <span class="keyword">var</span> dictionary = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;();</span><br><span class="line">    <span class="keyword">var</span> span = tracer.ActiveSpan;</span><br><span class="line">    <span class="keyword">if</span> (span != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tracer.Inject(span.Context, BuiltinFormats.HttpHeaders, <span class="keyword">new</span> TextMapInjectAdapter(dictionary));</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> entry <span class="keyword">in</span> dictionary)</span><br><span class="line">            HttpClient.DefaultRequestHeaders.Add(entry.Key, entry.Value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在需要記錄的-Class-中設定-OpenTracingLog-屬性"><a href="#在需要記錄的-Class-中設定-OpenTracingLog-屬性" class="headerlink" title="在需要記錄的 Class 中設定 OpenTracingLog 屬性"></a>在需要記錄的 Class 中設定 OpenTracingLog 屬性</h4><p>所以我們可以在 MessagesController, RootDialog 及需要記錄的 Class or Method 加入 [OpenTracingLog] 屬性就可以了 。</p><h3 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h3><p>當順利在 Class 或 Method 上加入 [OpenTracingLog] 屬性後，就可以把 Jaeger 開起來，並執行程式跑看看，我一樣使用 <strong>訂便當 BOT</strong> 來測試。<br>執行後，可以順利從 Jaeger Search UI 中看到從 Bot Connector =&gt; Bot =&gt; Bot Connector 都串起來了，如下，<br><img src="/2019/02/19/2019006/002.png" title="[Jaeger Search UI]"></p><ul><li>註 1: 除了加在 Class or Method 上，也可以針對整個 Assembly 去設定，可以在 AssemblyInfo.cs 中設定，它會加入到 public method &amp; properties 之中，如下，</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">assembly: OpenTracingLog</span>]</span><br></pre></td></tr></table></figure><ul><li>註 2: 目前 <a href="https://github.com/vescon/MethodBoundaryAspect.Fody" target="_blank" rel="noopener">MethodBoundaryAspect.Fody</a> 只 Support 整個 assembly, class 、 methods 及屬性，還不 Support 一些 Filters。</li><li>註 3: PEVerify of the assembly failed. jmp / exception into the middle of an instruction.<br>如果在建置過程中有出現上面的 PEVerify 錯誤，請查看一下那個 Method 是不是為 async ，在最後少了 <strong>await Task.CompletedTask;</strong> 或是 <strong>return await Task.FromResult<object>(null);</object></strong> 。<br>我的狀況是因為有 <strong>if { … await } else { … await }</strong> 而它無法正確地找到對的地方把程式碼放進去。錯誤訊息為，</li></ul><blockquote><p>Error Fody: PEVerify of the assembly failed.<br>[IL]: Error: [xxx.dll : EasyLifeBot.Actions.AccountActionStrategy+<doactionasync>d__3::\$_executor_MoveNext][offset 0x000001d7] jmp / exception into the middle of an instruction.(Error: 0x80131847)</doactionasync></p></blockquote><ul><li>註 4:一開始建議是先加在入口的地方，有需要再往後加。</li><li>註 5: <a href="https://github.com/vescon/MethodBoundaryAspect.Fody" target="_blank" rel="noopener">MethodBoundaryAspect.Fody</a>使用上如果不是很順手的話，也可以參考使用 <a href="https://doc.postsharp.net/t_postsharp_aspects_onmethodboundaryaspect" target="_blank" rel="noopener">PostSharp</a>試看看。</li></ul><p>雖然還是要寫一點點程式碼及設定，但是往自動化又進步了一些哦:)</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://github.com/Fody" target="_blank" rel="noopener">Fody</a><br><a href="https://github.com/vescon/MethodBoundaryAspect.Fody" target="_blank" rel="noopener">MethodBoundaryAspect.Fody</a><br><a href="http://www.castleproject.org/projects/dynamicproxy/" target="_blank" rel="noopener">DynamicProxy</a><br><a href="https://stackify.com/three-types-of-net-profilers/" target="_blank" rel="noopener">List of .Net Profilers: 3 Different Types and Why You Need All of Them</a><br><a href="https://www.slideshare.net/shaun_wilde/net-profilers-and-il-rewriting-ddd-melbourne-2" target="_blank" rel="noopener">.NET Profilers and IL Rewriting - DDD Melbourne 2</a><br><a href="https://mattwarren.org/2018/08/21/Monitoring-and-Observability-in-the-.NET-Runtime/" target="_blank" rel="noopener">Monitoring and Observability in the .NET Runtime</a><br><a href="https://mattwarren.org/2014/08/14/how-to-mock-sealed-classes-and-static-methods/" target="_blank" rel="noopener">How to mock sealed classes and static methods</a><br><a href="https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/profiling-overview" target="_blank" rel="noopener">.NET Profiling API</a><br><a href="https://doc.postsharp.net/t_postsharp_aspects_onmethodboundaryaspect" target="_blank" rel="noopener">PostSharp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在前一篇 &lt;a href=&quot;https://rainmakerho.github.io/2019/01/20/2019005/&quot;&gt;使用 Op
      
    
    </summary>
    
    
      <category term="OpenTracing" scheme="https://rainmakerho.github.io/tags/OpenTracing/"/>
    
      <category term="Distributed Tracing" scheme="https://rainmakerho.github.io/tags/Distributed-Tracing/"/>
    
      <category term="Jaeger" scheme="https://rainmakerho.github.io/tags/Jaeger/"/>
    
      <category term="APM" scheme="https://rainmakerho.github.io/tags/APM/"/>
    
      <category term="Dynatrace" scheme="https://rainmakerho.github.io/tags/Dynatrace/"/>
    
      <category term=".NET" scheme="https://rainmakerho.github.io/tags/NET/"/>
    
      <category term="BFv3" scheme="https://rainmakerho.github.io/tags/BFv3/"/>
    
      <category term="Fody" scheme="https://rainmakerho.github.io/tags/Fody/"/>
    
      <category term="MethodBoundaryAspect.Fody" scheme="https://rainmakerho.github.io/tags/MethodBoundaryAspect-Fody/"/>
    
      <category term="IL Rewriting" scheme="https://rainmakerho.github.io/tags/IL-Rewriting/"/>
    
      <category term="IL weaving" scheme="https://rainmakerho.github.io/tags/IL-weaving/"/>
    
      <category term="PostSharp" scheme="https://rainmakerho.github.io/tags/PostSharp/"/>
    
  </entry>
  
  <entry>
    <title>使用 OpenTracing - Jaeger (BFv3 使用 Dynamic Proxy)</title>
    <link href="https://rainmakerho.github.io/2019/01/20/2019005/"/>
    <id>https://rainmakerho.github.io/2019/01/20/2019005/</id>
    <published>2019-01-20T10:31:40.000Z</published>
    <updated>2019-01-24T08:59:20.536Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 <a href="https://rainmakerho.github.io/2019/01/15/2019004/">使用 OpenTracing - Jaeger (AP 整合)</a> 之中，我們定義 OpenTracing 的區塊，然後將需要的資訊寫進去，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">string</span> operationName = <span class="string">"RootDialog-MessageReceivedAsync"</span>;</span><br><span class="line"><span class="keyword">var</span> spanBuilder = tracer.BuildSpan(operationName);</span><br><span class="line"><span class="keyword">if</span> (tracer.ActiveSpan != <span class="literal">null</span>)</span><br><span class="line">    spanBuilder.AsChildOf(tracer.ActiveSpan);</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> scope = spanBuilder.StartActive(<span class="literal">true</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 其他的程式碼 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這些程式碼跟 Exception Handle 類似，所以我們可以透過 <a href="https://autofaccn.readthedocs.io/en/latest/advanced/interceptors.html" target="_blank" rel="noopener">Dynamic Proxy</a> 的方式來包裝起來，讓程式開發人員專注在程式的邏輯之中，不用去理會這煩雜的程式碼。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><h4 id="加入-Autofac-Extras-DynamicProxy2-套件"><a href="#加入-Autofac-Extras-DynamicProxy2-套件" class="headerlink" title="加入 Autofac.Extras.DynamicProxy2 套件"></a>加入 Autofac.Extras.DynamicProxy2 套件</h4><p>我們可以依 <a href="https://autofaccn.readthedocs.io/en/latest/advanced/interceptors.html" target="_blank" rel="noopener">Autofac Type Interceptors</a> 從 Nuget 套件中加入 Autofac.Extras.DynamicProxy2 ，如下，<br><img src="/2019/01/20/2019005/001.png" title="[Autofac.Extras.DynamicProxy2]"></p><h4 id="建立-Interceptor-物件"><a href="#建立-Interceptor-物件" class="headerlink" title="建立 Interceptor 物件"></a>建立 Interceptor 物件</h4><p>依 <a href="https://autofaccn.readthedocs.io/en/latest/advanced/interceptors.html" target="_blank" rel="noopener">Autofac Type Interceptors</a> 的範例，建立實作 Interceptor 的物件，然後將 OpenTracing 的程式碼加進去，然後註冊要使用的 Interceptor ，結果從 Jaeger UI 看到的圖卻無法呈現真正的時間，如下，<br><img src="/2019/01/20/2019005/002.png" title="[Jaeger UI async method call]"></p><p>這是因為在 C# 中大多的程式是用 async/await ，所以同步的 Interceptor 無法取得真正的執行時間。<br>為了 Handle async/await 的 Method ，我們可以再加入 <strong>Castle.Core.AsyncInterceptor</strong> 套件，如下，<br><img src="/2019/01/20/2019005/003.png" title="[Castle.Core.AsyncInterceptor]"><br>所以我們就可以建立同步及非同步的 Interceptor 物件，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OpenTracingInterceptor</span> : <span class="title">IInterceptor</span></span><br><span class="line">&#123;</span><br><span class="line">    IAsyncInterceptor _asyncInterceptor;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OpenTracingInterceptor</span>(<span class="params">IAsyncInterceptor asyncInterceptor</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _asyncInterceptor = asyncInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Intercept</span>(<span class="params">IInvocation invocation</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _asyncInterceptor.ToInterceptor().Intercept(invocation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OpenTracingInterceptorAsync</span> : <span class="title">IAsyncInterceptor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InterceptAsynchronous</span>(<span class="params">IInvocation invocation</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        invocation.ReturnValue = InternalInterceptAsynchronous(invocation);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">InternalInterceptAsynchronous</span>(<span class="params">IInvocation invocation</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line">        <span class="keyword">string</span> operationName = invocation.Method.Name;</span><br><span class="line">        <span class="keyword">var</span> spanBuilder = tracer.BuildSpan(operationName);</span><br><span class="line">        <span class="keyword">if</span> (tracer.ActiveSpan != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            spanBuilder.AsChildOf(tracer.ActiveSpan);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> scope = spanBuilder.StartActive(<span class="literal">true</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Step 1. Do something prior to invocation.</span></span><br><span class="line">            invocation.Proceed();</span><br><span class="line">            <span class="keyword">var</span> task = (Task)invocation.ReturnValue;</span><br><span class="line">            <span class="keyword">await</span> task;</span><br><span class="line">            <span class="comment">// Step 2. Do something after invocation.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> InterceptAsynchronous&lt;TResult&gt;(IInvocation invocation)</span><br><span class="line">    &#123;</span><br><span class="line">        invocation.ReturnValue = InternalInterceptAsynchronous&lt;TResult&gt;(invocation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">async</span> Task&lt;TResult&gt; InternalInterceptAsynchronous&lt;TResult&gt;(IInvocation invocation)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line">        <span class="keyword">string</span> operationName = invocation.Method.Name;</span><br><span class="line">        <span class="keyword">var</span> spanBuilder = tracer.BuildSpan(operationName);</span><br><span class="line">        <span class="keyword">if</span> (tracer.ActiveSpan != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            spanBuilder.AsChildOf(tracer.ActiveSpan);</span><br><span class="line">        &#125;</span><br><span class="line">        TResult result;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> scope = spanBuilder.StartActive(<span class="literal">true</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Step 1. Do something prior to invocation.</span></span><br><span class="line">            invocation.Proceed();</span><br><span class="line">            <span class="keyword">var</span> task = (Task&lt;TResult&gt;)invocation.ReturnValue;</span><br><span class="line">            result = <span class="keyword">await</span> task;</span><br><span class="line">            <span class="comment">// Step 2. Do something after invocation.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InterceptSynchronous</span>(<span class="params">IInvocation invocation</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line">        <span class="keyword">string</span> operationName = invocation.Method.Name;</span><br><span class="line">        <span class="keyword">var</span> spanBuilder = tracer.BuildSpan(operationName);</span><br><span class="line">        <span class="keyword">if</span> (tracer.ActiveSpan != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            spanBuilder.AsChildOf(tracer.ActiveSpan);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> scope = spanBuilder.StartActive(<span class="literal">true</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Step 1. Do something prior to invocation.</span></span><br><span class="line">            invocation.Proceed();</span><br><span class="line">            <span class="comment">// Step 2. Do something after invocation.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="向-Autofac-註冊-及-要使用的-Interceptor"><a href="#向-Autofac-註冊-及-要使用的-Interceptor" class="headerlink" title="向 Autofac 註冊 及 要使用的 Interceptor"></a>向 Autofac 註冊 及 要使用的 Interceptor</h4><p>再來就是跟 Autofac 註冊及說明類別要用 EnableClassInterceptors() 或是 EnableInterfaceInterceptors()，如果使用 EnableClassInterceptors 的話，該類別的 Method 必需為 virtual methods 哦!</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//autofac codes...</span></span><br><span class="line">builder.RegisterType&lt;OpenTracingInterceptor&gt;();</span><br><span class="line">builder.RegisterType&lt;OpenTracingInterceptorAsync&gt;().As&lt;IAsyncInterceptor&gt;();</span><br><span class="line">builder.RegisterType&lt;RootDialog&gt;()</span><br><span class="line">    .AsSelf()</span><br><span class="line">    .EnableClassInterceptors()</span><br><span class="line">    .InterceptedBy(<span class="keyword">typeof</span>(OpenTracingInterceptor));</span><br><span class="line"></span><br><span class="line">builder</span><br><span class="line">    .RegisterType&lt;ShowMenuActionStrategy&gt;()</span><br><span class="line">    .Named&lt;IActionStrategy&gt;(ActionTypes.ShowMenuAction.ToString())</span><br><span class="line">    .InstancePerLifetimeScope()</span><br><span class="line">    .EnableClassInterceptors()</span><br><span class="line">    .InterceptedBy(<span class="keyword">typeof</span>(OpenTracingInterceptor));</span><br><span class="line"><span class="comment">//autofac codes...</span></span><br></pre></td></tr></table></figure><ul><li>註: InterceptedBy 也可以改用 宣告式的。例如在 Class 加入 [Intercept(typeof(OpenTracingInterceptor))] 設定。</li></ul><h4 id="建立物件"><a href="#建立物件" class="headerlink" title="建立物件"></a>建立物件</h4><p>因為在 Autofac 中設定 EnableClassInterceptors ，所以取得物件時，需要從 Autofac Container 取得，所以在取得 RootDialog 時，原本是直接 new 它，現在要改成如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> Conversation.SendAsync(activity, () =&gt; Conversation.Container.Resolve&lt;Dialogs.RootDialog&gt;());</span><br></pre></td></tr></table></figure><h3 id="運行結果"><a href="#運行結果" class="headerlink" title="運行結果"></a>運行結果</h3><p>有了 AsyncInterceptor 設定之後，透過 Jaeger UI 來查，就可以看到該 Method 真正的花費時間，如下，<br><img src="/2019/01/20/2019005/004.png" title="[加入 AsyncInterceptor 結果]"></p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>透過 Interceptor 的方式，可以讓大部份的 Class 都可以加入 OpenTracing 記錄之中，如果在過程中，發現某個 Span 需要多 Log 資料的話，就可以到該 Span 的 Method 去加入更詳細的資訊。<br>另外，在接收時的 MessagesController 的入口點，我們還是需要手動去加入 Extract 的 Http Header 資料，來讓整個 Path 可以串起來。</p><h3 id="補充說明"><a href="#補充說明" class="headerlink" title="補充說明"></a>補充說明</h3><h4 id="OpenTracing-basics"><a href="#OpenTracing-basics" class="headerlink" title="OpenTracing basics"></a>OpenTracing basics</h4><p>一個 Trace 通常是一個 Request -&gt; Response 的過程(例如，使用者登入-&gt;驗證服務-&gt;取得帳號資訊-&gt;可使用功能 …-&gt;畫面呈現)，所以它會包含一個或多個 Span ，這些 Span 會有著一致的 Tracer Id。<br>一個 Span 代表一個單元的工作，例如 Client call Server，發送一個 Query 到 DB。<br>每個 Span，會有著唯一的 Id，它們之間可能會有著上、下關係(ChildOf)或是 FollowsFrom。<br>如果一個 Span 的 Parent Span 是空的，我們會稱它為 Root Span。<br>Span 通常還會包含 operation name, start 及 end 的時間，也可 Tag 一些資訊及記錄錯誤 、 Log。<br>所以我們可以透過這些資訊來發現效能或是錯誤的地方。</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://github.com/opentracing/specification/blob/master/semantic_conventions.md" target="_blank" rel="noopener">Tag 命名 Semantic Conventions</a><br><a href="https://autofaccn.readthedocs.io/en/latest/advanced/interceptors.html" target="_blank" rel="noopener">Autofac Type Interceptors</a><br><a href="https://github.com/JSkimming/Castle.Core.AsyncInterceptor" target="_blank" rel="noopener">github Castle.Core.AsyncInterceptor</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在 &lt;a href=&quot;https://rainmakerho.github.io/2019/01/15/2019004/&quot;&gt;使用 OpenT
      
    
    </summary>
    
    
      <category term="Autofac" scheme="https://rainmakerho.github.io/tags/Autofac/"/>
    
      <category term="OpenTracing" scheme="https://rainmakerho.github.io/tags/OpenTracing/"/>
    
      <category term="Distributed Tracing" scheme="https://rainmakerho.github.io/tags/Distributed-Tracing/"/>
    
      <category term="Jaeger" scheme="https://rainmakerho.github.io/tags/Jaeger/"/>
    
      <category term="APM" scheme="https://rainmakerho.github.io/tags/APM/"/>
    
      <category term="Dynatrace" scheme="https://rainmakerho.github.io/tags/Dynatrace/"/>
    
      <category term=".NET" scheme="https://rainmakerho.github.io/tags/NET/"/>
    
      <category term="BFv3" scheme="https://rainmakerho.github.io/tags/BFv3/"/>
    
      <category term="Dynamic Proxy" scheme="https://rainmakerho.github.io/tags/Dynamic-Proxy/"/>
    
      <category term="EnableClassInterceptors" scheme="https://rainmakerho.github.io/tags/EnableClassInterceptors/"/>
    
      <category term="EnableInterfaceInterceptors" scheme="https://rainmakerho.github.io/tags/EnableInterfaceInterceptors/"/>
    
      <category term="AsyncInterceptor" scheme="https://rainmakerho.github.io/tags/AsyncInterceptor/"/>
    
  </entry>
  
  <entry>
    <title>使用 OpenTracing - Jaeger (AP整合)</title>
    <link href="https://rainmakerho.github.io/2019/01/15/2019004/"/>
    <id>https://rainmakerho.github.io/2019/01/15/2019004/</id>
    <published>2019-01-15T05:13:41.000Z</published>
    <updated>2019-01-16T05:42:36.301Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在前一篇<a href="https://rainmakerho.github.io/2019/01/04/2019002/">使用 OpenTracing - Jaeger</a>之中，我們介紹如何快速安裝及透過程式將相關的資訊記錄到 Jaeger 系統之中。<br>一個使用者的操作，後端可能會串連很多個服務，如下圖，<br><img src="https://opentracing.io/img/OTHT_2.png" alt="User Request/Response"></p><p>透過 OpenTracing 可以用時間軸的方式來看整個過程每個部份所花費的時間，如下圖，<br><img src="https://opentracing.io/img/OTHT_3.png" alt="User Request/Response Time"></p><p>而從 Bot 的使用來看也是相同的，<br>使用者 -&gt; Bot Connector(Local) -&gt; Bot App(BFv3) -&gt; Bot Connector(Local) -&gt; 使用者<br>所以，接下來，我們要將 Bot Connector(NodeJS) <-> Bot App(BFv3) 串接起來。</-></p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><h4 id="NodeJS-使用"><a href="#NodeJS-使用" class="headerlink" title="NodeJS 使用"></a>NodeJS 使用</h4><p>因為我們的 Bot Connector 是使用 NodeJS，所以先看一下如何在 NodeJS 中使用 Jaeger 。</p><ul><li>安裝 Opentracing, Jaeger Client 套件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install opentracing jaeger-client --save</span><br></pre></td></tr></table></figure><ul><li>建立 Library 來取得共用的 Tracer (tracing.ts)</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jaeger client</span></span><br><span class="line"><span class="keyword">import</span> &#123; initTracer <span class="keyword">as</span> initJaegerTracer &#125; <span class="keyword">from</span> <span class="string">'jaeger-client'</span>;</span><br><span class="line"><span class="comment">// OpenTracing</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> opentracing <span class="keyword">from</span> <span class="string">'opentracing'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initTracer</span>(<span class="params">serviceName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> config = &#123;</span><br><span class="line">    serviceName: serviceName,</span><br><span class="line">    sampler: &#123;</span><br><span class="line">      <span class="keyword">type</span>: <span class="string">'const'</span>,</span><br><span class="line">      param: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    reporter: &#123;</span><br><span class="line">      logSpans: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    logger: &#123;</span><br><span class="line">      info(msg) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'INFO '</span>, msg);</span><br><span class="line">      &#125;,</span><br><span class="line">      error(msg) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ERROR'</span>, msg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> initJaegerTracer(config, options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Tracing &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> _instance: Tracing;</span><br><span class="line">  <span class="keyword">public</span> tracer: opentracing.Tracer;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> serviceName = <span class="string">'BotConnector'</span>;</span><br><span class="line">    <span class="keyword">this</span>.tracer = initTracer(serviceName);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** Get Logger */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> getInstance(): Tracing &#123;</span><br><span class="line">    <span class="keyword">this</span>._instance = <span class="keyword">this</span>._instance || (<span class="keyword">this</span>._instance = <span class="keyword">new</span> <span class="keyword">this</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>NodeJS import Tracer<br>建立好產生 Tracer 的 Module 後，就可以在要使用的地方 import ，然後取得 tracer，如下，</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//OpenTracing</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> opentracing <span class="keyword">from</span> <span class="string">'opentracing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Tracing &#125; <span class="keyword">from</span> <span class="string">'./../opentracing/tracing'</span>;</span><br><span class="line"><span class="keyword">const</span> tracer = Tracing.getInstance().tracer;</span><br></pre></td></tr></table></figure><ul><li><p>NodeJS API 入口 (express)<br>在 NodeJS 中使用大約有 5 個部份，</p><ol><li>是建立 Span<br>這裡需要判斷 Request 中的 Header 是否包含傳過來的 Parent Span (TracerId)，透過 tracer.extract 取得，然後決定是否要設定為它的 Child。</li><li>記錄 Tag<br>我們可以透過 Tag 來 Search 資料，例如 userId=”Rainmaker”</li><li>Log 程式中一些需要記錄的訊息</li><li>記錄錯誤<br>發生錯誤時，將 Tags.ERROR 設定為 true ，在查詢 UI 中就會有所記錄。也建議將錯誤訊息記錄下來。</li><li>呼叫 span.finish method 它才會寫入</li></ol></li></ul><p>所以大約的程式碼如下，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 回覆訊息 (ReplyToActivity) */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> replyToActivity(req: express.Request, res: express.Response) &#123;</span><br><span class="line">    <span class="comment">// 其他的程式碼 ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.建立 Span (檢查是否有 Parent Span)</span></span><br><span class="line">    <span class="keyword">const</span> operationName = <span class="string">'replyToActivity'</span>;</span><br><span class="line">    <span class="comment">// 取得是否有傳進來的 tracer id (parentSpanContext)</span></span><br><span class="line">    <span class="keyword">const</span> parentSpanContext = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, req.headers)</span><br><span class="line">    <span class="keyword">const</span> span = tracer.startSpan(operationName, &#123; childOf: parentSpanContext &#125;);</span><br><span class="line">    <span class="keyword">const</span> ctx = &#123;span&#125;;</span><br><span class="line">    <span class="comment">// 2.記錄一些　Tags</span></span><br><span class="line">    span.setTag(<span class="string">'channelId'</span>,<span class="string">`activity.channelId`</span>);</span><br><span class="line">    span.setTag(<span class="string">'botId'</span>, <span class="string">`botId`</span>);</span><br><span class="line">    span.setTag(<span class="string">'convId'</span>,<span class="string">`convId`</span>);</span><br><span class="line">    span.setTag(<span class="string">'userId'</span>,<span class="string">`activity.recipient.id`</span>);</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">// 將目前的 span 傳給被呼叫的　Ｍｅｔｈｏｄ　</span></span><br><span class="line">        <span class="keyword">await</span> ConversationController.sendActivityToChannel(activity, convId, ctx);</span><br><span class="line">        <span class="comment">// 3.Log 一些相關資料</span></span><br><span class="line">        <span class="comment">// span.log(&#123;</span></span><br><span class="line">        <span class="comment">// botId,</span></span><br><span class="line">        <span class="comment">// activity</span></span><br><span class="line">        <span class="comment">// &#125;);</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">        <span class="comment">// 4.設定為錯誤</span></span><br><span class="line">        span.setTag(opentracing.Tags.ERROR, <span class="literal">true</span>);</span><br><span class="line">        span.log(&#123;<span class="string">'errMsg'</span>:ex&#125;);</span><br><span class="line">        <span class="comment">// 其他要做的事</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">// 5.最後一定要呼叫 span.finish()</span></span><br><span class="line">        span.finish();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他的程式碼 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>被呼叫 Method 的做法<br>在前面 api 入口會建立 span ，並將該 span 放到 ctx 物件之中，並傳進來，所以被呼叫的 Method 需要多一個可選參數來接收父 Span。如果該 Method 要透過 Http Call 外部的 api ，則需要將目前 span 的資料放到 Http Header 之中(透過 tracer.inject 取得 header 資料)，如下，</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 將訊息送給各個Channel */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">async</span> sendActivityToChannel(activity: IActivity, convId: <span class="built_in">string</span>, ctx?:<span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="comment">// 其他的程式碼 ...</span></span><br><span class="line">    <span class="comment">// 1.建立 Span (檢查是否有 Parent Span)</span></span><br><span class="line">    <span class="keyword">const</span> operationName = <span class="string">'sendActivityToChannel'</span>;</span><br><span class="line">    <span class="comment">// 取得是否有傳進來的 tracer id (parentSpanContext)</span></span><br><span class="line">    <span class="keyword">let</span> parentSpanContext = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(ctx &amp;&amp; ctx.span)&#123;</span><br><span class="line">        parentSpanContext = ctx.span;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> span = tracer.startSpan(operationName, &#123; childOf: parentSpanContext &#125;);</span><br><span class="line">    <span class="comment">// 要傳給 call 的 ｍｅｔｈｏｄ</span></span><br><span class="line">    ctx = &#123;span&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果要 call http 的話，要給目前的 tracer id</span></span><br><span class="line">    <span class="comment">// Send span context via request headers (parent id etc.)</span></span><br><span class="line">    <span class="keyword">const</span> headers = &#123;&#125;;</span><br><span class="line">    tracer.inject(span, opentracing.FORMAT_HTTP_HEADERS, headers);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">// 2.記錄一些　Tags</span></span><br><span class="line">        span.setTag(<span class="string">'channelId'</span>,<span class="string">`activity.channelId`</span>);</span><br><span class="line">        span.setTag(<span class="string">'botId'</span>, <span class="string">`botId`</span>);</span><br><span class="line">        span.setTag(<span class="string">'convId'</span>,<span class="string">`convId`</span>);</span><br><span class="line">        span.setTag(<span class="string">'userId'</span>,<span class="string">`activity.recipient.id`</span>);</span><br><span class="line">        <span class="comment">// call http api ...</span></span><br><span class="line">        <span class="comment">// 3.Log 一些相關資料</span></span><br><span class="line">        <span class="comment">// span.log(&#123;</span></span><br><span class="line">        <span class="comment">// botId,</span></span><br><span class="line">        <span class="comment">// activity</span></span><br><span class="line">        <span class="comment">// &#125;);</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">        <span class="comment">// 4.設定為錯誤</span></span><br><span class="line">        span.setTag(opentracing.Tags.ERROR, <span class="literal">true</span>);</span><br><span class="line">        span.log(&#123;<span class="string">'errMsg'</span>:ex&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">// 5.最後一定要呼叫 span.finish()</span></span><br><span class="line">        span.finish();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他的程式碼 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="net-framework-以-BFv3-訂便當-Bot-為範例"><a href="#net-framework-以-BFv3-訂便當-Bot-為範例" class="headerlink" title=".net framework (以 BFv3 訂便當 Bot 為範例)"></a>.net framework (以 BFv3 訂便當 Bot 為範例)</h4><p>.net 使用方式在 <a href="https://rainmakerho.github.io/2019/01/04/2019002/">使用 OpenTracing - Jaeger</a>之中已有說明。<br>接下來要在 MessagesController 中接收 Bot Connector 傳進來的 Parent Span 資料(一樣是 tracer.Extract)，程式碼如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task&lt;Activity&gt; <span class="title">HandleMessage</span>(<span class="params">Activity activity</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line">    <span class="comment">// 1. 建立 span</span></span><br><span class="line">    <span class="keyword">var</span> headers = Request.Headers.ToDictionary(k =&gt; k.Key, v =&gt; v.Value.First());</span><br><span class="line">    ISpanBuilder spanBuilder;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">string</span> operationName = <span class="string">"MessageController-HandleMessage"</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        ISpanContext parentSpanCtx = tracer.Extract(BuiltinFormats.HttpHeaders, <span class="keyword">new</span> TextMapExtractAdapter(headers));</span><br><span class="line">        spanBuilder = tracer.BuildSpan(operationName);</span><br><span class="line">        <span class="keyword">if</span> (parentSpanCtx != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            spanBuilder = spanBuilder.AsChildOf(parentSpanCtx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception)</span><br><span class="line">    &#123;</span><br><span class="line">        spanBuilder = tracer.BuildSpan(operationName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> scope = spanBuilder.StartActive(<span class="literal">true</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 其他的程式碼 ...</span></span><br><span class="line">            <span class="keyword">await</span> Conversation.SendAsync(activity, () =&gt; <span class="keyword">new</span> Dialogs.RootDialog());</span><br><span class="line">            <span class="comment">// 2.記錄一些　Tags</span></span><br><span class="line">            scope.Span.SetTag(<span class="string">"channelId"</span>, activity.ChannelId);</span><br><span class="line">            scope.Span.SetTag(<span class="string">"botId"</span>, activity.Recipient.Id);</span><br><span class="line">            scope.Span.SetTag(<span class="string">"userId"</span>, activity.From.Id);</span><br><span class="line">            <span class="comment">// 3.Log 一些相關資料</span></span><br><span class="line">            scope.Span.Log(<span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                [<span class="meta"><span class="meta-string">"botId"</span></span>] = activity.From.Id,</span><br><span class="line">                [<span class="meta"><span class="meta-string">"activity"</span></span>] = JsonConvert.SerializeObject(activity)</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 4.設定為錯誤</span></span><br><span class="line">            Tags.Error.Set(scope.Span, <span class="literal">true</span>);</span><br><span class="line">            scope.Span.Log(<span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                [<span class="meta"><span class="meta-string">"errMsg"</span></span>] = ex.ToString()</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> activity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>註</strong> 在 c#中是因為我們用 using 去包，所以就不需要特別地寫 span.finish 。</p><ul><li>被呼叫的 Method ，只要判斷 tracer.ActiveSpan != null ，就設定 tracer.ActiveSpan 為 Parent Span，如下，</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">string</span> operationName = <span class="string">"RootDialog-MessageReceivedAsync"</span>;</span><br><span class="line"><span class="keyword">var</span> spanBuilder = tracer.BuildSpan(operationName);</span><br><span class="line"><span class="keyword">if</span> (tracer.ActiveSpan != <span class="literal">null</span>)</span><br><span class="line">    spanBuilder.AsChildOf(tracer.ActiveSpan);</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> scope = spanBuilder.StartActive(<span class="literal">true</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 其他的程式碼 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>透過 HttpClient 呼叫外部 api 時，一樣將 tracer.ActiveSpan 放入 Header 傳過去即可，如下，</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//add opentracing</span></span><br><span class="line"><span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line"><span class="keyword">var</span> dictionary = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;();</span><br><span class="line"><span class="keyword">var</span> span = tracer.ActiveSpan;</span><br><span class="line"><span class="keyword">if</span> (span != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    tracer.Inject(span.Context, BuiltinFormats.HttpHeaders, <span class="keyword">new</span> TextMapInjectAdapter(dictionary));</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> entry <span class="keyword">in</span> dictionary)</span><br><span class="line">        HttpClient.DefaultRequestHeaders.Add(entry.Key, entry.Value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="運行結果"><a href="#運行結果" class="headerlink" title="運行結果"></a>運行結果</h3><h4 id="透過-WebChat-來測試訂便當-Bot，"><a href="#透過-WebChat-來測試訂便當-Bot，" class="headerlink" title="透過 WebChat 來測試訂便當 Bot，"></a>透過 WebChat 來測試訂便當 Bot，</h4><p>我們在 訂便當 Bot 中輸入代號，產生訂便當的 Menu，它的過程為，<br>WebChat -&gt; Bot Connector -&gt; 訂便當 Bot -&gt; Bot Connector -&gt; WebChat<br><img src="/2019/01/15/2019004/001.png" title="[WebChat]"></p><h4 id="net-debug"><a href="#net-debug" class="headerlink" title=".net debug"></a>.net debug</h4><p>在 MessageController 中，可以看到從 Header 中多了一個 uber-tracer-id header，如下，<br><img src="/2019/01/15/2019004/002.png" title="[C# Debug]"></p><h4 id="Jaeger-UI-查詢"><a href="#Jaeger-UI-查詢" class="headerlink" title="Jaeger UI 查詢"></a>Jaeger UI 查詢</h4><ul><li><p>Search by Tag<br>我的使用者為 Rainmaker ，所以我們可以在 Jaeger UI 中的 Tag ，輸入 userId=”Rainmaker” 就可以查出我的資訊，</p><img src="/2019/01/15/2019004/003.png" title="[Search By Tag]"></li><li><p>查看這個 Trace 資料<br>點進去查看那個 Trace ，就可以發現，整個 Path 都串接起來了哦，如下，</p><img src="/2019/01/15/2019004/004.png" title="[Tracer Detail]"><p>然後再展開那個花費 3.79 秒，我們 Log 它的 actionType 是 ShowMenuAction，如下，</p><img src="/2019/01/15/2019004/005.png" title="[Span Log Info]"></li></ul><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>從上面的 Demo 之中，在不同語言實作的系統中，可以將程式呼叫的過程透過 OpenTracing 一致的 API ，將它送到 Jaeger 之中。<br>所以我們可以從 Jaeger UI 來查詢到系統效能的瓶頸在那裡。<br>一開始建議先將在 api 入口，去記錄較大的 span 。當發現某個 span 不夠詳細時，再到該 span 去加入 child 的 span 。<br>列如在上面的 ActionStrategyResolver-DoActionAsync Span 需要再有詳細的資料，我們可以在那個 span 中再加入 child span。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://yq.aliyun.com/articles/514488" target="_blank" rel="noopener">开放分布式追踪（OpenTracing）入门与 Jaeger 实现</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在前一篇&lt;a href=&quot;https://rainmakerho.github.io/2019/01/04/2019002/&quot;&gt;使用 Ope
      
    
    </summary>
    
    
      <category term="BFv4" scheme="https://rainmakerho.github.io/tags/BFv4/"/>
    
      <category term="OpenTracing" scheme="https://rainmakerho.github.io/tags/OpenTracing/"/>
    
      <category term="Distributed Tracing" scheme="https://rainmakerho.github.io/tags/Distributed-Tracing/"/>
    
      <category term="Jaeger" scheme="https://rainmakerho.github.io/tags/Jaeger/"/>
    
      <category term="APM" scheme="https://rainmakerho.github.io/tags/APM/"/>
    
      <category term="Dynatrace" scheme="https://rainmakerho.github.io/tags/Dynatrace/"/>
    
      <category term=".NET" scheme="https://rainmakerho.github.io/tags/NET/"/>
    
      <category term="BFv3" scheme="https://rainmakerho.github.io/tags/BFv3/"/>
    
      <category term="NodeJS" scheme="https://rainmakerho.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Challenge-base and login redirect-based authentication cannot be used simultaneously.</title>
    <link href="https://rainmakerho.github.io/2019/01/15/2019003/"/>
    <id>https://rainmakerho.github.io/2019/01/15/2019003/</id>
    <published>2019-01-15T03:39:29.000Z</published>
    <updated>2019-01-15T05:12:02.914Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>好久之前發佈了一篇 <a href="https://dotblogs.com.tw/rainmaker/2013/11/29/131973" target="_blank" rel="noopener">[ASP.NET]讓 Web 專案在 IIS7 中可運行 Forms Authentication (表單驗證) 及 Windows 驗證</a>，但文件中的 Source 及 DLL Link 都找不到了。<br>而之前放在 dotblogs 上的檔案也因為轉換平台後，在 dotblogs 的附件也都不見了。</p><h3 id="DLL-下載"><a href="#DLL-下載" class="headerlink" title="DLL 下載"></a>DLL 下載</h3><p>最近從專案中找到那個 DLL，有需要的朋友，可以從以來下載 Mvolo.FormsAuthenticationModule.dll 哦!<br><a href="Mvolo.FormsAuthenticationModule.dll.7z">Mvolo.FormsAuthenticationModule.dll.7z</a><br>希望對大家有幫助 :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;好久之前發佈了一篇 &lt;a href=&quot;https://dotblogs.com.tw/rainmaker/2013/11/29/131973
      
    
    </summary>
    
    
      <category term="IIS" scheme="https://rainmakerho.github.io/tags/IIS/"/>
    
      <category term="Forms Authentication" scheme="https://rainmakerho.github.io/tags/Forms-Authentication/"/>
    
      <category term="Windows Authentication" scheme="https://rainmakerho.github.io/tags/Windows-Authentication/"/>
    
      <category term="Mvolo.FormsAuthenticationModule.dll" scheme="https://rainmakerho.github.io/tags/Mvolo-FormsAuthenticationModule-dll/"/>
    
  </entry>
  
  <entry>
    <title>使用 OpenTracing - Jaeger</title>
    <link href="https://rainmakerho.github.io/2019/01/04/2019002/"/>
    <id>https://rainmakerho.github.io/2019/01/04/2019002/</id>
    <published>2019-01-04T06:02:45.000Z</published>
    <updated>2019-01-16T02:43:16.554Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>隨著系統逾來逾大、逾複雜，為了維運方便，可能會將這些拆分成不同的 Service 。<br>但從使用者一個 Request 進來後，從前端、後端各 Service 再到 Database，如果有效能問題時，大家要如何查找問題呢? SQL Profiler, Fiddler, 寫 Log ? 或是使用一些工具來查看效能問題，例如 Dynatrace ?<br>現在大家有另外一個好選擇，就是使用 <a href="https://opentracing.io/" target="_blank" rel="noopener">OpenTracing</a> , 在程式中加入一些 Tracing 的資料(使用 OpenTracing 訂的 api，再看您要使用那一個 Support <a href="https://opentracing.io/" target="_blank" rel="noopener">OpenTracing</a> 的 Tracer 去註冊它。<br>到時候就可以透過時間軸的角度來看到底那裡有效能問題，那裡有錯誤。</p><p>以下筆者將使用 <a href="https://www.jaegertracing.io/" target="_blank" rel="noopener">JAEGER</a> 來 Demo。</p><h3 id="Why-OpenTracing"><a href="#Why-OpenTracing" class="headerlink" title="Why OpenTracing?"></a>Why OpenTracing?</h3><p>因為 <a href="https://opentracing.io/" target="_blank" rel="noopener">OpenTracing</a> 提供一個與平台無關，與廠商無關的 API，所以開發人員只要使用標準的 API，可以很輕易地更換不同的 追踪系統 ，只要它們都有 Support <a href="https://opentracing.io/" target="_blank" rel="noopener">OpenTracing</a> API。</p><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><p>因為<a href="https://www.jaegertracing.io/" target="_blank" rel="noopener">JAEGER</a>是 <a href="https://www.cncf.io/" target="_blank" rel="noopener">Cloud Native Computing Foundation(CNCF)</a>，所以您可以透過 Docker 或是直接執行它的執行檔。</p><h4 id="使用-Docker-執行-Mac"><a href="#使用-Docker-執行-Mac" class="headerlink" title="使用 Docker 執行 (Mac)"></a>使用 Docker 執行 (Mac)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name jaeger \</span><br><span class="line">  -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \</span><br><span class="line">  -p 5775:5775/udp \</span><br><span class="line">  -p 6831:6831/udp \</span><br><span class="line">  -p 6832:6832/udp \</span><br><span class="line">  -p 5778:5778 \</span><br><span class="line">  -p 16686:16686 \</span><br><span class="line">  -p 14268:14268 \</span><br><span class="line">  -p 9411:9411 \</span><br><span class="line">  jaegertracing/all-in-one:1.8</span><br></pre></td></tr></table></figure><p>要停止可以下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop jaeger</span><br></pre></td></tr></table></figure><p>要再啟動，就下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start jaeger</span><br></pre></td></tr></table></figure><img src="/2019/01/04/2019002/001.png" title="[docker start jaeger]"><h4 id="直接執行-Windows"><a href="#直接執行-Windows" class="headerlink" title="直接執行 (Windows)"></a>直接執行 (Windows)</h4><p>將下載的 jaeger-1.8.0-windows-amd64.tar.gz 解壓縮到 jaeger-1.8.0-windows-amd64 目錄，然後在 Command 視窗中執行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jaeger-all-in-one --collector.zipkin.http-port=9411</span><br></pre></td></tr></table></figure><img src="/2019/01/04/2019002/002.png" title="[run jaeger-all-in-one]"><p>然後開啟 Browser 輸入 <a href="http://localhost:16686" target="_blank" rel="noopener">http://localhost:16686</a> 應該就可以看到 Jaeger UI ，如下，<br><img src="/2019/01/04/2019002/003.png" title="[jaeger-UI]"></p><ul><li>註: 其他平台也可以直接這樣執行哦 :)</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="net-core-以-BFv4-為範例"><a href="#net-core-以-BFv4-為範例" class="headerlink" title=".net core (以 BFv4 為範例)"></a>.net core (以 BFv4 為範例)</h4><p>一開始加入 OpenTracing.Contrib.NetCore 及 Jaeger NuGet 套件，如下，<br><img src="/2019/01/04/2019002/004.png" title="[Add OpenTracing.Contrib.NetCore And Jaeger NuGet Packages]"></p><p>然後在 Startup.cs 中的 ConfigureServices 設定使用 OpenTracing ，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加入 OpenTracing</span></span><br><span class="line">services.AddOpenTracing();</span><br><span class="line">services.AddSingleton&lt;ITracer&gt;(serviceProvider =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">string</span> serviceName = <span class="string">"亂馬客BOT"</span>;</span><br><span class="line">    <span class="keyword">var</span> tracer = <span class="keyword">new</span> Tracer.Builder(serviceName)</span><br><span class="line">        .WithSampler(<span class="keyword">new</span> ConstSampler(<span class="literal">true</span>))</span><br><span class="line">        .Build();</span><br><span class="line">    <span class="comment">//註冊 Jaeger tracer</span></span><br><span class="line">    GlobalTracer.Register(tracer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tracer;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>那要如何使用呢? 我們可以在 OnTurnAsync 時，從 GlobalTracer 取出 ITracer 來用。<br>請注意，這裡用的都是 OpenTracing 的 Interface ，所以將來如何要換別的 Tracer 就在 Startup.cs 中給別的 tracer 就可以了。<br>以下的 Code ，如果輸入 rainmaker 的話，就等個 10 秒再回，<br>如果輸入 rm 就會產生 Exception ，可以用 Tags.Error.Set(scope.Span, true) 來設定 error。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bot</span> : <span class="title">IBot</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">OnTurnAsync</span>(<span class="params">ITurnContext turnContext, CancellationToken cancellationToken = <span class="keyword">default</span>(CancellationToken</span>))</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//從 GlobalTracer.Instance 取出 Tracer</span></span><br><span class="line">        <span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line">        <span class="keyword">using</span> (IScope scope = tracer.BuildSpan(<span class="string">$"OnTurnAsync:<span class="subst">&#123;ActivityTypes.Message&#125;</span>"</span>).StartActive(finishSpanOnDispose: <span class="literal">true</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (turnContext.Activity.Type == ActivityTypes.Message)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> userInput = turnContext.Activity.Text;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">using</span> (<span class="keyword">var</span> scopeMessage = tracer.BuildSpan(ActivityTypes.Message).StartActive(finishSpanOnDispose: <span class="literal">true</span>))</span><br><span class="line">                    &#123;</span><br><span class="line">                        ProcessUserInput(userInput);</span><br><span class="line">                        <span class="keyword">await</span> turnContext.SendActivityAsync(<span class="string">$"You said '<span class="subst">&#123;turnContext.Activity.Text&#125;</span>'"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">                &#123;</span><br><span class="line">                    Tags.Error.Set(scope.Span, <span class="literal">true</span>);</span><br><span class="line">                    tracer.ActiveSpan.Log(<span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        [<span class="meta">LogFields.Event</span>] = <span class="string">"error"</span>,</span><br><span class="line">                        [<span class="meta"><span class="meta-string">"value"</span></span>] = userInput,</span><br><span class="line">                        [<span class="meta"><span class="meta-string">"error"</span></span>] = ex.ToString()</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcessUserInput</span>(<span class="params"><span class="keyword">string</span> userInput</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line">        <span class="keyword">var</span> eventName = <span class="string">"ProcessUserInput"</span>;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> scope = tracer.BuildSpan(eventName).StartActive(finishSpanOnDispose: <span class="literal">true</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            tracer.ActiveSpan.Log(<span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                [<span class="meta">LogFields.Event</span>] = eventName,</span><br><span class="line">                [<span class="meta"><span class="meta-string">"value"</span></span>] = userInput</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (userInput == <span class="string">"rainmaker"</span>) Thread.Sleep(<span class="number">10000</span>);</span><br><span class="line">            <span class="keyword">if</span> (userInput == <span class="string">"rm"</span>) <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"rm throw errrors!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這時我們開啟 Emulator 來測試，分別輸入 hello, rainmaker, rm ，如下，<br><img src="/2019/01/04/2019002/007.png" title="[Emulator 測試]"></p><p>執行過後，我們可以透過 <a href="http://localhost:16686" target="_blank" rel="noopener">Jaeger UI http://localhost:16686</a>，可以發現 Service 可以選到 亂馬客 BOT 了(在 Startup.cs 中設定的)，<br><img src="/2019/01/04/2019002/005.png" title="[成功寫資訊到 Jaeger]"></p><p>按下 Find Traces Button 後，可以發現我們寫入的 Trace 資料，<br><img src="/2019/01/04/2019002/006.png" title="[Find Traces]"></p><p>這時我們可以點進花費時間 10 秒的 Trace ，可以發現在 ProcessUserInput 這個 Span 花了 10 秒的時間，如下，<br><img src="/2019/01/04/2019002/008.png" title="[查看那裡花費較多的時間]"></p><p>點進 Error 的內容，可以查到錯誤的相關資訊，如下，<br><img src="/2019/01/04/2019002/009.png" title="[log error]"></p><h4 id="net-framework-以-BFv3-訂便當-Bot-為範例"><a href="#net-framework-以-BFv3-訂便當-Bot-為範例" class="headerlink" title=".net framework (以 BFv3 訂便當 Bot 為範例)"></a>.net framework (以 BFv3 訂便當 Bot 為範例)</h4><ul><li><p>建置 .net framework 的 Jaeger Client</p><p>請到 <a href="https://github.com/jaegertracing/jaeger-client-csharp" target="_blank" rel="noopener">jaeger-client-csharp</a> 下載，並使用 VS.NET 2017 (因為它是 .net standard 2.0 專案)開啟來建置，建置完成後，就會在 src\Jaeger\bin\Debug\netstandard2.0 目錄中產生 Jaeger Client 的 DLL。</p></li><li><p>專案中使用 (必需升到 .net 4.6.1 (含)以上版本)</p><p>請先將專案升到 .net 4.6.1 (含)以上版本，並從 NuGet 套件中加入 OpenTracing, NETStandard.Library, Microsoft.Extensions.Logging.Abstractions(請跟 Jaeger Client 專案引用的版本相同，目前是 2.0.2)，如下圖，<br><img src="/2019/01/04/2019002/010.png" title="[OpenTracing]"> <br></p><p><img src="/2019/01/04/2019002/011.png" title="[NETStandard.Library]"> <br></p><p><img src="/2019/01/04/2019002/012.png" title="[Microsoft.Extensions.Logging.Abstractions]"> <br></p></li></ul><p>加入 Jaeger Client 專案 src\Jaeger\bin\Debug\netstandard2.0 目錄中的 Jaeger.dll。</p><ul><li><p>專案中使用 OpenTracing</p><p>在 Global.asax.cs 的 Application_Start 透過 Autofac 去設定使用的</p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Update Coversation Container</span></span><br><span class="line">    Conversation.UpdateContainer(builder =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// other ... BFv3 設定 Autofac ...</span></span><br><span class="line">        <span class="comment">// using Opentracing</span></span><br><span class="line">        <span class="keyword">var</span> tracer = <span class="keyword">new</span> Tracer.Builder(<span class="string">"亂馬客BOTBFv3"</span>)</span><br><span class="line">.WithSampler(<span class="keyword">new</span> ConstSampler(<span class="literal">true</span>))</span><br><span class="line">.Build();</span><br><span class="line">        GlobalTracer.Register(tracer);</span><br><span class="line">        <span class="comment">// using Opentracing</span></span><br><span class="line">        <span class="comment">// other ... BFv3 設定 Autofac ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">    GlobalConfiguration.Configure(WebApiConfig.Register);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 RootDialog 的 MessageReceivedAsync Method 中可以加入 Span ，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">MessageReceivedAsync</span>(<span class="params">IDialogContext context, IAwaitable&lt;IMessageActivity&gt; result</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="keyword">await</span> result;</span><br><span class="line">    <span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> tscope = tracer.BuildSpan(<span class="string">"RootDialog"</span>).StartActive(finishSpanOnDispose: <span class="literal">true</span>))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// bot 原本的 code ...</span></span><br><span class="line">        <span class="comment">// Log 一些資訊</span></span><br><span class="line">        tracer.ActiveSpan.Log(<span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="meta">LogFields.Event</span>] = <span class="string">"MessageReceivedAsync"</span>,</span><br><span class="line">            [<span class="meta"><span class="meta-string">"actionValue"</span></span>] = message.Value?.ToString(),</span><br><span class="line">            [<span class="meta"><span class="meta-string">"messageText"</span></span>] = message.Text</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// bot 原本的 code ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他 Method 使用上也是一樣，都是從 GlobalTracer.Instance 取出 tracer，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">static</span> Task <span class="title">DoActionAsync</span>(<span class="params">BotAction botAction, IDialogContext context</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line">    <span class="keyword">var</span> eventName = <span class="string">"DoActionAsync"</span>;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> childScope = tracer.BuildSpan(eventName).StartActive(finishSpanOnDispose: <span class="literal">true</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// bot 原本的 code ...</span></span><br><span class="line">        <span class="comment">// Log 一些資訊</span></span><br><span class="line">        tracer.ActiveSpan.Log(<span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="meta">LogFields.Event</span>] = eventName,</span><br><span class="line">            [<span class="meta"><span class="meta-string">"actionType"</span></span>] = botAction.ActionType.ToString()</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// bot 原本的 code ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Emulator 執行畫面為，<br><img src="/2019/01/04/2019002/013.png" title="[訂便當 Bot]"></p><p>執行過後，我們可以透過 <a href="http://localhost:16686" target="_blank" rel="noopener">Jaeger UI http://localhost:16686</a>，可以發現 Service 可以選到 亂馬客 BOTBFv3 了(在 Application_Start 中設定的)，<br><img src="/2019/01/04/2019002/013.png" title="[成功寫資訊到 Jaeger BFv3]"></p><p>點進去可以發現各 Span 寫的 Log 及執行所花費的時間，如下，<br><img src="/2019/01/04/2019002/014.png" title="[MessageReceivedAsync Span BFv3]"> <br><br><img src="/2019/01/04/2019002/015.png" title="[DoActionAsync Span BFv3]"></p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>只要加入 <a href="https://opentracing.io/" target="_blank" rel="noopener">OPENTRACING</a>，再加入要使用的 Tracer Client 套件，就可以快速來記錄資訊，真的很簡單也很方便。當系統很多時，您就不需要苦苦地查找許多的 Log 檔。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://opentracing.io/" target="_blank" rel="noopener">OPENTRACING</a><br><a href="https://www.jaegertracing.io/" target="_blank" rel="noopener">JAEGER</a><br><a href="https://github.com/yurishkuro/opentracing-tutorial" target="_blank" rel="noopener">opentracing-tutorial</a><br><a href="https://github.com/jaegertracing/jaeger-client-csharp/tree/master/examples" target="_blank" rel="noopener">jaeger-client-csharp/examples/(含.net core 和 .net framework)</a><br><a href="https://opentracing.io/guides/csharp/" target="_blank" rel="noopener">OpenTracing C#</a><br><a href="https://github.com/dotnet/standard/blob/master/docs/versions.md" target="_blank" rel="noopener">dotnet/standard</a></p><ul><li>研究過程中，非常感謝同事 Marty 的討論與幫助。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;隨著系統逾來逾大、逾複雜，為了維運方便，可能會將這些拆分成不同的 Service 。&lt;br&gt;但從使用者一個 Request 進來後，從前端、
      
    
    </summary>
    
    
      <category term="BFv4" scheme="https://rainmakerho.github.io/tags/BFv4/"/>
    
      <category term="OpenTracing" scheme="https://rainmakerho.github.io/tags/OpenTracing/"/>
    
      <category term="Distributed Tracing" scheme="https://rainmakerho.github.io/tags/Distributed-Tracing/"/>
    
      <category term="Jaeger" scheme="https://rainmakerho.github.io/tags/Jaeger/"/>
    
      <category term="APM" scheme="https://rainmakerho.github.io/tags/APM/"/>
    
      <category term="Dynatrace" scheme="https://rainmakerho.github.io/tags/Dynatrace/"/>
    
      <category term=".NET" scheme="https://rainmakerho.github.io/tags/NET/"/>
    
      <category term="BFv3" scheme="https://rainmakerho.github.io/tags/BFv3/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Botframework V4，從 Bot 送訊息到 IM Channel 時，加入額外的 Header 資訊</title>
    <link href="https://rainmakerho.github.io/2019/01/02/2019001/"/>
    <id>https://rainmakerho.github.io/2019/01/02/2019001/</id>
    <published>2019-01-02T05:05:53.000Z</published>
    <updated>2019-01-03T04:10:10.920Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Microsoft Botframework V4，簡稱 BFv4 已經 Release 了哦! 是使用 .net core 來開發，所以用 Mac 也可以開發哦!<br>在<a href="https://rainmakerho.github.io/2018/07/05/2018023/">從 Bot 送訊息到 IM Channel 時，加入額外的 Header 資訊</a>中，我們是透過 DI 去將 ConnectorClient 置換成我們的 MyConnectorClient ，然後在 MyConnectorClient 去新增 HttpClient 的 Header。<br>在 BFv4 中，我們要如何達到這樣子的需求呢?</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>以下是 Microsoft 文件中說明 Bot 的運作過程，<br><img src="https://docs.microsoft.com/en-us/azure/bot-service/v4sdk/media/bot-builder-activity.png?view=azure-bot-service-4.0" alt="exchanged when we run a simple echo bot"><br>所以我們可以透過 Middleware 來達到我們的需求，在 Middleware 中取出 ConnectorClient 然後再加入 Header 就可以了，如下，</p><h4 id="增加-Middleware"><a href="#增加-Middleware" class="headerlink" title="增加 Middleware"></a>增加 Middleware</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GssAdapterMiddleware</span> : <span class="title">IMiddleware</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">OnTurnAsync</span>(<span class="params">ITurnContext turnContext, NextDelegate next, CancellationToken cancellationToken = <span class="keyword">default</span>(CancellationToken</span>))</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> connectorClient = turnContext.TurnState[<span class="string">"Microsoft.Bot.Connector.IConnectorClient"</span>] <span class="keyword">as</span> ConnectorClient;</span><br><span class="line"><span class="comment">//add custom header</span></span><br><span class="line">AddGssAuthenticationHeaders(connectorClient);</span><br><span class="line"><span class="keyword">await</span> next.Invoke(cancellationToken);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddGssAuthenticationHeaders</span>(<span class="params">ConnectorClient connectorClient</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (connectorClient == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">var</span> authKey = <span class="string">"X-RM"</span>;</span><br><span class="line">        <span class="comment">//add if not exists</span></span><br><span class="line"><span class="keyword">if</span> (!connectorClient.HttpClient.DefaultRequestHeaders.Contains(authKey))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> accessToken = <span class="string">"rainmaker_ho"</span>;</span><br><span class="line">connectorClient.HttpClient.DefaultRequestHeaders.TryAddWithoutValidation(authKey, accessToken);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="設定-Middleware-Startup-cs"><a href="#設定-Middleware-Startup-cs" class="headerlink" title="設定 Middleware (Startup.cs)"></a>設定 Middleware (Startup.cs)</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">services.AddBot&lt;EmptyBotBot&gt;(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//... other code</span></span><br><span class="line"><span class="comment">//add middleware</span></span><br><span class="line">options.Middleware.Add(<span class="keyword">new</span> GssAdapterMiddleware());</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>所以回覆的內容中，都會多了一個 Header 哦! 如下，<br><img src="/2019/01/02/2019001/001.png" title="[X-RM Header]"></p><h3 id="BFv4-新東東"><a href="#BFv4-新東東" class="headerlink" title="BFv4 新東東"></a>BFv4 新東東</h3><h4 id="bot-adapter"><a href="#bot-adapter" class="headerlink" title="bot adapter"></a><a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-concept-activity-processing?view=azure-bot-service-4.0#the-bot-adapter" target="_blank" rel="noopener">bot adapter</a></h4><p>封裝 authentication 的處理，從 Bot Connector Service 收到 activities 後，建立 <a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-concept-activity-processing?view=azure-bot-service-4.0#turn-context" target="_blank" rel="noopener">TrunContext</a> 傳給 Bot ，並負責將 Bot 要傳送結果回去給 User Channels 。</p><h4 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a><a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-concept-middleware?view=azure-bot-service-4.0" target="_blank" rel="noopener">Middleware</a></h4><p>介於 <a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-concept-activity-processing?view=azure-bot-service-4.0#the-bot-adapter" target="_blank" rel="noopener">bot adapter</a> 與 Bot 之間。這與 asp.net core 的 Middleware 作用類似，只是它的作用域是在 bot 之中哦!</p><h4 id="Turn"><a href="#Turn" class="headerlink" title="Turn"></a>Turn</h4><p>從 bot 接到 activity (例如收到使用者的一個輸入內容) ， 進行處理並回覆使用者。<br>在 Trun 中的 <a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-concept-activity-processing?view=azure-bot-service-4.0#turn-context" target="_blank" rel="noopener">TrunContext</a> 包含許多有用的資訊，例如 Conversation, Activity, State 等等。</p><h4 id="Dialogs-and-Conversation-flow"><a href="#Dialogs-and-Conversation-flow" class="headerlink" title="Dialogs and Conversation flow"></a>Dialogs and Conversation flow</h4><ul><li>Dialog: 一個簡單的 trun，例如一個簡單的問與答，無法包含另一個 Dialog 。</li><li>Prompt: 跟 BFv3 差不多，封裝一些常用的問句(text, numbers, dates, confirmation or choices)。</li><li>DalogContainer: Dialog or Prompt 的集合，在 WaterfallStep 中依序的來執行裡面的 Dialog/Prompt，跟 BFv3 的 Dialog 類似。</li><li>WaterfallStep:</li><li>DialogSet: Dialog, Prompt or DialogContainer 的集合。</li></ul><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-basics?view=azure-bot-service-4.0&amp;tabs=cs" target="_blank" rel="noopener">How bots work</a><br><a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-custom-storage?view=azure-bot-service-4.0" target="_blank" rel="noopener">Implement custom storage for your bot</a><br><a href="https://qiita.com/kenakamu/items/25667b7359bc1f38cf15" target="_blank" rel="noopener">Bot Builder v4 でボット開発 : ボットが起動する仕組みを理解する</a><br><a href="https://qiita.com/kenakamu/items/6dc043cfc1f199032883" target="_blank" rel="noopener">Microsoft Bot Framework v4 完全制覇 : 目次</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Microsoft Botframework V4，簡稱 BFv4 已經 Release 了哦! 是使用 .net core 來開發，所以用
      
    
    </summary>
    
    
      <category term="botframework" scheme="https://rainmakerho.github.io/tags/botframework/"/>
    
      <category term="BFv4" scheme="https://rainmakerho.github.io/tags/BFv4/"/>
    
  </entry>
  
  <entry>
    <title>WeChat微信 Bot 開發 - 接口配置信息</title>
    <link href="https://rainmakerho.github.io/2018/12/27/2018044/"/>
    <id>https://rainmakerho.github.io/2018/12/27/2018044/</id>
    <published>2018-12-27T08:37:04.000Z</published>
    <updated>2018-12-28T05:17:22.008Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在測試 WeChat 的 Bot 時，一開始連到的網址都無法登入。<br>舊的網址為 <a href="http://admin.wechat.com/debug/sandbox" target="_blank" rel="noopener">http://admin.wechat.com/debug/sandbox</a> (2018-09-13 就失效了哦)，<br>要註冊的請到新的網站為 <a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</a></p><p>如果有裝 WeChat 的話，按下「登录」會出現條碼，掃下去就可以了。<br>當登入之後，就可以註冊測試帳號。</p><p>當我設定「接口配置信息」中的 URL 及 Token 之後，按下「提交」，總是出現「配置失敗」的訊息。</p><h3 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h3><p>在測試期間，我是使用 <a href="https://ngrok.com/download" target="_blank" rel="noopener">ngrok</a> 來讓 local 可以讓外面連到。<br>而且，我們還可以看到外面 Call 進來的內容(Web Interface)，如下，<br><img src="/2018/12/27/2018044/002.png" title="[ngrok]"></p><img src="/2018/12/27/2018044/003.png" title="[ngrok web interface]"><p>所以可以看到，在「接口配置信息」區段中按下「提交」，會發一個 GET 請求，裡面有 echostr, nonce, signature 及 timestamp 參數值。<br>要讓它成功的話，需要檢查驗證後，回傳 echostr 的內容回去。</p><p>在 node 可以加入 wechat 套件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install wechat</span><br></pre></td></tr></table></figure><p>然後透過它(checkSignature)去檢查，如果沒問題，又有 echostr 參數，就回傳 echostr 的內容回去。<br>設定 express router 的 middleware 程式碼類似如下，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> WeChat <span class="keyword">from</span> <span class="string">'wechat'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> checkSignature(req, res, next) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> isSignatured = WeChat.checkSignature(</span><br><span class="line">        req.query,</span><br><span class="line">        <span class="string">'yourtokenhere'</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (isSignatured) &#123;</span><br><span class="line">            <span class="keyword">if</span> (req.query.echostr) &#123;</span><br><span class="line">                res.send(req.query.echostr);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                next();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(<span class="number">401</span>, <span class="string">'checkSignature fail'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>寫好程式後，再重新執行「接口配置信息」，就可以正常配置了哦!</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432" target="_blank" rel="noopener">WeChat Official Account Platform</a><br><a href="http://doxmate.cool/node-webot/wechat/index.html" target="_blank" rel="noopener">微信公共平台 Node 库</a><br><a href="https://zhuanlan.zhihu.com/p/37149153" target="_blank" rel="noopener">node.js 实现微信公众号</a><br><a href="https://medium.com/@davidyu_44356/build-your-wechat-chatbot-6e439d3c9650" target="_blank" rel="noopener">Build your WeChat chatbot</a><br><a href="http://admin.wechat.com/wiki/index.php?title=Guide_for_Message_API" target="_blank" rel="noopener">Guide for Message API</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近在測試 WeChat 的 Bot 時，一開始連到的網址都無法登入。&lt;br&gt;舊的網址為 &lt;a href=&quot;http://admin.wec
      
    
    </summary>
    
    
      <category term="botframework" scheme="https://rainmakerho.github.io/tags/botframework/"/>
    
      <category term="WeChat" scheme="https://rainmakerho.github.io/tags/WeChat/"/>
    
      <category term="微信" scheme="https://rainmakerho.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="weixin" scheme="https://rainmakerho.github.io/tags/weixin/"/>
    
      <category term="公众平台" scheme="https://rainmakerho.github.io/tags/%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="checkSignature" scheme="https://rainmakerho.github.io/tags/checkSignature/"/>
    
  </entry>
  
  <entry>
    <title>.NET SmtpClient Send Port 465 會發生 The operations timed out.</title>
    <link href="https://rainmakerho.github.io/2018/12/05/2018043/"/>
    <id>https://rainmakerho.github.io/2018/12/05/2018043/</id>
    <published>2018-12-05T08:51:01.000Z</published>
    <updated>2018-12-05T09:23:01.310Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近公司的 Mail Server 要全面走 SSL，所以 Port 改使用 465 。<br>所以程式中寄 Mail 的部份也要調整成啟用 SSL ， Port 改成 465 。<br>但程式一執行下去，就 Hang 一段時間，然後噴「The operations timed out」的錯誤。</p><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><p>上網查了一下，蠻多人遇到這問題的，如果使用 SmtpClient 去送的話，就會 timeout 。<br>建議改成 587 ，我將它改成了 587 之後，果然就順利送出了。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = <span class="string">"yourmailserver"</span>;</span><br><span class="line"><span class="keyword">string</span> to = <span class="string">"s.fer@rm.com.tw"</span>;</span><br><span class="line"><span class="keyword">string</span> <span class="keyword">from</span> = <span class="string">"rm@rm.com.tw"</span>;</span><br><span class="line"><span class="keyword">var</span> message = <span class="keyword">new</span> MailMessage(<span class="keyword">from</span>, to);</span><br><span class="line">message.Subject = <span class="string">"Using the new SMTP client."</span>;</span><br><span class="line">message.Body = <span class="string">@"Using this new feature, you can send an email message from an application very easily."</span>;</span><br><span class="line">SmtpClient client = <span class="keyword">new</span> SmtpClient(server);</span><br><span class="line"><span class="comment">// Credentials are necessary if the server requires the client</span></span><br><span class="line"><span class="comment">// to authenticate before it will send email on the client's behalf.</span></span><br><span class="line">client.Credentials = <span class="keyword">new</span> System.Net.NetworkCredential(<span class="string">"youraccount"</span>, <span class="string">"yourpwd"</span>);</span><br><span class="line"><span class="comment">// client.Port = 465;</span></span><br><span class="line"><span class="comment">// 改成 587, 465 會噴 The operations timed out</span></span><br><span class="line">client.Port = <span class="number">587</span>;</span><br><span class="line">client.EnableSsl = <span class="literal">true</span>;</span><br><span class="line">client.Send(message);</span><br></pre></td></tr></table></figure><p>那為什麼走 465 不行呢?<br>似乎是因為 465 是走 Implicit SSL, 而 System.Net.Mail.SmtpClient 並不 Support 它(請參考:<a href="https://support.microsoft.com/en-ca/help/950260/you-cannot-use-system-net-mail-smtpclient-to-send-an-e-mail-message-wi" target="_blank" rel="noopener">You cannot use System.Net.Mail.SmtpClient to send an e-mail message with Implicit SSL</a>)。<br>但 587 一定需要給帳密，如果在 Domain 內要 Mailrelay 呢?<br>我們可以參考 <a href="https://stackoverflow.com/questions/1011245/how-can-i-send-emails-through-ssl-smtp-with-the-net-framework" target="_blank" rel="noopener">How can I send emails through SSL SMTP with the .NET Framework?</a> , 使用 Andrew Siemer 建議的方式，改用舊版的「System.Web.Mail」來寄送就可以了哦! 如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">System.Web.Mail.MailMessage myMail = <span class="keyword">new</span> System.Web.Mail.MailMessage();</span><br><span class="line">myMail.Fields.Add</span><br><span class="line">    (<span class="string">"http://schemas.microsoft.com/cdo/configuration/smtpserver"</span>,</span><br><span class="line">                  <span class="string">"yourmailserver"</span>);</span><br><span class="line">myMail.Fields.Add</span><br><span class="line">    (<span class="string">"http://schemas.microsoft.com/cdo/configuration/smtpserverport"</span>,</span><br><span class="line">                  <span class="string">"465"</span>);</span><br><span class="line">myMail.Fields.Add</span><br><span class="line">    (<span class="string">"http://schemas.microsoft.com/cdo/configuration/sendusing"</span>,</span><br><span class="line">                  <span class="string">"2"</span>);</span><br><span class="line"><span class="comment">//sendusing: cdoSendUsingPort, value 2, for sending the message using</span></span><br><span class="line"><span class="comment">//the network.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//smtpauthenticate: Specifies the mechanism used when authenticating</span></span><br><span class="line"><span class="comment">//to an SMTP</span></span><br><span class="line"><span class="comment">//service over the network. Possible values are:</span></span><br><span class="line"><span class="comment">//- cdoAnonymous, value 0. Do not authenticate.</span></span><br><span class="line"><span class="comment">//- cdoBasic, value 1. Use basic clear-text authentication.</span></span><br><span class="line"><span class="comment">//When using this option you have to provide the user name and password</span></span><br><span class="line"><span class="comment">//through the sendusername and sendpassword fields.</span></span><br><span class="line"><span class="comment">//- cdoNTLM, value 2. The current process security context is used to</span></span><br><span class="line"><span class="comment">// authenticate with the service.</span></span><br><span class="line">myMail.Fields.Add</span><br><span class="line">(<span class="string">"http://schemas.microsoft.com/cdo/configuration/smtpauthenticate"</span>, <span class="string">"1"</span>);</span><br><span class="line"><span class="comment">//Use 0 for anonymous</span></span><br><span class="line">myMail.Fields.Add</span><br><span class="line">(<span class="string">"http://schemas.microsoft.com/cdo/configuration/sendusername"</span>,</span><br><span class="line">    <span class="string">"username"</span>);</span><br><span class="line">myMail.Fields.Add</span><br><span class="line">(<span class="string">"http://schemas.microsoft.com/cdo/configuration/sendpassword"</span>,</span><br><span class="line">      <span class="string">"userpwd"</span>);</span><br><span class="line">myMail.Fields.Add</span><br><span class="line">(<span class="string">"http://schemas.microsoft.com/cdo/configuration/smtpusessl"</span>,</span><br><span class="line">      <span class="string">"true"</span>);</span><br><span class="line">myMail.From = <span class="string">"rm@rm.com.tw"</span></span><br><span class="line">myMail.To = <span class="string">"s.fer@rm.com.tw"</span>;</span><br><span class="line">myMail.Subject = <span class="string">"test sub"</span>;</span><br><span class="line">myMail.BodyFormat = MailFormat.Html;</span><br><span class="line">myMail.Body = <span class="string">"body"</span>;</span><br><span class="line">System.Web.Mail.SmtpMail.SmtpServer = <span class="string">"yourmailserver:465"</span>;</span><br><span class="line">System.Web.Mail.SmtpMail.Send(myMail);</span><br></pre></td></tr></table></figure><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://support.microsoft.com/en-ca/help/950260/you-cannot-use-system-net-mail-smtpclient-to-send-an-e-mail-message-wi" target="_blank" rel="noopener">You cannot use System.Net.Mail.SmtpClient to send an e-mail message with Implicit SSL</a><br><a href="https://support.microsoft.com/en-us/help/310273/how-to-send-e-mail-programmatically-by-using-system-web-mail-in-visual" target="_blank" rel="noopener">How to send e-mail programmatically by using System.Web.Mail in Visual C# 2005 or in Visual C# .NET</a><br><a href="https://stackoverflow.com/questions/1011245/how-can-i-send-emails-through-ssl-smtp-with-the-net-framework" target="_blank" rel="noopener">How can I send emails through SSL SMTP with the .NET Framework?</a><br><a href="https://www.mailgun.com/blog/which-smtp-port-understanding-ports-25-465-587" target="_blank" rel="noopener">Which SMTP Port Should I Use? Understanding Ports 25, 465, &amp; 587</a><br><a href="http://www.onbirkod.com/2017/10/20/solving-timeout-problem-when-sending-email-via-yandex-c/" target="_blank" rel="noopener">Solving Timeout Problem When Sending Email via Yandex (C#)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近公司的 Mail Server 要全面走 SSL，所以 Port 改使用 465 。&lt;br&gt;所以程式中寄 Mail 的部份也要調整成啟用
      
    
    </summary>
    
    
      <category term="SmtpClient" scheme="https://rainmakerho.github.io/tags/SmtpClient/"/>
    
      <category term="Port" scheme="https://rainmakerho.github.io/tags/Port/"/>
    
      <category term="465" scheme="https://rainmakerho.github.io/tags/465/"/>
    
      <category term="587" scheme="https://rainmakerho.github.io/tags/587/"/>
    
      <category term="timeout" scheme="https://rainmakerho.github.io/tags/timeout/"/>
    
      <category term="The operations timed out" scheme="https://rainmakerho.github.io/tags/The-operations-timed-out/"/>
    
      <category term="hang" scheme="https://rainmakerho.github.io/tags/hang/"/>
    
  </entry>
  
  <entry>
    <title>PDF 最後一頁才顯示頁尾</title>
    <link href="https://rainmakerho.github.io/2018/11/29/2018042/"/>
    <id>https://rainmakerho.github.io/2018/11/29/2018042/</id>
    <published>2018-11-29T06:46:17.000Z</published>
    <updated>2018-12-03T02:52:25.316Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 <a href="https://rainmakerho.github.io/2018/07/13/2018024/">將 datatable 的資料轉出成有浮水印的 PDF 檔 (2)</a> 中，我們已可以將 datatable 的資料轉出有浮水印的 pdf 檔。 但客戶有個需求是， footer 可以在最後一頁才顯示嗎?</p><p>因為我們是透過 Excel 去轉成 PDF ，於是就研究看看 Excel 是否可在最後一頁才顯示，參考 <a href="https://answers.microsoft.com/zh-hant/msoffice/forum/all/excel/96f86bb2-3187-4e54-acb6-6d1d9be81468" target="_blank" rel="noopener">Excel 有多頁列時，只希望列印最後一頁的頁尾，其他分頁都不會印出</a> 似乎不容易 (啓動巨集呢!)</p><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><p>Excel 無法操作，那就看看 PDF 是否可以加工，研究了一下，可以在不同的 Page 中加入 Header 及 Footer 。<br>所以在產生 PDF 後，在最後一頁加入我們要的 Footer 就可以了。<br>程式如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MemoryStream <span class="title">AddFooterAndWatermark</span>(<span class="params">MemoryStream pdfStream, WatermarkArg arg</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> pdfDocument = <span class="keyword">new</span> Aspose.Pdf.Document(pdfStream);</span><br><span class="line"><span class="keyword">var</span> pdfLastPage = pdfDocument.Pages[pdfDocument.Pages.Count];</span><br><span class="line"><span class="keyword">var</span> footer = <span class="keyword">new</span> Aspose.Pdf.HeaderFooter();</span><br><span class="line"><span class="comment">//Instantiate a table object</span></span><br><span class="line">Aspose.Pdf.Table tab1 = <span class="keyword">new</span> Aspose.Pdf.Table();</span><br><span class="line">tab1.HorizontalAlignment = HorizontalAlignment.Center;</span><br><span class="line"><span class="comment">//設定預設的文字格式</span></span><br><span class="line"><span class="keyword">var</span> defaultTextState = <span class="keyword">new</span> TextState(<span class="string">"MingLiU"</span>, <span class="number">8</span>);</span><br><span class="line">footer.Paragraphs.Add(tab1);</span><br><span class="line">tab1.DefaultColumnWidth = <span class="string">"180"</span>;</span><br><span class="line">tab1.DefaultCellTextState = defaultTextState;</span><br><span class="line"><span class="comment">//Create rows in the table and then cells in the rows</span></span><br><span class="line"><span class="keyword">var</span> row1 = tab1.Rows.Add();</span><br><span class="line"><span class="keyword">var</span> cellL = row1.Cells.Add(<span class="string">"信用資訊查詢主管"</span>);</span><br><span class="line"><span class="comment">//cellL.DefaultCellTextState = defaultTextState;</span></span><br><span class="line">cellL.Alignment = HorizontalAlignment.Left;</span><br><span class="line"><span class="keyword">var</span> cellR = row1.Cells.Add(<span class="string">"經辦"</span>);</span><br><span class="line">cellR.Alignment = HorizontalAlignment.Right;</span><br><span class="line">pdfLastPage.Footer = footer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrWhiteSpace(arg.Watermark))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> text = <span class="keyword">new</span> FormattedText(arg.Watermark);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> page <span class="keyword">in</span> pdfDocument.Pages)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (arg.WMStyle)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WatermarkStyle.FitPage:</span><br><span class="line">AddWatermarkFitPage(page, arg);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WatermarkStyle.RepeatHorizontal:</span><br><span class="line">AddWatermarkRepeatHorizontal(page, arg);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newPdfStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">pdfDocument.Save(newPdfStream);</span><br><span class="line"><span class="keyword">return</span> newPdfStream;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以使用時，如果有要 Footer 的話，就改 Call AddFooterAndWatermark 這個 Method。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">btnFooter_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> excelArg = <span class="keyword">new</span> ExportDataTable2ExcelArg</span><br><span class="line">&#123;</span><br><span class="line">dataSource = GetDataSource(),</span><br><span class="line">HeaderCenter = <span class="string">"&amp;24 This is Report Header ..."</span>,</span><br><span class="line">HeaderRight = <span class="string">$"&amp;12 使用者:Rainmaker\r日期:<span class="subst">&#123;DateTime.Now.ToString(<span class="string">"yyyy/MM/dd HH:mm:ss"</span>)&#125;</span>"</span>,</span><br><span class="line">FooterRight = <span class="string">"&amp;10 &amp;P/&amp;N"</span>,</span><br><span class="line">ColumnInfos = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, Tuple&lt;<span class="keyword">string</span>, <span class="keyword">double</span>, Aspose.Cells.Style&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="string">"ProductID"</span>, <span class="keyword">new</span> Tuple&lt;<span class="keyword">string</span>, <span class="keyword">double</span>, Aspose.Cells.Style&gt;(<span class="string">$"產品代號"</span>, <span class="number">-1</span>, <span class="literal">null</span>) &#125;,</span><br><span class="line">&#123;<span class="string">"ProductName"</span>, <span class="keyword">new</span> Tuple&lt;<span class="keyword">string</span>, <span class="keyword">double</span>, Aspose.Cells.Style&gt;(<span class="string">"產品名稱"</span> , <span class="number">-1</span>, <span class="literal">null</span>) &#125;,</span><br><span class="line">&#123;<span class="string">"ProductDesc"</span>, <span class="keyword">new</span> Tuple&lt;<span class="keyword">string</span>, <span class="keyword">double</span>, Aspose.Cells.Style&gt;(<span class="string">"產品描述"</span> , <span class="number">-1</span>, <span class="literal">null</span>) &#125;,</span><br><span class="line">&#123;<span class="string">"Units"</span>, <span class="keyword">new</span> Tuple&lt;<span class="keyword">string</span>, <span class="keyword">double</span>, Aspose.Cells.Style&gt;(<span class="string">"產品 庫存"</span> , <span class="number">-1</span>, <span class="literal">null</span>) &#125;,</span><br><span class="line">&#123;<span class="string">"CreDte"</span>, <span class="keyword">new</span> Tuple&lt;<span class="keyword">string</span>, <span class="keyword">double</span>, Aspose.Cells.Style&gt;(<span class="string">"日期"</span> , <span class="number">10</span>, <span class="keyword">new</span> Aspose.Cells.Style&#123; Number = <span class="number">14</span> &#125;) &#125;</span><br><span class="line">&#125;,</span><br><span class="line">PageOrientation = PageOrientationType.Landscape,</span><br><span class="line">IsTextWrapped = <span class="literal">false</span>,</span><br><span class="line">PageScale = <span class="number">80</span>,</span><br><span class="line">FontName = <span class="string">"標楷體"</span>,</span><br><span class="line">HeaderHorizontalAlignment = TextAlignmentType.Center</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> pdfStream = GenPDFFromDataTable(excelArg);</span><br><span class="line"><span class="keyword">var</span> fileNameWithoutExt = <span class="string">$"<span class="subst">&#123;Guid.NewGuid().ToString(<span class="string">"N"</span>)&#125;</span>"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> watermarkArg = <span class="keyword">new</span> WatermarkArg</span><br><span class="line">&#123;</span><br><span class="line">Watermark = <span class="string">$"* 使用者:亂馬客  *<span class="subst">&#123;Environment.NewLine&#125;</span><span class="subst">&#123;DateTime.Now.ToString(<span class="string">"yyyy/MM/dd HH:mm:ss"</span>)&#125;</span>"</span>,</span><br><span class="line">WMStyle = WatermarkStyle.RepeatHorizontal,</span><br><span class="line">WatermarkHeight = <span class="number">100</span>,</span><br><span class="line">WatermarkWidth = <span class="number">130</span>,</span><br><span class="line">WatermarkHorizontalSpace = <span class="number">50</span>,</span><br><span class="line">WatermarkVerticalSpace = <span class="number">30</span>,</span><br><span class="line">RotateAngle = <span class="number">30</span>,</span><br><span class="line">Opacity = <span class="number">.1</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> waterStream = AddFooterAndWatermark(pdfStream, watermarkArg);</span><br><span class="line">Response.ContentType = <span class="string">"application/pdf"</span>;</span><br><span class="line">Response.AddHeader(<span class="string">"content-disposition"</span>, <span class="string">"attachment; filename="</span> + <span class="string">$"<span class="subst">&#123;fileNameWithoutExt&#125;</span>.pdf"</span>);</span><br><span class="line"><span class="keyword">var</span> fileSize = waterStream.Length;</span><br><span class="line"><span class="keyword">byte</span>[] pdfBuffer = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>)fileSize];</span><br><span class="line">waterStream.Read(pdfBuffer, <span class="number">0</span>, (<span class="keyword">int</span>)fileSize);</span><br><span class="line">waterStream.Close();</span><br><span class="line">Response.BinaryWrite(pdfBuffer);</span><br><span class="line">Response.End();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>產出的結果如下，<br><img src="/2018/11/29/2018042/001.png" title="[footer only on lastpage]"></p><ul><li>註:使用 TextState 時 (<strong>var defaultTextState = new TextState(“MingLiU”, 8);</strong>)，不能直接輸入中文的字型名稱，要到機碼「HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\fonts」去找出對應的名稱哦!<br>例如: MingLiU。不然會出現 FontNotFoundException，如下，<br><strong>‘Aspose.Pdf.Text.FontRepository.FindFont(“新細明體”)’ 擲回 ‘Aspose.Pdf.FontNotFoundException’ 類型的例外狀況</strong></li></ul><p>而且機碼的名稱，目前是<strong>區分大小寫</strong>的哦!</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中文字型名稱 ，或是機碼中的名稱大小寫不對，都會錯誤</span></span><br><span class="line"><span class="keyword">var</span> textStateFromFontCName = <span class="keyword">new</span> TextState(<span class="string">"標楷體"</span>, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">var</span> textStateFromFontEName= <span class="keyword">new</span> TextState(<span class="string">"DFKai-sb"</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 機碼中是 DFKai-SB</span></span><br><span class="line"><span class="keyword">var</span> textStateFromFontEName= <span class="keyword">new</span> TextState(<span class="string">"DFKai-SB"</span>, <span class="number">8</span>);</span><br></pre></td></tr></table></figure><img src="/2018/11/29/2018042/002.png" title="[標楷體DFKai-SB]">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在 &lt;a href=&quot;https://rainmakerho.github.io/2018/07/13/2018024/&quot;&gt;將 datata
      
    
    </summary>
    
    
      <category term="pdf" scheme="https://rainmakerho.github.io/tags/pdf/"/>
    
      <category term="aspose" scheme="https://rainmakerho.github.io/tags/aspose/"/>
    
      <category term="cells" scheme="https://rainmakerho.github.io/tags/cells/"/>
    
      <category term="excel" scheme="https://rainmakerho.github.io/tags/excel/"/>
    
      <category term="footer" scheme="https://rainmakerho.github.io/tags/footer/"/>
    
      <category term="頁尾" scheme="https://rainmakerho.github.io/tags/%E9%A0%81%E5%B0%BE/"/>
    
      <category term="TextState" scheme="https://rainmakerho.github.io/tags/TextState/"/>
    
      <category term="fontlink\systemlink" scheme="https://rainmakerho.github.io/tags/fontlink-systemlink/"/>
    
  </entry>
  
  <entry>
    <title>未更新階段作業 ID</title>
    <link href="https://rainmakerho.github.io/2018/11/27/2018041/"/>
    <id>https://rainmakerho.github.io/2018/11/27/2018041/</id>
    <published>2018-11-27T09:13:49.000Z</published>
    <updated>2018-11-28T02:48:37.776Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近系統讓 AppScan 掃時，會出一個「未更新階段作業 ID」的問題，如下，<br><img src="/2018/11/27/2018041/001.png" title="[未更新階段作業 ID]"></p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>從 report 中來看，「登入後變更階段作業 ID 值」， Cookie ASP.NET_SessionId 登入後就會變了呀!<br>怎麼會要我再變更 Session Id 呢? 而且 Report 的結果， ASP.NET_SessionId 也會變呀!<br>詢問同事 Joe 後才知道，原來它是看系統 <strong>所有的 Cookie</strong> ，在登入後需要變更才行。</p><p>因為它會在 Login 前先將那些 Cookie 給值，然後在 Login 後去檢查原先的那些 Cookie 是否相同，如果相同的話，就會有「未更新階段作業 ID」的問題。</p><p>例如，系統會用到 cookie-a, cookie-b, cookie-c ，在登入前 AppScan 先給它值分別為 1, 2, 3。<br>在登入後， AppScan 再去看 cookie-a, cookie-b, cookie-c 是否有相同的值，如果有的話，就算是有那個問題。</p><p>知道它如何檢查的之後，就可以在 Login 後，將不用的 Cookie 清除，或是去重設那些 Cookie 的值!</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="http://blog.securityps.com/2013/06/session-fixation-forms-authentication.html" target="_blank" rel="noopener">Session Fixation &amp; Forms Authentication Token Termination in ASP.NET</a><br><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21674468" target="_blank" rel="noopener">Common causes for a “Session Identifier not Updated” false positive in AppScan Enterprise</a><br><a href="http://www-01.ibm.com/support/docview.wss?uid=swg1PM12982" target="_blank" rel="noopener">PM12982: Session Identifier Not Updated information display issue</a><br><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21375833" target="_blank" rel="noopener">Information for Session tests and ASP.NET in AppScan Standard</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近系統讓 AppScan 掃時，會出一個「未更新階段作業 ID」的問題，如下，&lt;br&gt;&lt;img src=&quot;/2018/11/27/2018
      
    
    </summary>
    
    
      <category term="AppScan" scheme="https://rainmakerho.github.io/tags/AppScan/"/>
    
      <category term="未更新階段作業 ID" scheme="https://rainmakerho.github.io/tags/%E6%9C%AA%E6%9B%B4%E6%96%B0%E9%9A%8E%E6%AE%B5%E4%BD%9C%E6%A5%AD-ID/"/>
    
      <category term="登入後變更階段作業 ID 值" scheme="https://rainmakerho.github.io/tags/%E7%99%BB%E5%85%A5%E5%BE%8C%E8%AE%8A%E6%9B%B4%E9%9A%8E%E6%AE%B5%E4%BD%9C%E6%A5%AD-ID-%E5%80%BC/"/>
    
  </entry>
  
</feed>
