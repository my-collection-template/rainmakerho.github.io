<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>亂馬客 - back to basics</title>
  <icon>https://www.gravatar.com/avatar/cd3aed042ccd7a5a5d9956b0bc07dc81</icon>
  <subtitle>back to basics</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rainmakerho.github.io/"/>
  <updated>2019-01-16T05:24:03.847Z</updated>
  <id>https://rainmakerho.github.io/</id>
  
  <author>
    <name>亂馬客</name>
    <email>rainmaker_ho@gss.com.tw</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 OpenTracing - Jaeger (AP整合)</title>
    <link href="https://rainmakerho.github.io/2019/01/15/2019004/"/>
    <id>https://rainmakerho.github.io/2019/01/15/2019004/</id>
    <published>2019-01-15T05:13:41.000Z</published>
    <updated>2019-01-16T05:24:03.847Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在前一篇<a href="https://rainmakerho.github.io/2019/01/04/2019002/">使用 OpenTracing - Jaeger</a>之中，我們介紹如何快速安裝及透過程式將相關的資訊記錄到 Jaeger 系統之中。<br>一個使用者的操作，後端可能會串連很多個服務，如下圖，<br><img src="https://opentracing.io/img/OTHT_2.png" alt="User Request/Response"></p><p>透過 OpenTracing 可以用時間軸的方式來看整個過程每個部份所花費的時間，如下圖，<br><img src="https://opentracing.io/img/OTHT_3.png" alt="User Request/Response Time"></p><p>而從 Bot 的使用來看也是相同的，<br>使用者 -&gt; Bot Connector(Local) -&gt; Bot App(BFv3) -&gt; Bot Connector(Local) -&gt; 使用者<br>所以，接下來，我們要將 Bot Connector(NodeJS) <-> Bot App(BFv3) 串接起來。</-></p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><h4 id="NodeJS-使用"><a href="#NodeJS-使用" class="headerlink" title="NodeJS 使用"></a>NodeJS 使用</h4><p>因為我們的 Bot Connector 是使用 NodeJS，所以先看一下如何在 NodeJS 中使用 Jaeger 。</p><ul><li>安裝 Opentracing, Jaeger Client 套件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install opentracing jaeger-client --save</span><br></pre></td></tr></table></figure><ul><li>建立 Library 來取得共用的 Tracer (tracing.ts)</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jaeger client</span></span><br><span class="line"><span class="keyword">import</span> &#123; initTracer <span class="keyword">as</span> initJaegerTracer &#125; <span class="keyword">from</span> <span class="string">'jaeger-client'</span>;</span><br><span class="line"><span class="comment">// OpenTracing</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> opentracing <span class="keyword">from</span> <span class="string">'opentracing'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initTracer</span>(<span class="params">serviceName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> config = &#123;</span><br><span class="line">    serviceName: serviceName,</span><br><span class="line">    sampler: &#123;</span><br><span class="line">      <span class="keyword">type</span>: <span class="string">'const'</span>,</span><br><span class="line">      param: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    reporter: &#123;</span><br><span class="line">      logSpans: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    logger: &#123;</span><br><span class="line">      info(msg) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'INFO '</span>, msg);</span><br><span class="line">      &#125;,</span><br><span class="line">      error(msg) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ERROR'</span>, msg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> initJaegerTracer(config, options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Tracing &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> _instance: Tracing;</span><br><span class="line">  <span class="keyword">public</span> tracer: opentracing.Tracer;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> serviceName = <span class="string">'BotConnector'</span>;</span><br><span class="line">    <span class="keyword">this</span>.tracer = initTracer(serviceName);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** Get Logger */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> getInstance(): Tracing &#123;</span><br><span class="line">    <span class="keyword">this</span>._instance = <span class="keyword">this</span>._instance || (<span class="keyword">this</span>._instance = <span class="keyword">new</span> <span class="keyword">this</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>NodeJS import Tracer<br>建立好產生 Tracer 的 Module 後，就可以在要使用的地方 import ，然後取得 tracer，如下，</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//OpenTracing</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> opentracing <span class="keyword">from</span> <span class="string">'opentracing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Tracing &#125; <span class="keyword">from</span> <span class="string">'./../opentracing/tracing'</span>;</span><br><span class="line"><span class="keyword">const</span> tracer = Tracing.getInstance().tracer;</span><br></pre></td></tr></table></figure><ul><li><p>NodeJS API 入口 (express)<br>在 NodeJS 中使用大約有 5 個部份，</p><ol><li>是建立 Span<br>這裡需要判斷 Request 中的 Header 是否包含傳過來的 Parent Span (TracerId)，透過 tracer.extract 取得，然後決定是否要設定為它的 Child。</li><li>記錄 Tag<br>我們可以透過 Tag 來 Search 資料，例如 userId=”Rainmaker”</li><li>Log 程式中一些需要記錄的訊息</li><li>記錄錯誤<br>發生錯誤時，將 Tags.ERROR 設定為 true ，在查詢 UI 中就會有所記錄。也建議將錯誤訊息記錄下來。</li><li>呼叫 span.finish method 它才會寫入</li></ol></li></ul><p>所以大約的程式碼如下，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 回覆訊息 (ReplyToActivity) */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> replyToActivity(req: express.Request, res: express.Response) &#123;</span><br><span class="line">    <span class="comment">// 其他的程式碼 ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.建立 Span (檢查是否有 Parent Span)</span></span><br><span class="line"><span class="keyword">const</span> operationName = <span class="string">'replyToActivity'</span>;</span><br><span class="line"><span class="comment">// 取得是否有傳進來的 tracer id (parentSpanContext)</span></span><br><span class="line"><span class="keyword">const</span> parentSpanContext = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, req.headers)</span><br><span class="line"><span class="keyword">const</span> span = tracer.startSpan(operationName, &#123; childOf: parentSpanContext &#125;);</span><br><span class="line"><span class="keyword">const</span> ctx = &#123;span&#125;;</span><br><span class="line"><span class="comment">// 2.記錄一些　Tags</span></span><br><span class="line">span.setTag(<span class="string">'channelId'</span>,<span class="string">`activity.channelId`</span>);</span><br><span class="line">span.setTag(<span class="string">'botId'</span>, <span class="string">`botId`</span>);</span><br><span class="line">span.setTag(<span class="string">'convId'</span>,<span class="string">`convId`</span>);</span><br><span class="line">span.setTag(<span class="string">'userId'</span>,<span class="string">`activity.recipient.id`</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">// 將目前的 span 傳給被呼叫的　Ｍｅｔｈｏｄ　</span></span><br><span class="line"><span class="keyword">await</span> ConversationController.sendActivityToChannel(activity, convId, ctx);</span><br><span class="line"><span class="comment">// 3.Log 一些相關資料</span></span><br><span class="line"><span class="comment">// span.log(&#123;</span></span><br><span class="line"><span class="comment">// botId,</span></span><br><span class="line"><span class="comment">// activity</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line"><span class="comment">// 4.設定為錯誤</span></span><br><span class="line">span.setTag(opentracing.Tags.ERROR, <span class="literal">true</span>);</span><br><span class="line">span.log(&#123;<span class="string">'errMsg'</span>:ex&#125;);</span><br><span class="line"><span class="comment">// 其他要做的事</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">// 5.最後一定要呼叫 span.finish()</span></span><br><span class="line">span.finish();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其他的程式碼 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>被呼叫 Method 的做法<br>在前面 api 入口會建立 span ，並將該 span 放到 ctx 物件之中，並傳進來，所以被呼叫的 Method 需要多一個可選參數來接收父 Span。如果該 Method 要透過 Http Call 外部的 api ，則需要將目前 span 的資料放到 Http Header 之中(透過 tracer.inject 取得 header 資料)，如下，</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 將訊息送給各個Channel */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">async</span> sendActivityToChannel(activity: IActivity, convId: <span class="built_in">string</span>, ctx?:<span class="built_in">any</span>) &#123;</span><br><span class="line"><span class="comment">// 其他的程式碼 ...</span></span><br><span class="line"><span class="comment">// 1.建立 Span (檢查是否有 Parent Span)</span></span><br><span class="line"><span class="keyword">const</span> operationName = <span class="string">'sendActivityToChannel'</span>;</span><br><span class="line"><span class="comment">// 取得是否有傳進來的 tracer id (parentSpanContext)</span></span><br><span class="line"><span class="keyword">let</span> parentSpanContext = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(ctx &amp;&amp; ctx.span)&#123;</span><br><span class="line">parentSpanContext = ctx.span;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> span = tracer.startSpan(operationName, &#123; childOf: parentSpanContext &#125;);</span><br><span class="line"><span class="comment">// 要傳給 call 的 ｍｅｔｈｏｄ</span></span><br><span class="line">ctx = &#123;span&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要 call http 的話，要給目前的 tracer id</span></span><br><span class="line"><span class="comment">// Send span context via request headers (parent id etc.)</span></span><br><span class="line"><span class="keyword">const</span> headers = &#123;&#125;;</span><br><span class="line">tracer.inject(span, opentracing.FORMAT_HTTP_HEADERS, headers);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">// 2.記錄一些　Tags</span></span><br><span class="line">        span.setTag(<span class="string">'channelId'</span>,<span class="string">`activity.channelId`</span>);</span><br><span class="line">        span.setTag(<span class="string">'botId'</span>, <span class="string">`botId`</span>);</span><br><span class="line">        span.setTag(<span class="string">'convId'</span>,<span class="string">`convId`</span>);</span><br><span class="line">        span.setTag(<span class="string">'userId'</span>,<span class="string">`activity.recipient.id`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// call http api ...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.Log 一些相關資料</span></span><br><span class="line"><span class="comment">// span.log(&#123;</span></span><br><span class="line"><span class="comment">// botId,</span></span><br><span class="line"><span class="comment">// activity</span></span><br><span class="line">        <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">        <span class="comment">// 4.設定為錯誤</span></span><br><span class="line">span.setTag(opentracing.Tags.ERROR, <span class="literal">true</span>);</span><br><span class="line">span.log(&#123;<span class="string">'errMsg'</span>:ex&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">// 5.最後一定要呼叫 span.finish()</span></span><br><span class="line">span.finish();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他的程式碼 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="net-framework-以-BFv3-訂便當-Bot-為範例"><a href="#net-framework-以-BFv3-訂便當-Bot-為範例" class="headerlink" title=".net framework (以 BFv3 訂便當 Bot 為範例)"></a>.net framework (以 BFv3 訂便當 Bot 為範例)</h4><p>.net 使用方式在 <a href="https://rainmakerho.github.io/2019/01/04/2019002/">使用 OpenTracing - Jaeger</a>之中已有說明。<br>接下來要在 MessagesController 中接收 Bot Connector 傳進來的 Parent Span 資料(一樣是 tracer.Extract)，程式碼如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task&lt;Activity&gt; <span class="title">HandleMessage</span>(<span class="params">Activity activity</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line">    <span class="comment">// 1. 建立 span</span></span><br><span class="line">    <span class="keyword">var</span> headers = Request.Headers.ToDictionary(k =&gt; k.Key, v =&gt; v.Value.First());</span><br><span class="line">    ISpanBuilder spanBuilder;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">string</span> operationName = <span class="string">"MessageController-HandleMessage"</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        ISpanContext parentSpanCtx = tracer.Extract(BuiltinFormats.HttpHeaders, <span class="keyword">new</span> TextMapExtractAdapter(headers));</span><br><span class="line">        spanBuilder = tracer.BuildSpan(operationName);</span><br><span class="line">        <span class="keyword">if</span> (parentSpanCtx != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            spanBuilder = spanBuilder.AsChildOf(parentSpanCtx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception)</span><br><span class="line">    &#123;</span><br><span class="line">        spanBuilder = tracer.BuildSpan(operationName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> scope = spanBuilder.StartActive(<span class="literal">true</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 其他的程式碼 ...</span></span><br><span class="line">            <span class="keyword">await</span> Conversation.SendAsync(activity, () =&gt; <span class="keyword">new</span> Dialogs.RootDialog());</span><br><span class="line">            <span class="comment">// 2.記錄一些　Tags</span></span><br><span class="line">            scope.Span.SetTag(<span class="string">"channelId"</span>, activity.ChannelId);</span><br><span class="line">            scope.Span.SetTag(<span class="string">"botId"</span>, activity.Recipient.Id);</span><br><span class="line">            scope.Span.SetTag(<span class="string">"userId"</span>, activity.From.Id);</span><br><span class="line">            <span class="comment">// 3.Log 一些相關資料</span></span><br><span class="line">            scope.Span.Log(<span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                [<span class="meta"><span class="meta-string">"botId"</span></span>] = activity.From.Id,</span><br><span class="line">                [<span class="meta"><span class="meta-string">"activity"</span></span>] = JsonConvert.SerializeObject(activity)</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 4.設定為錯誤</span></span><br><span class="line">            Tags.Error.Set(scope.Span, <span class="literal">true</span>);</span><br><span class="line">            scope.Span.Log(<span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                [<span class="meta"><span class="meta-string">"errMsg"</span></span>] = ex.ToString()</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> activity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>註</strong> 在 c#中是因為我們用 using 去包，所以就不需要特別地寫 span.finish 。</p><ul><li>被呼叫的 Method ，只要判斷 tracer.ActiveSpan != null ，就設定 tracer.ActiveSpan 為 Parent Span，如下，</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">string</span> operationName = <span class="string">"RootDialog-MessageReceivedAsync"</span>;</span><br><span class="line"><span class="keyword">var</span> spanBuilder = tracer.BuildSpan(operationName);</span><br><span class="line"><span class="keyword">if</span> (tracer.ActiveSpan != <span class="literal">null</span>)</span><br><span class="line">    spanBuilder.AsChildOf(tracer.ActiveSpan);</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> scope = spanBuilder.StartActive(<span class="literal">true</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 其他的程式碼 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>透過 HttpClient 呼叫外部 api 時，一樣將 tracer.ActiveSpan 放入 Header 傳過去即可，如下，</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//add opentracing</span></span><br><span class="line"><span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line"><span class="keyword">var</span> dictionary = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;();</span><br><span class="line"><span class="keyword">var</span> span = tracer.ActiveSpan;</span><br><span class="line"><span class="keyword">if</span> (span != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    tracer.Inject(span.Context, BuiltinFormats.HttpHeaders, <span class="keyword">new</span> TextMapInjectAdapter(dictionary));</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> entry <span class="keyword">in</span> dictionary)</span><br><span class="line">        HttpClient.DefaultRequestHeaders.Add(entry.Key, entry.Value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="運行結果"><a href="#運行結果" class="headerlink" title="運行結果"></a>運行結果</h3><h4 id="透過-WebChat-來測試訂便當-Bot，"><a href="#透過-WebChat-來測試訂便當-Bot，" class="headerlink" title="透過 WebChat 來測試訂便當 Bot，"></a>透過 WebChat 來測試訂便當 Bot，</h4><p>我們在 訂便當 Bot 中輸入代號，產生訂便當的 Menu，它的過程為，<br>WebChat -&gt; Bot Connector -&gt; 訂便當 Bot -&gt; Bot Connector -&gt; WebChat<br><img src="/2019/01/15/2019004/001.png" title="[WebChat]"></p><h4 id="net-debug"><a href="#net-debug" class="headerlink" title=".net debug"></a>.net debug</h4><p>在 MessageController 中，可以看到從 Header 中多了一個 uber-tracer-id header，如下，<br><img src="/2019/01/15/2019004/002.png" title="[C# Debug]"></p><h4 id="Jaeger-UI-查詢"><a href="#Jaeger-UI-查詢" class="headerlink" title="Jaeger UI 查詢"></a>Jaeger UI 查詢</h4><ul><li><p>Search by Tag<br>我的使用者為 Rainmaker ，所以我們可以在 Jaeger UI 中的 Tag ，輸入 userId=”Rainmaker” 就可以查出我的資訊，</p><img src="/2019/01/15/2019004/003.png" title="[Search By Tag]"></li><li><p>查看這個 Trace 資料<br>點進去查看那個 Trace ，就可以發現，整個 Path 都串接起來了哦，如下，</p><img src="/2019/01/15/2019004/004.png" title="[Tracer Detail]"><p>然後再展開那個花費 3.79 秒，我們 Log 它的 actionType 是 ShowMenuAction，如下，</p><img src="/2019/01/15/2019004/005.png" title="[Span Log Info]"></li></ul><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>從上面的 Demo 之中，在不同語言實作的系統中，可以將程式呼叫的過程透過 OpenTracing 一致的 API ，將它送到 Jaeger 之中。<br>所以我們可以從 Jaeger UI 來查詢到系統效能的瓶頸在那裡。<br>一開始建議先將在 api 入口，去記錄較大的 span 。當發現某個 span 不夠詳細時，再到該 span 去加入 child 的 span 。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://yq.aliyun.com/articles/514488" target="_blank" rel="noopener">开放分布式追踪（OpenTracing）入门与 Jaeger 实现</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在前一篇&lt;a href=&quot;https://rainmakerho.github.io/2019/01/04/2019002/&quot;&gt;使用 Ope
      
    
    </summary>
    
    
      <category term="BFv4" scheme="https://rainmakerho.github.io/tags/BFv4/"/>
    
      <category term="OpenTracing" scheme="https://rainmakerho.github.io/tags/OpenTracing/"/>
    
      <category term="Distributed Tracing" scheme="https://rainmakerho.github.io/tags/Distributed-Tracing/"/>
    
      <category term="Jaeger" scheme="https://rainmakerho.github.io/tags/Jaeger/"/>
    
      <category term="APM" scheme="https://rainmakerho.github.io/tags/APM/"/>
    
      <category term="Dynatrace" scheme="https://rainmakerho.github.io/tags/Dynatrace/"/>
    
      <category term=".NET" scheme="https://rainmakerho.github.io/tags/NET/"/>
    
      <category term="BFv3" scheme="https://rainmakerho.github.io/tags/BFv3/"/>
    
      <category term="NodeJS" scheme="https://rainmakerho.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Challenge-base and login redirect-based authentication cannot be used simultaneously.</title>
    <link href="https://rainmakerho.github.io/2019/01/15/2019003/"/>
    <id>https://rainmakerho.github.io/2019/01/15/2019003/</id>
    <published>2019-01-15T03:39:29.000Z</published>
    <updated>2019-01-15T05:12:02.914Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>好久之前發佈了一篇 <a href="https://dotblogs.com.tw/rainmaker/2013/11/29/131973" target="_blank" rel="noopener">[ASP.NET]讓 Web 專案在 IIS7 中可運行 Forms Authentication (表單驗證) 及 Windows 驗證</a>，但文件中的 Source 及 DLL Link 都找不到了。<br>而之前放在 dotblogs 上的檔案也因為轉換平台後，在 dotblogs 的附件也都不見了。</p><h3 id="DLL-下載"><a href="#DLL-下載" class="headerlink" title="DLL 下載"></a>DLL 下載</h3><p>最近從專案中找到那個 DLL，有需要的朋友，可以從以來下載 Mvolo.FormsAuthenticationModule.dll 哦!<br><a href="Mvolo.FormsAuthenticationModule.dll.7z">Mvolo.FormsAuthenticationModule.dll.7z</a><br>希望對大家有幫助 :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;好久之前發佈了一篇 &lt;a href=&quot;https://dotblogs.com.tw/rainmaker/2013/11/29/131973
      
    
    </summary>
    
    
      <category term="IIS" scheme="https://rainmakerho.github.io/tags/IIS/"/>
    
      <category term="Forms Authentication" scheme="https://rainmakerho.github.io/tags/Forms-Authentication/"/>
    
      <category term="Windows Authentication" scheme="https://rainmakerho.github.io/tags/Windows-Authentication/"/>
    
      <category term="Mvolo.FormsAuthenticationModule.dll" scheme="https://rainmakerho.github.io/tags/Mvolo-FormsAuthenticationModule-dll/"/>
    
  </entry>
  
  <entry>
    <title>使用 OpenTracing - Jaeger</title>
    <link href="https://rainmakerho.github.io/2019/01/04/2019002/"/>
    <id>https://rainmakerho.github.io/2019/01/04/2019002/</id>
    <published>2019-01-04T06:02:45.000Z</published>
    <updated>2019-01-16T02:43:16.554Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>隨著系統逾來逾大、逾複雜，為了維運方便，可能會將這些拆分成不同的 Service 。<br>但從使用者一個 Request 進來後，從前端、後端各 Service 再到 Database，如果有效能問題時，大家要如何查找問題呢? SQL Profiler, Fiddler, 寫 Log ? 或是使用一些工具來查看效能問題，例如 Dynatrace ?<br>現在大家有另外一個好選擇，就是使用 <a href="https://opentracing.io/" target="_blank" rel="noopener">OpenTracing</a> , 在程式中加入一些 Tracing 的資料(使用 OpenTracing 訂的 api，再看您要使用那一個 Support <a href="https://opentracing.io/" target="_blank" rel="noopener">OpenTracing</a> 的 Tracer 去註冊它。<br>到時候就可以透過時間軸的角度來看到底那裡有效能問題，那裡有錯誤。</p><p>以下筆者將使用 <a href="https://www.jaegertracing.io/" target="_blank" rel="noopener">JAEGER</a> 來 Demo。</p><h3 id="Why-OpenTracing"><a href="#Why-OpenTracing" class="headerlink" title="Why OpenTracing?"></a>Why OpenTracing?</h3><p>因為 <a href="https://opentracing.io/" target="_blank" rel="noopener">OpenTracing</a> 提供一個與平台無關，與廠商無關的 API，所以開發人員只要使用標準的 API，可以很輕易地更換不同的 追踪系統 ，只要它們都有 Support <a href="https://opentracing.io/" target="_blank" rel="noopener">OpenTracing</a> API。</p><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><p>因為<a href="https://www.jaegertracing.io/" target="_blank" rel="noopener">JAEGER</a>是 <a href="https://www.cncf.io/" target="_blank" rel="noopener">Cloud Native Computing Foundation(CNCF)</a>，所以您可以透過 Docker 或是直接執行它的執行檔。</p><h4 id="使用-Docker-執行-Mac"><a href="#使用-Docker-執行-Mac" class="headerlink" title="使用 Docker 執行 (Mac)"></a>使用 Docker 執行 (Mac)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name jaeger \</span><br><span class="line">  -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \</span><br><span class="line">  -p 5775:5775/udp \</span><br><span class="line">  -p 6831:6831/udp \</span><br><span class="line">  -p 6832:6832/udp \</span><br><span class="line">  -p 5778:5778 \</span><br><span class="line">  -p 16686:16686 \</span><br><span class="line">  -p 14268:14268 \</span><br><span class="line">  -p 9411:9411 \</span><br><span class="line">  jaegertracing/all-in-one:1.8</span><br></pre></td></tr></table></figure><p>要停止可以下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop jaeger</span><br></pre></td></tr></table></figure><p>要再啟動，就下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start jaeger</span><br></pre></td></tr></table></figure><img src="/2019/01/04/2019002/001.png" title="[docker start jaeger]"><h4 id="直接執行-Windows"><a href="#直接執行-Windows" class="headerlink" title="直接執行 (Windows)"></a>直接執行 (Windows)</h4><p>將下載的 jaeger-1.8.0-windows-amd64.tar.gz 解壓縮到 jaeger-1.8.0-windows-amd64 目錄，然後在 Command 視窗中執行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jaeger-all-in-one --collector.zipkin.http-port=9411</span><br></pre></td></tr></table></figure><img src="/2019/01/04/2019002/002.png" title="[run jaeger-all-in-one]"><p>然後開啟 Browser 輸入 <a href="http://localhost:16686" target="_blank" rel="noopener">http://localhost:16686</a> 應該就可以看到 Jaeger UI ，如下，<br><img src="/2019/01/04/2019002/003.png" title="[jaeger-UI]"></p><ul><li>註: 其他平台也可以直接這樣執行哦 :)</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="net-core-以-BFv4-為範例"><a href="#net-core-以-BFv4-為範例" class="headerlink" title=".net core (以 BFv4 為範例)"></a>.net core (以 BFv4 為範例)</h4><p>一開始加入 OpenTracing.Contrib.NetCore 及 Jaeger NuGet 套件，如下，<br><img src="/2019/01/04/2019002/004.png" title="[Add OpenTracing.Contrib.NetCore And Jaeger NuGet Packages]"></p><p>然後在 Startup.cs 中的 ConfigureServices 設定使用 OpenTracing ，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加入 OpenTracing</span></span><br><span class="line">services.AddOpenTracing();</span><br><span class="line">services.AddSingleton&lt;ITracer&gt;(serviceProvider =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">string</span> serviceName = <span class="string">"亂馬客BOT"</span>;</span><br><span class="line">    <span class="keyword">var</span> tracer = <span class="keyword">new</span> Tracer.Builder(serviceName)</span><br><span class="line">        .WithSampler(<span class="keyword">new</span> ConstSampler(<span class="literal">true</span>))</span><br><span class="line">        .Build();</span><br><span class="line">    <span class="comment">//註冊 Jaeger tracer</span></span><br><span class="line">    GlobalTracer.Register(tracer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tracer;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>那要如何使用呢? 我們可以在 OnTurnAsync 時，從 GlobalTracer 取出 ITracer 來用。<br>請注意，這裡用的都是 OpenTracing 的 Interface ，所以將來如何要換別的 Tracer 就在 Startup.cs 中給別的 tracer 就可以了。<br>以下的 Code ，如果輸入 rainmaker 的話，就等個 10 秒再回，<br>如果輸入 rm 就會產生 Exception ，可以用 Tags.Error.Set(scope.Span, true) 來設定 error。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bot</span> : <span class="title">IBot</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">OnTurnAsync</span>(<span class="params">ITurnContext turnContext, CancellationToken cancellationToken = <span class="keyword">default</span>(CancellationToken</span>))</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//從 GlobalTracer.Instance 取出 Tracer</span></span><br><span class="line">        <span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line">        <span class="keyword">using</span> (IScope scope = tracer.BuildSpan(<span class="string">$"OnTurnAsync:<span class="subst">&#123;ActivityTypes.Message&#125;</span>"</span>).StartActive(finishSpanOnDispose: <span class="literal">true</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (turnContext.Activity.Type == ActivityTypes.Message)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> userInput = turnContext.Activity.Text;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">using</span> (<span class="keyword">var</span> scopeMessage = tracer.BuildSpan(ActivityTypes.Message).StartActive(finishSpanOnDispose: <span class="literal">true</span>))</span><br><span class="line">                    &#123;</span><br><span class="line">                        ProcessUserInput(userInput);</span><br><span class="line">                        <span class="keyword">await</span> turnContext.SendActivityAsync(<span class="string">$"You said '<span class="subst">&#123;turnContext.Activity.Text&#125;</span>'"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">                &#123;</span><br><span class="line">                    Tags.Error.Set(scope.Span, <span class="literal">true</span>);</span><br><span class="line">                    tracer.ActiveSpan.Log(<span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        [<span class="meta">LogFields.Event</span>] = <span class="string">"error"</span>,</span><br><span class="line">                        [<span class="meta"><span class="meta-string">"value"</span></span>] = userInput,</span><br><span class="line">                        [<span class="meta"><span class="meta-string">"error"</span></span>] = ex.ToString()</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcessUserInput</span>(<span class="params"><span class="keyword">string</span> userInput</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line">        <span class="keyword">var</span> eventName = <span class="string">"ProcessUserInput"</span>;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> scope = tracer.BuildSpan(eventName).StartActive(finishSpanOnDispose: <span class="literal">true</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            tracer.ActiveSpan.Log(<span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                [<span class="meta">LogFields.Event</span>] = eventName,</span><br><span class="line">                [<span class="meta"><span class="meta-string">"value"</span></span>] = userInput</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (userInput == <span class="string">"rainmaker"</span>) Thread.Sleep(<span class="number">10000</span>);</span><br><span class="line">            <span class="keyword">if</span> (userInput == <span class="string">"rm"</span>) <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"rm throw errrors!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這時我們開啟 Emulator 來測試，分別輸入 hello, rainmaker, rm ，如下，<br><img src="/2019/01/04/2019002/007.png" title="[Emulator 測試]"></p><p>執行過後，我們可以透過 <a href="http://localhost:16686" target="_blank" rel="noopener">Jaeger UI http://localhost:16686</a>，可以發現 Service 可以選到 亂馬客 BOT 了(在 Startup.cs 中設定的)，<br><img src="/2019/01/04/2019002/005.png" title="[成功寫資訊到 Jaeger]"></p><p>按下 Find Traces Button 後，可以發現我們寫入的 Trace 資料，<br><img src="/2019/01/04/2019002/006.png" title="[Find Traces]"></p><p>這時我們可以點進花費時間 10 秒的 Trace ，可以發現在 ProcessUserInput 這個 Span 花了 10 秒的時間，如下，<br><img src="/2019/01/04/2019002/008.png" title="[查看那裡花費較多的時間]"></p><p>點進 Error 的內容，可以查到錯誤的相關資訊，如下，<br><img src="/2019/01/04/2019002/009.png" title="[log error]"></p><h4 id="net-framework-以-BFv3-訂便當-Bot-為範例"><a href="#net-framework-以-BFv3-訂便當-Bot-為範例" class="headerlink" title=".net framework (以 BFv3 訂便當 Bot 為範例)"></a>.net framework (以 BFv3 訂便當 Bot 為範例)</h4><ul><li><p>建置 .net framework 的 Jaeger Client</p><p>請到 <a href="https://github.com/jaegertracing/jaeger-client-csharp" target="_blank" rel="noopener">jaeger-client-csharp</a> 下載，並使用 VS.NET 2017 (因為它是 .net standard 2.0 專案)開啟來建置，建置完成後，就會在 src\Jaeger\bin\Debug\netstandard2.0 目錄中產生 Jaeger Client 的 DLL。</p></li><li><p>專案中使用 (必需升到 .net 4.6.1 (含)以上版本)</p><p>請先將專案升到 .net 4.6.1 (含)以上版本，並從 NuGet 套件中加入 OpenTracing, NETStandard.Library, Microsoft.Extensions.Logging.Abstractions(請跟 Jaeger Client 專案引用的版本相同，目前是 2.0.2)，如下圖，<br><img src="/2019/01/04/2019002/010.png" title="[OpenTracing]"> <br></p><p><img src="/2019/01/04/2019002/011.png" title="[NETStandard.Library]"> <br></p><p><img src="/2019/01/04/2019002/012.png" title="[Microsoft.Extensions.Logging.Abstractions]"> <br></p></li></ul><p>加入 Jaeger Client 專案 src\Jaeger\bin\Debug\netstandard2.0 目錄中的 Jaeger.dll。</p><ul><li><p>專案中使用 OpenTracing</p><p>在 Global.asax.cs 的 Application_Start 透過 Autofac 去設定使用的</p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Update Coversation Container</span></span><br><span class="line">    Conversation.UpdateContainer(builder =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// other ... BFv3 設定 Autofac ...</span></span><br><span class="line">        <span class="comment">// using Opentracing</span></span><br><span class="line">        <span class="keyword">var</span> tracer = <span class="keyword">new</span> Tracer.Builder(<span class="string">"亂馬客BOTBFv3"</span>)</span><br><span class="line">.WithSampler(<span class="keyword">new</span> ConstSampler(<span class="literal">true</span>))</span><br><span class="line">.Build();</span><br><span class="line">        GlobalTracer.Register(tracer);</span><br><span class="line">        <span class="comment">// using Opentracing</span></span><br><span class="line">        <span class="comment">// other ... BFv3 設定 Autofac ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">    GlobalConfiguration.Configure(WebApiConfig.Register);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 RootDialog 的 MessageReceivedAsync Method 中可以加入 Span ，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">MessageReceivedAsync</span>(<span class="params">IDialogContext context, IAwaitable&lt;IMessageActivity&gt; result</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="keyword">await</span> result;</span><br><span class="line">    <span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> tscope = tracer.BuildSpan(<span class="string">"RootDialog"</span>).StartActive(finishSpanOnDispose: <span class="literal">true</span>))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// bot 原本的 code ...</span></span><br><span class="line">        <span class="comment">// Log 一些資訊</span></span><br><span class="line">        tracer.ActiveSpan.Log(<span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="meta">LogFields.Event</span>] = <span class="string">"MessageReceivedAsync"</span>,</span><br><span class="line">            [<span class="meta"><span class="meta-string">"actionValue"</span></span>] = message.Value?.ToString(),</span><br><span class="line">            [<span class="meta"><span class="meta-string">"messageText"</span></span>] = message.Text</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// bot 原本的 code ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他 Method 使用上也是一樣，都是從 GlobalTracer.Instance 取出 tracer，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">static</span> Task <span class="title">DoActionAsync</span>(<span class="params">BotAction botAction, IDialogContext context</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tracer = GlobalTracer.Instance;</span><br><span class="line">    <span class="keyword">var</span> eventName = <span class="string">"DoActionAsync"</span>;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> childScope = tracer.BuildSpan(eventName).StartActive(finishSpanOnDispose: <span class="literal">true</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// bot 原本的 code ...</span></span><br><span class="line">        <span class="comment">// Log 一些資訊</span></span><br><span class="line">        tracer.ActiveSpan.Log(<span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="meta">LogFields.Event</span>] = eventName,</span><br><span class="line">            [<span class="meta"><span class="meta-string">"actionType"</span></span>] = botAction.ActionType.ToString()</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// bot 原本的 code ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Emulator 執行畫面為，<br><img src="/2019/01/04/2019002/013.png" title="[訂便當 Bot]"></p><p>執行過後，我們可以透過 <a href="http://localhost:16686" target="_blank" rel="noopener">Jaeger UI http://localhost:16686</a>，可以發現 Service 可以選到 亂馬客 BOTBFv3 了(在 Application_Start 中設定的)，<br><img src="/2019/01/04/2019002/013.png" title="[成功寫資訊到 Jaeger BFv3]"></p><p>點進去可以發現各 Span 寫的 Log 及執行所花費的時間，如下，<br><img src="/2019/01/04/2019002/014.png" title="[MessageReceivedAsync Span BFv3]"> <br><br><img src="/2019/01/04/2019002/015.png" title="[DoActionAsync Span BFv3]"></p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>只要加入 <a href="https://opentracing.io/" target="_blank" rel="noopener">OPENTRACING</a>，再加入要使用的 Tracer Client 套件，就可以快速來記錄資訊，真的很簡單也很方便。當系統很多時，您就不需要苦苦地查找許多的 Log 檔。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://opentracing.io/" target="_blank" rel="noopener">OPENTRACING</a><br><a href="https://www.jaegertracing.io/" target="_blank" rel="noopener">JAEGER</a><br><a href="https://github.com/yurishkuro/opentracing-tutorial" target="_blank" rel="noopener">opentracing-tutorial</a><br><a href="https://github.com/jaegertracing/jaeger-client-csharp/tree/master/examples" target="_blank" rel="noopener">jaeger-client-csharp/examples/(含.net core 和 .net framework)</a><br><a href="https://opentracing.io/guides/csharp/" target="_blank" rel="noopener">OpenTracing C#</a><br><a href="https://github.com/dotnet/standard/blob/master/docs/versions.md" target="_blank" rel="noopener">dotnet/standard</a></p><ul><li>研究過程中，非常感謝同事 Marty 的討論與幫助。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;隨著系統逾來逾大、逾複雜，為了維運方便，可能會將這些拆分成不同的 Service 。&lt;br&gt;但從使用者一個 Request 進來後，從前端、
      
    
    </summary>
    
    
      <category term="BFv4" scheme="https://rainmakerho.github.io/tags/BFv4/"/>
    
      <category term="OpenTracing" scheme="https://rainmakerho.github.io/tags/OpenTracing/"/>
    
      <category term="Distributed Tracing" scheme="https://rainmakerho.github.io/tags/Distributed-Tracing/"/>
    
      <category term="Jaeger" scheme="https://rainmakerho.github.io/tags/Jaeger/"/>
    
      <category term="APM" scheme="https://rainmakerho.github.io/tags/APM/"/>
    
      <category term="Dynatrace" scheme="https://rainmakerho.github.io/tags/Dynatrace/"/>
    
      <category term=".NET" scheme="https://rainmakerho.github.io/tags/NET/"/>
    
      <category term="BFv3" scheme="https://rainmakerho.github.io/tags/BFv3/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Botframework V4，從 Bot 送訊息到 IM Channel 時，加入額外的 Header 資訊</title>
    <link href="https://rainmakerho.github.io/2019/01/02/2019001/"/>
    <id>https://rainmakerho.github.io/2019/01/02/2019001/</id>
    <published>2019-01-02T05:05:53.000Z</published>
    <updated>2019-01-03T04:10:10.920Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Microsoft Botframework V4，簡稱 BFv4 已經 Release 了哦! 是使用 .net core 來開發，所以用 Mac 也可以開發哦!<br>在<a href="https://rainmakerho.github.io/2018/07/05/2018023/">從 Bot 送訊息到 IM Channel 時，加入額外的 Header 資訊</a>中，我們是透過 DI 去將 ConnectorClient 置換成我們的 MyConnectorClient ，然後在 MyConnectorClient 去新增 HttpClient 的 Header。<br>在 BFv4 中，我們要如何達到這樣子的需求呢?</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>以下是 Microsoft 文件中說明 Bot 的運作過程，<br><img src="https://docs.microsoft.com/en-us/azure/bot-service/v4sdk/media/bot-builder-activity.png?view=azure-bot-service-4.0" alt="exchanged when we run a simple echo bot"><br>所以我們可以透過 Middleware 來達到我們的需求，在 Middleware 中取出 ConnectorClient 然後再加入 Header 就可以了，如下，</p><h4 id="增加-Middleware"><a href="#增加-Middleware" class="headerlink" title="增加 Middleware"></a>增加 Middleware</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GssAdapterMiddleware</span> : <span class="title">IMiddleware</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">OnTurnAsync</span>(<span class="params">ITurnContext turnContext, NextDelegate next, CancellationToken cancellationToken = <span class="keyword">default</span>(CancellationToken</span>))</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> connectorClient = turnContext.TurnState[<span class="string">"Microsoft.Bot.Connector.IConnectorClient"</span>] <span class="keyword">as</span> ConnectorClient;</span><br><span class="line"><span class="comment">//add custom header</span></span><br><span class="line">AddGssAuthenticationHeaders(connectorClient);</span><br><span class="line"><span class="keyword">await</span> next.Invoke(cancellationToken);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddGssAuthenticationHeaders</span>(<span class="params">ConnectorClient connectorClient</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (connectorClient == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">var</span> authKey = <span class="string">"X-RM"</span>;</span><br><span class="line">        <span class="comment">//add if not exists</span></span><br><span class="line"><span class="keyword">if</span> (!connectorClient.HttpClient.DefaultRequestHeaders.Contains(authKey))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> accessToken = <span class="string">"rainmaker_ho"</span>;</span><br><span class="line">connectorClient.HttpClient.DefaultRequestHeaders.TryAddWithoutValidation(authKey, accessToken);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="設定-Middleware-Startup-cs"><a href="#設定-Middleware-Startup-cs" class="headerlink" title="設定 Middleware (Startup.cs)"></a>設定 Middleware (Startup.cs)</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">services.AddBot&lt;EmptyBotBot&gt;(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//... other code</span></span><br><span class="line"><span class="comment">//add middleware</span></span><br><span class="line">options.Middleware.Add(<span class="keyword">new</span> GssAdapterMiddleware());</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>所以回覆的內容中，都會多了一個 Header 哦! 如下，<br><img src="/2019/01/02/2019001/001.png" title="[X-RM Header]"></p><h3 id="BFv4-新東東"><a href="#BFv4-新東東" class="headerlink" title="BFv4 新東東"></a>BFv4 新東東</h3><h4 id="bot-adapter"><a href="#bot-adapter" class="headerlink" title="bot adapter"></a><a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-concept-activity-processing?view=azure-bot-service-4.0#the-bot-adapter" target="_blank" rel="noopener">bot adapter</a></h4><p>封裝 authentication 的處理，從 Bot Connector Service 收到 activities 後，建立 <a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-concept-activity-processing?view=azure-bot-service-4.0#turn-context" target="_blank" rel="noopener">TrunContext</a> 傳給 Bot ，並負責將 Bot 要傳送結果回去給 User Channels 。</p><h4 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a><a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-concept-middleware?view=azure-bot-service-4.0" target="_blank" rel="noopener">Middleware</a></h4><p>介於 <a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-concept-activity-processing?view=azure-bot-service-4.0#the-bot-adapter" target="_blank" rel="noopener">bot adapter</a> 與 Bot 之間。這與 asp.net core 的 Middleware 作用類似，只是它的作用域是在 bot 之中哦!</p><h4 id="Turn"><a href="#Turn" class="headerlink" title="Turn"></a>Turn</h4><p>從 bot 接到 activity (例如收到使用者的一個輸入內容) ， 進行處理並回覆使用者。<br>在 Trun 中的 <a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-concept-activity-processing?view=azure-bot-service-4.0#turn-context" target="_blank" rel="noopener">TrunContext</a> 包含許多有用的資訊，例如 Conversation, Activity, State 等等。</p><h4 id="Dialogs-and-Conversation-flow"><a href="#Dialogs-and-Conversation-flow" class="headerlink" title="Dialogs and Conversation flow"></a>Dialogs and Conversation flow</h4><ul><li>Dialog: 一個簡單的 trun，例如一個簡單的問與答，無法包含另一個 Dialog 。</li><li>Prompt: 跟 BFv3 差不多，封裝一些常用的問句(text, numbers, dates, confirmation or choices)。</li><li>DalogContainer: Dialog or Prompt 的集合，在 WaterfallStep 中依序的來執行裡面的 Dialog/Prompt，跟 BFv3 的 Dialog 類似。</li><li>WaterfallStep:</li><li>DialogSet: Dialog, Prompt or DialogContainer 的集合。</li></ul><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-basics?view=azure-bot-service-4.0&amp;tabs=cs" target="_blank" rel="noopener">How bots work</a><br><a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-custom-storage?view=azure-bot-service-4.0" target="_blank" rel="noopener">Implement custom storage for your bot</a><br><a href="https://qiita.com/kenakamu/items/25667b7359bc1f38cf15" target="_blank" rel="noopener">Bot Builder v4 でボット開発 : ボットが起動する仕組みを理解する</a><br><a href="https://qiita.com/kenakamu/items/6dc043cfc1f199032883" target="_blank" rel="noopener">Microsoft Bot Framework v4 完全制覇 : 目次</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Microsoft Botframework V4，簡稱 BFv4 已經 Release 了哦! 是使用 .net core 來開發，所以用
      
    
    </summary>
    
    
      <category term="botframework" scheme="https://rainmakerho.github.io/tags/botframework/"/>
    
      <category term="BFv4" scheme="https://rainmakerho.github.io/tags/BFv4/"/>
    
  </entry>
  
  <entry>
    <title>WeChat微信 Bot 開發 - 接口配置信息</title>
    <link href="https://rainmakerho.github.io/2018/12/27/2018044/"/>
    <id>https://rainmakerho.github.io/2018/12/27/2018044/</id>
    <published>2018-12-27T08:37:04.000Z</published>
    <updated>2018-12-28T05:17:22.008Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在測試 WeChat 的 Bot 時，一開始連到的網址都無法登入。<br>舊的網址為 <a href="http://admin.wechat.com/debug/sandbox" target="_blank" rel="noopener">http://admin.wechat.com/debug/sandbox</a> (2018-09-13 就失效了哦)，<br>要註冊的請到新的網站為 <a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</a></p><p>如果有裝 WeChat 的話，按下「登录」會出現條碼，掃下去就可以了。<br>當登入之後，就可以註冊測試帳號。</p><p>當我設定「接口配置信息」中的 URL 及 Token 之後，按下「提交」，總是出現「配置失敗」的訊息。</p><h3 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h3><p>在測試期間，我是使用 <a href="https://ngrok.com/download" target="_blank" rel="noopener">ngrok</a> 來讓 local 可以讓外面連到。<br>而且，我們還可以看到外面 Call 進來的內容(Web Interface)，如下，<br><img src="/2018/12/27/2018044/002.png" title="[ngrok]"></p><img src="/2018/12/27/2018044/003.png" title="[ngrok web interface]"><p>所以可以看到，在「接口配置信息」區段中按下「提交」，會發一個 GET 請求，裡面有 echostr, nonce, signature 及 timestamp 參數值。<br>要讓它成功的話，需要檢查驗證後，回傳 echostr 的內容回去。</p><p>在 node 可以加入 wechat 套件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install wechat</span><br></pre></td></tr></table></figure><p>然後透過它(checkSignature)去檢查，如果沒問題，又有 echostr 參數，就回傳 echostr 的內容回去。<br>設定 express router 的 middleware 程式碼類似如下，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> WeChat <span class="keyword">from</span> <span class="string">'wechat'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> checkSignature(req, res, next) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> isSignatured = WeChat.checkSignature(</span><br><span class="line">        req.query,</span><br><span class="line">        <span class="string">'yourtokenhere'</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (isSignatured) &#123;</span><br><span class="line">            <span class="keyword">if</span> (req.query.echostr) &#123;</span><br><span class="line">                res.send(req.query.echostr);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                next();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(<span class="number">401</span>, <span class="string">'checkSignature fail'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>寫好程式後，再重新執行「接口配置信息」，就可以正常配置了哦!</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432" target="_blank" rel="noopener">WeChat Official Account Platform</a><br><a href="http://doxmate.cool/node-webot/wechat/index.html" target="_blank" rel="noopener">微信公共平台 Node 库</a><br><a href="https://zhuanlan.zhihu.com/p/37149153" target="_blank" rel="noopener">node.js 实现微信公众号</a><br><a href="https://medium.com/@davidyu_44356/build-your-wechat-chatbot-6e439d3c9650" target="_blank" rel="noopener">Build your WeChat chatbot</a><br><a href="http://admin.wechat.com/wiki/index.php?title=Guide_for_Message_API" target="_blank" rel="noopener">Guide for Message API</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近在測試 WeChat 的 Bot 時，一開始連到的網址都無法登入。&lt;br&gt;舊的網址為 &lt;a href=&quot;http://admin.wec
      
    
    </summary>
    
    
      <category term="botframework" scheme="https://rainmakerho.github.io/tags/botframework/"/>
    
      <category term="WeChat" scheme="https://rainmakerho.github.io/tags/WeChat/"/>
    
      <category term="微信" scheme="https://rainmakerho.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="weixin" scheme="https://rainmakerho.github.io/tags/weixin/"/>
    
      <category term="公众平台" scheme="https://rainmakerho.github.io/tags/%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="checkSignature" scheme="https://rainmakerho.github.io/tags/checkSignature/"/>
    
  </entry>
  
  <entry>
    <title>.NET SmtpClient Send Port 465 會發生 The operations timed out.</title>
    <link href="https://rainmakerho.github.io/2018/12/05/2018043/"/>
    <id>https://rainmakerho.github.io/2018/12/05/2018043/</id>
    <published>2018-12-05T08:51:01.000Z</published>
    <updated>2018-12-05T09:23:01.310Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近公司的 Mail Server 要全面走 SSL，所以 Port 改使用 465 。<br>所以程式中寄 Mail 的部份也要調整成啟用 SSL ， Port 改成 465 。<br>但程式一執行下去，就 Hang 一段時間，然後噴「The operations timed out」的錯誤。</p><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><p>上網查了一下，蠻多人遇到這問題的，如果使用 SmtpClient 去送的話，就會 timeout 。<br>建議改成 587 ，我將它改成了 587 之後，果然就順利送出了。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = <span class="string">"yourmailserver"</span>;</span><br><span class="line"><span class="keyword">string</span> to = <span class="string">"s.fer@rm.com.tw"</span>;</span><br><span class="line"><span class="keyword">string</span> <span class="keyword">from</span> = <span class="string">"rm@rm.com.tw"</span>;</span><br><span class="line"><span class="keyword">var</span> message = <span class="keyword">new</span> MailMessage(<span class="keyword">from</span>, to);</span><br><span class="line">message.Subject = <span class="string">"Using the new SMTP client."</span>;</span><br><span class="line">message.Body = <span class="string">@"Using this new feature, you can send an email message from an application very easily."</span>;</span><br><span class="line">SmtpClient client = <span class="keyword">new</span> SmtpClient(server);</span><br><span class="line"><span class="comment">// Credentials are necessary if the server requires the client</span></span><br><span class="line"><span class="comment">// to authenticate before it will send email on the client's behalf.</span></span><br><span class="line">client.Credentials = <span class="keyword">new</span> System.Net.NetworkCredential(<span class="string">"youraccount"</span>, <span class="string">"yourpwd"</span>);</span><br><span class="line"><span class="comment">// client.Port = 465;</span></span><br><span class="line"><span class="comment">// 改成 587, 465 會噴 The operations timed out</span></span><br><span class="line">client.Port = <span class="number">587</span>;</span><br><span class="line">client.EnableSsl = <span class="literal">true</span>;</span><br><span class="line">client.Send(message);</span><br></pre></td></tr></table></figure><p>那為什麼走 465 不行呢?<br>似乎是因為 465 是走 Implicit SSL, 而 System.Net.Mail.SmtpClient 並不 Support 它(請參考:<a href="https://support.microsoft.com/en-ca/help/950260/you-cannot-use-system-net-mail-smtpclient-to-send-an-e-mail-message-wi" target="_blank" rel="noopener">You cannot use System.Net.Mail.SmtpClient to send an e-mail message with Implicit SSL</a>)。<br>但 587 一定需要給帳密，如果在 Domain 內要 Mailrelay 呢?<br>我們可以參考 <a href="https://stackoverflow.com/questions/1011245/how-can-i-send-emails-through-ssl-smtp-with-the-net-framework" target="_blank" rel="noopener">How can I send emails through SSL SMTP with the .NET Framework?</a> , 使用 Andrew Siemer 建議的方式，改用舊版的「System.Web.Mail」來寄送就可以了哦! 如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">System.Web.Mail.MailMessage myMail = <span class="keyword">new</span> System.Web.Mail.MailMessage();</span><br><span class="line">myMail.Fields.Add</span><br><span class="line">    (<span class="string">"http://schemas.microsoft.com/cdo/configuration/smtpserver"</span>,</span><br><span class="line">                  <span class="string">"yourmailserver"</span>);</span><br><span class="line">myMail.Fields.Add</span><br><span class="line">    (<span class="string">"http://schemas.microsoft.com/cdo/configuration/smtpserverport"</span>,</span><br><span class="line">                  <span class="string">"465"</span>);</span><br><span class="line">myMail.Fields.Add</span><br><span class="line">    (<span class="string">"http://schemas.microsoft.com/cdo/configuration/sendusing"</span>,</span><br><span class="line">                  <span class="string">"2"</span>);</span><br><span class="line"><span class="comment">//sendusing: cdoSendUsingPort, value 2, for sending the message using</span></span><br><span class="line"><span class="comment">//the network.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//smtpauthenticate: Specifies the mechanism used when authenticating</span></span><br><span class="line"><span class="comment">//to an SMTP</span></span><br><span class="line"><span class="comment">//service over the network. Possible values are:</span></span><br><span class="line"><span class="comment">//- cdoAnonymous, value 0. Do not authenticate.</span></span><br><span class="line"><span class="comment">//- cdoBasic, value 1. Use basic clear-text authentication.</span></span><br><span class="line"><span class="comment">//When using this option you have to provide the user name and password</span></span><br><span class="line"><span class="comment">//through the sendusername and sendpassword fields.</span></span><br><span class="line"><span class="comment">//- cdoNTLM, value 2. The current process security context is used to</span></span><br><span class="line"><span class="comment">// authenticate with the service.</span></span><br><span class="line">myMail.Fields.Add</span><br><span class="line">(<span class="string">"http://schemas.microsoft.com/cdo/configuration/smtpauthenticate"</span>, <span class="string">"1"</span>);</span><br><span class="line"><span class="comment">//Use 0 for anonymous</span></span><br><span class="line">myMail.Fields.Add</span><br><span class="line">(<span class="string">"http://schemas.microsoft.com/cdo/configuration/sendusername"</span>,</span><br><span class="line">    <span class="string">"username"</span>);</span><br><span class="line">myMail.Fields.Add</span><br><span class="line">(<span class="string">"http://schemas.microsoft.com/cdo/configuration/sendpassword"</span>,</span><br><span class="line">      <span class="string">"userpwd"</span>);</span><br><span class="line">myMail.Fields.Add</span><br><span class="line">(<span class="string">"http://schemas.microsoft.com/cdo/configuration/smtpusessl"</span>,</span><br><span class="line">      <span class="string">"true"</span>);</span><br><span class="line">myMail.From = <span class="string">"rm@rm.com.tw"</span></span><br><span class="line">myMail.To = <span class="string">"s.fer@rm.com.tw"</span>;</span><br><span class="line">myMail.Subject = <span class="string">"test sub"</span>;</span><br><span class="line">myMail.BodyFormat = MailFormat.Html;</span><br><span class="line">myMail.Body = <span class="string">"body"</span>;</span><br><span class="line">System.Web.Mail.SmtpMail.SmtpServer = <span class="string">"yourmailserver:465"</span>;</span><br><span class="line">System.Web.Mail.SmtpMail.Send(myMail);</span><br></pre></td></tr></table></figure><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://support.microsoft.com/en-ca/help/950260/you-cannot-use-system-net-mail-smtpclient-to-send-an-e-mail-message-wi" target="_blank" rel="noopener">You cannot use System.Net.Mail.SmtpClient to send an e-mail message with Implicit SSL</a><br><a href="https://support.microsoft.com/en-us/help/310273/how-to-send-e-mail-programmatically-by-using-system-web-mail-in-visual" target="_blank" rel="noopener">How to send e-mail programmatically by using System.Web.Mail in Visual C# 2005 or in Visual C# .NET</a><br><a href="https://stackoverflow.com/questions/1011245/how-can-i-send-emails-through-ssl-smtp-with-the-net-framework" target="_blank" rel="noopener">How can I send emails through SSL SMTP with the .NET Framework?</a><br><a href="https://www.mailgun.com/blog/which-smtp-port-understanding-ports-25-465-587" target="_blank" rel="noopener">Which SMTP Port Should I Use? Understanding Ports 25, 465, &amp; 587</a><br><a href="http://www.onbirkod.com/2017/10/20/solving-timeout-problem-when-sending-email-via-yandex-c/" target="_blank" rel="noopener">Solving Timeout Problem When Sending Email via Yandex (C#)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近公司的 Mail Server 要全面走 SSL，所以 Port 改使用 465 。&lt;br&gt;所以程式中寄 Mail 的部份也要調整成啟用
      
    
    </summary>
    
    
      <category term="SmtpClient" scheme="https://rainmakerho.github.io/tags/SmtpClient/"/>
    
      <category term="Port" scheme="https://rainmakerho.github.io/tags/Port/"/>
    
      <category term="465" scheme="https://rainmakerho.github.io/tags/465/"/>
    
      <category term="587" scheme="https://rainmakerho.github.io/tags/587/"/>
    
      <category term="timeout" scheme="https://rainmakerho.github.io/tags/timeout/"/>
    
      <category term="The operations timed out" scheme="https://rainmakerho.github.io/tags/The-operations-timed-out/"/>
    
      <category term="hang" scheme="https://rainmakerho.github.io/tags/hang/"/>
    
  </entry>
  
  <entry>
    <title>PDF 最後一頁才顯示頁尾</title>
    <link href="https://rainmakerho.github.io/2018/11/29/2018042/"/>
    <id>https://rainmakerho.github.io/2018/11/29/2018042/</id>
    <published>2018-11-29T06:46:17.000Z</published>
    <updated>2018-12-03T02:52:25.316Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 <a href="https://rainmakerho.github.io/2018/07/13/2018024/">將 datatable 的資料轉出成有浮水印的 PDF 檔 (2)</a> 中，我們已可以將 datatable 的資料轉出有浮水印的 pdf 檔。 但客戶有個需求是， footer 可以在最後一頁才顯示嗎?</p><p>因為我們是透過 Excel 去轉成 PDF ，於是就研究看看 Excel 是否可在最後一頁才顯示，參考 <a href="https://answers.microsoft.com/zh-hant/msoffice/forum/all/excel/96f86bb2-3187-4e54-acb6-6d1d9be81468" target="_blank" rel="noopener">Excel 有多頁列時，只希望列印最後一頁的頁尾，其他分頁都不會印出</a> 似乎不容易 (啓動巨集呢!)</p><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><p>Excel 無法操作，那就看看 PDF 是否可以加工，研究了一下，可以在不同的 Page 中加入 Header 及 Footer 。<br>所以在產生 PDF 後，在最後一頁加入我們要的 Footer 就可以了。<br>程式如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MemoryStream <span class="title">AddFooterAndWatermark</span>(<span class="params">MemoryStream pdfStream, WatermarkArg arg</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> pdfDocument = <span class="keyword">new</span> Aspose.Pdf.Document(pdfStream);</span><br><span class="line"><span class="keyword">var</span> pdfLastPage = pdfDocument.Pages[pdfDocument.Pages.Count];</span><br><span class="line"><span class="keyword">var</span> footer = <span class="keyword">new</span> Aspose.Pdf.HeaderFooter();</span><br><span class="line"><span class="comment">//Instantiate a table object</span></span><br><span class="line">Aspose.Pdf.Table tab1 = <span class="keyword">new</span> Aspose.Pdf.Table();</span><br><span class="line">tab1.HorizontalAlignment = HorizontalAlignment.Center;</span><br><span class="line"><span class="comment">//設定預設的文字格式</span></span><br><span class="line"><span class="keyword">var</span> defaultTextState = <span class="keyword">new</span> TextState(<span class="string">"MingLiU"</span>, <span class="number">8</span>);</span><br><span class="line">footer.Paragraphs.Add(tab1);</span><br><span class="line">tab1.DefaultColumnWidth = <span class="string">"180"</span>;</span><br><span class="line">tab1.DefaultCellTextState = defaultTextState;</span><br><span class="line"><span class="comment">//Create rows in the table and then cells in the rows</span></span><br><span class="line"><span class="keyword">var</span> row1 = tab1.Rows.Add();</span><br><span class="line"><span class="keyword">var</span> cellL = row1.Cells.Add(<span class="string">"信用資訊查詢主管"</span>);</span><br><span class="line"><span class="comment">//cellL.DefaultCellTextState = defaultTextState;</span></span><br><span class="line">cellL.Alignment = HorizontalAlignment.Left;</span><br><span class="line"><span class="keyword">var</span> cellR = row1.Cells.Add(<span class="string">"經辦"</span>);</span><br><span class="line">cellR.Alignment = HorizontalAlignment.Right;</span><br><span class="line">pdfLastPage.Footer = footer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrWhiteSpace(arg.Watermark))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> text = <span class="keyword">new</span> FormattedText(arg.Watermark);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> page <span class="keyword">in</span> pdfDocument.Pages)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (arg.WMStyle)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WatermarkStyle.FitPage:</span><br><span class="line">AddWatermarkFitPage(page, arg);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WatermarkStyle.RepeatHorizontal:</span><br><span class="line">AddWatermarkRepeatHorizontal(page, arg);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newPdfStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">pdfDocument.Save(newPdfStream);</span><br><span class="line"><span class="keyword">return</span> newPdfStream;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以使用時，如果有要 Footer 的話，就改 Call AddFooterAndWatermark 這個 Method。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">btnFooter_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> excelArg = <span class="keyword">new</span> ExportDataTable2ExcelArg</span><br><span class="line">&#123;</span><br><span class="line">dataSource = GetDataSource(),</span><br><span class="line">HeaderCenter = <span class="string">"&amp;24 This is Report Header ..."</span>,</span><br><span class="line">HeaderRight = <span class="string">$"&amp;12 使用者:Rainmaker\r日期:<span class="subst">&#123;DateTime.Now.ToString(<span class="string">"yyyy/MM/dd HH:mm:ss"</span>)&#125;</span>"</span>,</span><br><span class="line">FooterRight = <span class="string">"&amp;10 &amp;P/&amp;N"</span>,</span><br><span class="line">ColumnInfos = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, Tuple&lt;<span class="keyword">string</span>, <span class="keyword">double</span>, Aspose.Cells.Style&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="string">"ProductID"</span>, <span class="keyword">new</span> Tuple&lt;<span class="keyword">string</span>, <span class="keyword">double</span>, Aspose.Cells.Style&gt;(<span class="string">$"產品代號"</span>, <span class="number">-1</span>, <span class="literal">null</span>) &#125;,</span><br><span class="line">&#123;<span class="string">"ProductName"</span>, <span class="keyword">new</span> Tuple&lt;<span class="keyword">string</span>, <span class="keyword">double</span>, Aspose.Cells.Style&gt;(<span class="string">"產品名稱"</span> , <span class="number">-1</span>, <span class="literal">null</span>) &#125;,</span><br><span class="line">&#123;<span class="string">"ProductDesc"</span>, <span class="keyword">new</span> Tuple&lt;<span class="keyword">string</span>, <span class="keyword">double</span>, Aspose.Cells.Style&gt;(<span class="string">"產品描述"</span> , <span class="number">-1</span>, <span class="literal">null</span>) &#125;,</span><br><span class="line">&#123;<span class="string">"Units"</span>, <span class="keyword">new</span> Tuple&lt;<span class="keyword">string</span>, <span class="keyword">double</span>, Aspose.Cells.Style&gt;(<span class="string">"產品 庫存"</span> , <span class="number">-1</span>, <span class="literal">null</span>) &#125;,</span><br><span class="line">&#123;<span class="string">"CreDte"</span>, <span class="keyword">new</span> Tuple&lt;<span class="keyword">string</span>, <span class="keyword">double</span>, Aspose.Cells.Style&gt;(<span class="string">"日期"</span> , <span class="number">10</span>, <span class="keyword">new</span> Aspose.Cells.Style&#123; Number = <span class="number">14</span> &#125;) &#125;</span><br><span class="line">&#125;,</span><br><span class="line">PageOrientation = PageOrientationType.Landscape,</span><br><span class="line">IsTextWrapped = <span class="literal">false</span>,</span><br><span class="line">PageScale = <span class="number">80</span>,</span><br><span class="line">FontName = <span class="string">"標楷體"</span>,</span><br><span class="line">HeaderHorizontalAlignment = TextAlignmentType.Center</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> pdfStream = GenPDFFromDataTable(excelArg);</span><br><span class="line"><span class="keyword">var</span> fileNameWithoutExt = <span class="string">$"<span class="subst">&#123;Guid.NewGuid().ToString(<span class="string">"N"</span>)&#125;</span>"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> watermarkArg = <span class="keyword">new</span> WatermarkArg</span><br><span class="line">&#123;</span><br><span class="line">Watermark = <span class="string">$"* 使用者:亂馬客  *<span class="subst">&#123;Environment.NewLine&#125;</span><span class="subst">&#123;DateTime.Now.ToString(<span class="string">"yyyy/MM/dd HH:mm:ss"</span>)&#125;</span>"</span>,</span><br><span class="line">WMStyle = WatermarkStyle.RepeatHorizontal,</span><br><span class="line">WatermarkHeight = <span class="number">100</span>,</span><br><span class="line">WatermarkWidth = <span class="number">130</span>,</span><br><span class="line">WatermarkHorizontalSpace = <span class="number">50</span>,</span><br><span class="line">WatermarkVerticalSpace = <span class="number">30</span>,</span><br><span class="line">RotateAngle = <span class="number">30</span>,</span><br><span class="line">Opacity = <span class="number">.1</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> waterStream = AddFooterAndWatermark(pdfStream, watermarkArg);</span><br><span class="line">Response.ContentType = <span class="string">"application/pdf"</span>;</span><br><span class="line">Response.AddHeader(<span class="string">"content-disposition"</span>, <span class="string">"attachment; filename="</span> + <span class="string">$"<span class="subst">&#123;fileNameWithoutExt&#125;</span>.pdf"</span>);</span><br><span class="line"><span class="keyword">var</span> fileSize = waterStream.Length;</span><br><span class="line"><span class="keyword">byte</span>[] pdfBuffer = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>)fileSize];</span><br><span class="line">waterStream.Read(pdfBuffer, <span class="number">0</span>, (<span class="keyword">int</span>)fileSize);</span><br><span class="line">waterStream.Close();</span><br><span class="line">Response.BinaryWrite(pdfBuffer);</span><br><span class="line">Response.End();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>產出的結果如下，<br><img src="/2018/11/29/2018042/001.png" title="[footer only on lastpage]"></p><ul><li>註:使用 TextState 時 (<strong>var defaultTextState = new TextState(“MingLiU”, 8);</strong>)，不能直接輸入中文的字型名稱，要到機碼「HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\fonts」去找出對應的名稱哦!<br>例如: MingLiU。不然會出現 FontNotFoundException，如下，<br><strong>‘Aspose.Pdf.Text.FontRepository.FindFont(“新細明體”)’ 擲回 ‘Aspose.Pdf.FontNotFoundException’ 類型的例外狀況</strong></li></ul><p>而且機碼的名稱，目前是<strong>區分大小寫</strong>的哦!</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中文字型名稱 ，或是機碼中的名稱大小寫不對，都會錯誤</span></span><br><span class="line"><span class="keyword">var</span> textStateFromFontCName = <span class="keyword">new</span> TextState(<span class="string">"標楷體"</span>, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">var</span> textStateFromFontEName= <span class="keyword">new</span> TextState(<span class="string">"DFKai-sb"</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 機碼中是 DFKai-SB</span></span><br><span class="line"><span class="keyword">var</span> textStateFromFontEName= <span class="keyword">new</span> TextState(<span class="string">"DFKai-SB"</span>, <span class="number">8</span>);</span><br></pre></td></tr></table></figure><img src="/2018/11/29/2018042/002.png" title="[標楷體DFKai-SB]">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在 &lt;a href=&quot;https://rainmakerho.github.io/2018/07/13/2018024/&quot;&gt;將 datata
      
    
    </summary>
    
    
      <category term="aspose" scheme="https://rainmakerho.github.io/tags/aspose/"/>
    
      <category term="pdf" scheme="https://rainmakerho.github.io/tags/pdf/"/>
    
      <category term="cells" scheme="https://rainmakerho.github.io/tags/cells/"/>
    
      <category term="excel" scheme="https://rainmakerho.github.io/tags/excel/"/>
    
      <category term="footer" scheme="https://rainmakerho.github.io/tags/footer/"/>
    
      <category term="頁尾" scheme="https://rainmakerho.github.io/tags/%E9%A0%81%E5%B0%BE/"/>
    
      <category term="TextState" scheme="https://rainmakerho.github.io/tags/TextState/"/>
    
      <category term="fontlink\systemlink" scheme="https://rainmakerho.github.io/tags/fontlink-systemlink/"/>
    
  </entry>
  
  <entry>
    <title>未更新階段作業 ID</title>
    <link href="https://rainmakerho.github.io/2018/11/27/2018041/"/>
    <id>https://rainmakerho.github.io/2018/11/27/2018041/</id>
    <published>2018-11-27T09:13:49.000Z</published>
    <updated>2018-11-28T02:48:37.776Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近系統讓 AppScan 掃時，會出一個「未更新階段作業 ID」的問題，如下，<br><img src="/2018/11/27/2018041/001.png" title="[未更新階段作業 ID]"></p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>從 report 中來看，「登入後變更階段作業 ID 值」， Cookie ASP.NET_SessionId 登入後就會變了呀!<br>怎麼會要我再變更 Session Id 呢? 而且 Report 的結果， ASP.NET_SessionId 也會變呀!<br>詢問同事 Joe 後才知道，原來它是看系統 <strong>所有的 Cookie</strong> ，在登入後需要變更才行。</p><p>因為它會在 Login 前先將那些 Cookie 給值，然後在 Login 後去檢查原先的那些 Cookie 是否相同，如果相同的話，就會有「未更新階段作業 ID」的問題。</p><p>例如，系統會用到 cookie-a, cookie-b, cookie-c ，在登入前 AppScan 先給它值分別為 1, 2, 3。<br>在登入後， AppScan 再去看 cookie-a, cookie-b, cookie-c 是否有相同的值，如果有的話，就算是有那個問題。</p><p>知道它如何檢查的之後，就可以在 Login 後，將不用的 Cookie 清除，或是去重設那些 Cookie 的值!</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="http://blog.securityps.com/2013/06/session-fixation-forms-authentication.html" target="_blank" rel="noopener">Session Fixation &amp; Forms Authentication Token Termination in ASP.NET</a><br><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21674468" target="_blank" rel="noopener">Common causes for a “Session Identifier not Updated” false positive in AppScan Enterprise</a><br><a href="http://www-01.ibm.com/support/docview.wss?uid=swg1PM12982" target="_blank" rel="noopener">PM12982: Session Identifier Not Updated information display issue</a><br><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21375833" target="_blank" rel="noopener">Information for Session tests and ASP.NET in AppScan Standard</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近系統讓 AppScan 掃時，會出一個「未更新階段作業 ID」的問題，如下，&lt;br&gt;&lt;img src=&quot;/2018/11/27/2018
      
    
    </summary>
    
    
      <category term="AppScan" scheme="https://rainmakerho.github.io/tags/AppScan/"/>
    
      <category term="未更新階段作業 ID" scheme="https://rainmakerho.github.io/tags/%E6%9C%AA%E6%9B%B4%E6%96%B0%E9%9A%8E%E6%AE%B5%E4%BD%9C%E6%A5%AD-ID/"/>
    
      <category term="登入後變更階段作業 ID 值" scheme="https://rainmakerho.github.io/tags/%E7%99%BB%E5%85%A5%E5%BE%8C%E8%AE%8A%E6%9B%B4%E9%9A%8E%E6%AE%B5%E4%BD%9C%E6%A5%AD-ID-%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>Could not find a part of the path &#39;C:\Users\...\bin\roslyn\csc.exe&#39;.</title>
    <link href="https://rainmakerho.github.io/2018/11/23/2018040/"/>
    <id>https://rainmakerho.github.io/2018/11/23/2018040/</id>
    <published>2018-11-23T05:05:36.000Z</published>
    <updated>2018-11-23T05:18:07.127Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近直接透過 Visual Studio 2017 新增專案後，建置都成功。<br>但直接執行時，卻出現以下的錯誤訊息，</p><p>Server Error in ‘/‘ Application.<br>Could not find a part of the path ‘C:\Users...\bin\roslyn\csc.exe’.<br>Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code.</p><p>Exception Details: System.IO.DirectoryNotFoundException: Could not find a part of the path ‘C:\Users...\bin\roslyn\csc.exe’.</p><img src="/2018/11/23/2018040/001.png" title="[Server Error]"><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><h4 id="1-更新-Microsoft-CodeDom-Providers-DotNetCompilerPlatform-package"><a href="#1-更新-Microsoft-CodeDom-Providers-DotNetCompilerPlatform-package" class="headerlink" title="1.更新 Microsoft.CodeDom.Providers.DotNetCompilerPlatform package"></a>1.更新 Microsoft.CodeDom.Providers.DotNetCompilerPlatform package</h4><p>依<a href="https://blogs.msdn.microsoft.com/jpsanders/2018/02/22/error-could-not-find-a-part-of-the-path-esitesroot0binroslyncsc-exe/" target="_blank" rel="noopener">Error: Could not find a part of the path ‘E:\sitesroot\0\bin\roslyn\csc.exe’.</a>是 Microsoft.CodeDom.Providers.DotNetCompilerPlatform package 的 Bug，所以更新到最新版本就可以了，如下，</p><img src="/2018/11/23/2018040/002.png" title="[Microsoft.CodeDom.Providers.DotNetCompilerPlatform]"><h4 id="2-以系統管理者身份啟動-Visual-Studio"><a href="#2-以系統管理者身份啟動-Visual-Studio" class="headerlink" title="2.以系統管理者身份啟動 Visual Studio"></a>2.以系統管理者身份啟動 Visual Studio</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近直接透過 Visual Studio 2017 新增專案後，建置都成功。&lt;br&gt;但直接執行時，卻出現以下的錯誤訊息，&lt;/p&gt;
&lt;p&gt;Se
      
    
    </summary>
    
    
      <category term="Could not find a part of the path" scheme="https://rainmakerho.github.io/tags/Could-not-find-a-part-of-the-path/"/>
    
      <category term="roslyn\csc.exe" scheme="https://rainmakerho.github.io/tags/roslyn-csc-exe/"/>
    
  </entry>
  
  <entry>
    <title>env: node: No such file or directory</title>
    <link href="https://rainmakerho.github.io/2018/11/19/2018039/"/>
    <id>https://rainmakerho.github.io/2018/11/19/2018039/</id>
    <published>2018-11-19T08:29:22.000Z</published>
    <updated>2018-11-19T08:42:04.197Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近透過 Jenkins 透過 ssh 在 mac 上建置時，從 git 拉 source 上來呼叫 npm install 時，會出現以下的錯誤，<br><strong>bash: line 5: npm: command not found</strong></p><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><p>因為找不到 npm command ，所以就把原本的 script 改成加上 path ，如下，<br><strong>/usr/local/bin/npm install;</strong></p><p>結果又出現了以下的錯誤，<br><strong>env: node: No such file or directory</strong></p><p>怎麼會這樣子呢? 請問同事 david 後，它建議將 /usr/local/bin 加到 path 去會比較好。<br>所以在執行 npm install 之前，就先將 /usr/local/bin 加到 path 之中，如下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/usr/local/bin:&quot;$PATH&quot;</span><br></pre></td></tr></table></figure><p>所以執行 npm install 及 npm run build 就順利建置完成了哦!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近透過 Jenkins 透過 ssh 在 mac 上建置時，從 git 拉 source 上來呼叫 npm install 時，會出現以下
      
    
    </summary>
    
    
      <category term="jenkins" scheme="https://rainmakerho.github.io/tags/jenkins/"/>
    
      <category term="macos" scheme="https://rainmakerho.github.io/tags/macos/"/>
    
      <category term="node" scheme="https://rainmakerho.github.io/tags/node/"/>
    
      <category term="npm" scheme="https://rainmakerho.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>SQL 某個欄位包含 文字、符號及數值，是否可依 數值、文字來排序?</title>
    <link href="https://rainmakerho.github.io/2018/10/31/2018038/"/>
    <id>https://rainmakerho.github.io/2018/10/31/2018038/</id>
    <published>2018-10-31T03:45:03.000Z</published>
    <updated>2018-10-31T06:43:25.356Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有同事詢問，SQL DB 中某個欄位，資料型態為 nvarchar，裡面存放著數值、文字、符號等內容。<br>依照預設的排序，結果會是 1, 11, 2, 文字 … </p><p>那有辦法，數值時就依數值排序後，再用文字排嗎?<br>例如 1, 2, 11, 文字 …</p><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><h4 id="建立測試資料"><a href="#建立測試資料" class="headerlink" title="建立測試資料"></a>建立測試資料</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1(</span><br><span class="line">    c1 <span class="keyword">nvarchar</span>(<span class="number">32</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1(c1) <span class="keyword">values</span>(<span class="string">'1'</span>), (<span class="string">'11'</span>), (<span class="string">'2'</span>), (<span class="string">'3'</span>),(<span class="string">'A'</span>), (<span class="string">'AA'</span>), (<span class="string">'ABC'</span>), (N<span class="string">'一'</span>), (N<span class="string">'二'</span>), (<span class="string">';'</span>), (<span class="string">''''</span>), (<span class="string">'B'</span>);</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t1 <span class="keyword">order</span> <span class="keyword">by</span> c1;</span><br></pre></td></tr></table></figure><p>結果如下，<br><img src="/2018/10/31/2018038/001.png" title="[欄位包含數值、文字]"></p><h4 id="研究-1"><a href="#研究-1" class="headerlink" title="研究"></a>研究</h4><p>要讓它依數值大小排序，就要先將它轉成數值。<br>可是那文字怎麼辦呢?<br>分成2部份，再 union all 起來嗎 ?</p><p>嗯…</p><p>再看一下內容，其實我們只要將數值的內容，依數值排序就可以了。<br>所以我們就可以用SQL的 TRY_ 開頭的函數，例如 <a href="https://docs.microsoft.com/en-us/sql/t-sql/functions/try-convert-transact-sql?view=sql-server-2017" target="_blank" rel="noopener">TRY_CONVERT</a>，它會將可以轉成數值字串就會傳回數值，但如果無法轉的就會傳回 null 。<br>所以我們就可以依 TRY_CONVERT(int, c1) 來排序，這樣那些數值的資料就不會依 <strong>字串</strong> 來排，而是用 <strong>數值</strong> 來排。如下，<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *, <span class="keyword">TRY_CONVERT</span>(<span class="built_in">int</span>, c1) <span class="keyword">from</span> t1</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>  <span class="keyword">TRY_CONVERT</span>(<span class="built_in">int</span>, c1);</span><br></pre></td></tr></table></figure></p><img src="/2018/10/31/2018038/002.png" title="[sort by TRY_CONVERT]"><p>因為文字是 null ，所以文字會先跑出來，後面的數字有依大小來排序。<br>但是文字卻沒有排序了，例如 A .. 中間插了一些符號後，才會輸出 B，<br>為了讓文字也可以有排序，所以要再加入原有的欄位來排序，如下，<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *, <span class="keyword">TRY_CONVERT</span>(<span class="built_in">int</span>, c1) <span class="keyword">from</span> t1</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>  <span class="keyword">TRY_CONVERT</span>(<span class="built_in">int</span>, c1), c1;</span><br></pre></td></tr></table></figure></p><img src="/2018/10/31/2018038/003.png" title="[sort by TRY_CONVERT and c1]"><p>那如果要數值先輸出然後再文字呢?</p><p>這時只要將 null 改成 int 的最大值，所以再加入 <a href="https://docs.microsoft.com/en-us/sql/t-sql/functions/isnull-transact-sql?view=sql-server-2017" target="_blank" rel="noopener">ISNULL</a>，如下，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *, <span class="keyword">TRY_CONVERT</span>(<span class="built_in">int</span>, c1) <span class="keyword">from</span> t1</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>  <span class="keyword">ISNULL</span>(<span class="keyword">TRY_CONVERT</span>(<span class="built_in">int</span>, c1), <span class="number">2147483647</span>) , c1;</span><br></pre></td></tr></table></figure><img src="/2018/10/31/2018038/004.png" title="[sort by TRY_CONVERT and c1, number first]"><p>這樣數值的字串就會先被輸出哦 :)</p><p>可是如果您是 SQL 2008 的話，並沒有 TRY_CONVERT 可以用，這時就需要自已寫一個 function ，可以參考 <a href="https://www.mssqltips.com/sqlservertip/5411/simulating-tryconvert-in-sql-server-2008/" target="_blank" rel="noopener">Simulating TRY_CONVERT() in SQL Server 2008</a>，如下，<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> dbo.TryConvertInt</span><br><span class="line">(</span><br><span class="line">  @<span class="keyword">value</span> <span class="keyword">nvarchar</span>(<span class="number">4000</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">RETURN</span> (<span class="keyword">SELECT</span> <span class="keyword">CONVERT</span>(<span class="built_in">int</span>, </span><br><span class="line">    <span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">LEN</span>(@<span class="keyword">value</span>) &lt;= <span class="number">11</span> <span class="keyword">THEN</span></span><br><span class="line">      <span class="keyword">CASE</span> <span class="keyword">WHEN</span> @<span class="keyword">value</span> <span class="keyword">NOT</span> <span class="keyword">LIKE</span> N<span class="string">'%[^-0-9]%'</span> <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">CONVERT</span>(<span class="built_in">bigint</span>, @<span class="keyword">value</span>) <span class="keyword">BETWEEN</span> <span class="number">-2147483648</span> <span class="keyword">AND</span> <span class="number">2147483647</span> </span><br><span class="line">             <span class="keyword">THEN</span> @<span class="keyword">value</span> </span><br><span class="line">        <span class="keyword">END</span> </span><br><span class="line">      <span class="keyword">END</span> </span><br><span class="line">    <span class="keyword">END</span>));</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure></p><p>再來就是將原本使用 TRY_CONVERT 改成使用 dbo.TryConvertInt ，如下，<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *, dbo.TryConvertInt(c1) <span class="keyword">from</span> t1</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>  <span class="keyword">ISNULL</span>(dbo.TryConvertInt( c1), <span class="number">2147483647</span>) , c1;</span><br></pre></td></tr></table></figure></p><img src="/2018/10/31/2018038/005.png" title="[改用自定函數dbo.TryConvertInt]"><ul><li>註 1: 如果 <strong>效能</strong> 有問題的話，請先將資料縮小，或是使用 <a href="https://docs.microsoft.com/en-us/sql/relational-databases/tables/specify-computed-columns-in-a-table?view=sql-server-2017" target="_blank" rel="noopener">Computed Column</a>  <a href="https://docs.microsoft.com/en-us/sql/relational-databases/indexes/indexes-on-computed-columns?view=sql-server-2017" target="_blank" rel="noopener">Indexes on Computed Columns</a></li><li>註 2: SQL Server 2008/2008 R2 的支援將於 2019 年 7 月 9 日結束 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;有同事詢問，SQL DB 中某個欄位，資料型態為 nvarchar，裡面存放著數值、文字、符號等內容。&lt;br&gt;依照預設的排序，結果會是 1,
      
    
    </summary>
    
    
      <category term="sql" scheme="https://rainmakerho.github.io/tags/sql/"/>
    
      <category term="order by" scheme="https://rainmakerho.github.io/tags/order-by/"/>
    
      <category term="letters" scheme="https://rainmakerho.github.io/tags/letters/"/>
    
      <category term="numbers" scheme="https://rainmakerho.github.io/tags/numbers/"/>
    
  </entry>
  
  <entry>
    <title>System.Net.WebException: 要求已經中止: 無法建立 SSL/TLS 的安全通道 錯誤的另一種可能性</title>
    <link href="https://rainmakerho.github.io/2018/10/19/2018037/"/>
    <id>https://rainmakerho.github.io/2018/10/19/2018037/</id>
    <published>2018-10-19T08:06:52.000Z</published>
    <updated>2018-10-22T09:54:16.318Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近因為 Server 設定停用 SSL ， 改走 TLS 1.2。<br>所以使用 IIS Crypto2.0 來設定，設定之後，程式卻發生 「System.Net.WebException: 要求已經中止: 無法建立 SSL/TLS 的安全通道」的錯誤。</p><p>參考網路上的修改後，還是程式還是一樣會噴錯。 到底是怎麼一回事呢?</p><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><p>如果透過 Chrome 去連目標的 WebService ，則可以正常顯示。<br>用 Powershell 去走 443 ，也是 ok 的，如下，<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">New-Object</span> System.Net.Sockets.TcpClient(<span class="string">"webservice url"</span>, <span class="number">443</span>)</span><br></pre></td></tr></table></figure></p><img src="/2018/10/19/2018037/003.png" title="[TcpClient 443]"><p>但如果是透過 IE 去連的話，則會出現「無法顯示此網頁 開啟[進階]設定中的 TLS 1.0、TLS 1.1與TLS 1.2，然後再嘗試…」的錯誤，如下，<br><img src="/2018/10/19/2018037/001.png" title="[IE ERROR]"></p><p>而在 Event Log 中，也會有 Schannel 的錯誤訊息(TLS通訊協定定義的嚴重警示代碼為40。)，如下，<br><img src="/2018/10/19/2018037/002.png" title="[Event Log Schannel Error]"></p><p>可是 ie 明明就有勾 TLS 1.0、TLS 1.1與TLS 1.2的選項呀。<br>看起來似乎 ie 不通的話，我們的程式就不通。<br>跟大伙討論後，覺得有可能是設定的 Ciphers 目標電腦不 Support 。</p><h3 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h3><p>其中某台電腦是可以正常連到那台 HTTPS 的 Web Services 。<br>所以就開啟 IIS Crypto 2.0 工具來比較，看是那裡設定不一致。<br>比較後發現，可以的那台電腦有勾選 AES 及 SHA 256 ，而我們的電腦沒有勾。<br>將它勾起來重開機後，再試就可以正常連到它了。</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>如果參考網路上「無法建立 SSL/TLS 的安全通道」的解法還是無法解決您的問題。<br>您可以試著使用 ie 連看看，或是看某台電腦是否 ok，去比較一下它們的 IIS Crypto 中的設定是否相同哦!</p><p>非常感謝 JN, Hardy, Bobby, Pally 的分享。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近因為 Server 設定停用 SSL ， 改走 TLS 1.2。&lt;br&gt;所以使用 IIS Crypto2.0 來設定，設定之後，程式卻發
      
    
    </summary>
    
    
      <category term="SSL/TLS" scheme="https://rainmakerho.github.io/tags/SSL-TLS/"/>
    
      <category term="ServerCertificateValidationCallback" scheme="https://rainmakerho.github.io/tags/ServerCertificateValidationCallback/"/>
    
      <category term="SecurityProtocol" scheme="https://rainmakerho.github.io/tags/SecurityProtocol/"/>
    
  </entry>
  
  <entry>
    <title>請使用 ClientScriptManager.RegisterForEventValidation 方法註冊回傳或回呼資料，以進行驗證</title>
    <link href="https://rainmakerho.github.io/2018/10/09/2018036/"/>
    <id>https://rainmakerho.github.io/2018/10/09/2018036/</id>
    <published>2018-10-09T09:19:48.000Z</published>
    <updated>2018-10-10T04:57:23.097Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近同事將 Page 的 EnableEventValidation 設定為 true 後，Postback 時，就會出現以下的錯誤。<br>Invalid postback or callback argument.  Event validation is enabled using <pages enableeventvalidation="true"> in configuration or &lt;%@ Page EnableEventValidation=”true” %&gt; in a page.  For security purposes, this feature verifies that arguments to postback or callback events originate from the server control that originally rendered them.  If the data is valid and expected, use the ClientScriptManager.RegisterForEventValidation method in order to register the postback or callback data for validation.</pages></p><h3 id="發生原因"><a href="#發生原因" class="headerlink" title="發生原因"></a>發生原因</h3><p>這個是發生在一個 DropDownList 物件上面，因為同事在 JS 中加入一個「請選擇」的選項，而它的值並不在原來的 DropDownList Datasource 之中。<br>所以在 Postback 時，基於安全理由(enableEventValidation=”true”)，就會噴那個錯誤。<br>嗯，有以下幾個方式來解決…</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><h4 id="在-Server-端加入初始值"><a href="#在-Server-端加入初始值" class="headerlink" title="在 Server 端加入初始值"></a>在 Server 端加入初始值</h4><p>將原本在 Client 端加的選項，移到 Server 端去加<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dt = <span class="keyword">new</span> DataTable();</span><br><span class="line">dt.Columns.Add(<span class="string">"id"</span>, <span class="keyword">typeof</span>(<span class="keyword">int</span>));</span><br><span class="line">dt.Columns.Add(<span class="string">"name"</span>, <span class="keyword">typeof</span>(<span class="keyword">string</span>));</span><br><span class="line"><span class="keyword">int</span> max = <span class="keyword">int</span>.Parse(txtCount.Text);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max; i++)</span><br><span class="line">&#123;</span><br><span class="line">dt.Rows.Add(i, <span class="string">$"drpRM:<span class="subst">&#123;i&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br><span class="line">drpRM.DataSource = dt;</span><br><span class="line">drpRM.DataTextField = <span class="string">"name"</span>;</span><br><span class="line">drpRM.DataValueField = <span class="string">"id"</span>;</span><br><span class="line">drpRM.DataBind();</span><br><span class="line">drpRM.Items.Insert(<span class="number">0</span>, <span class="keyword">new</span> ListItem &#123; Value = <span class="string">"-1"</span>, Text = <span class="string">"請選擇"</span>, Selected = <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure></p><h4 id="使用-RegisterForEventValidation-來補足"><a href="#使用-RegisterForEventValidation-來補足" class="headerlink" title="使用 RegisterForEventValidation 來補足"></a>使用 RegisterForEventValidation 來補足</h4><p>我是在 WebUserControl 之中，所以要透過 this.Page.ClientScript<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Render</span>(<span class="params">System.Web.UI.HtmlTextWriter writer</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.Page.ClientScript.RegisterForEventValidation</span><br><span class="line">(<span class="keyword">this</span>.FindControl(<span class="string">"drpRM"</span>).UniqueID, <span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">base</span>.Render(writer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>當然，也有人說，將 enableEventValidation 設為 false。 基於安全理由，不建議這樣子做哦! </p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://odetocode.com/blogs/scott/archive/2006/03/22/asp-net-event-validation-and-invalid-callback-or-postback-argument-again.aspx" target="_blank" rel="noopener">ASP.NET Event Validation and “Invalid Callback Or Postback Argument” : Part II</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近同事將 Page 的 EnableEventValidation 設定為 true 後，Postback 時，就會出現以下的錯誤。&lt;br
      
    
    </summary>
    
    
      <category term="RegisterForEventValidation" scheme="https://rainmakerho.github.io/tags/RegisterForEventValidation/"/>
    
      <category term="EnableEventValidation" scheme="https://rainmakerho.github.io/tags/EnableEventValidation/"/>
    
  </entry>
  
  <entry>
    <title>ASP 0104 不允許的操作 Request.BinaryRead</title>
    <link href="https://rainmakerho.github.io/2018/09/19/2018035/"/>
    <id>https://rainmakerho.github.io/2018/09/19/2018035/</id>
    <published>2018-09-19T04:29:38.000Z</published>
    <updated>2018-09-19T08:04:37.146Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近同事將一個 ASP 的系統從 Windows 2003 移機到 Windows 2008 ，在測試上傳檔案時，比較大的檔案時，會發生「-2147467259 007~ASP 0104~不允許的操作」的錯誤。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>上網查了一下，應該是因為 ASP 預設上傳限制是<strong>200k</strong>，所以要改設定，讓它大一點。</p><h4 id="從管理界面調整"><a href="#從管理界面調整" class="headerlink" title="從管理界面調整"></a>從管理界面調整</h4><ul><li><p>開啟 iis ，dbclick ASP</p><img src="/2018/09/19/2018035/001.png" title="[iis asp]"></li><li><p>展開 限制內容 區段</p><img src="/2018/09/19/2018035/002.png" title="[限制內容]"></li><li><p>調整 要求實體的上限<br>將原本預設值為 200000 的值改成您要放寬的數值。</p><img src="/2018/09/19/2018035/003.png" title="[要求實體的上限]"></li></ul><h4 id="調整-web-config"><a href="#調整-web-config" class="headerlink" title="調整 web.config"></a>調整 web.config</h4><p>在 web.config 中加入 ASP 的設定，調整 maxRequestEntityAllowed 的大小，如下，<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">asp</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">cache</span> <span class="attr">diskTemplateCacheDirectory</span>=<span class="string">"%SystemDrive%\inetpub\temp\ASP Compiled Templates"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">limits</span> <span class="attr">scriptTimeout</span>=<span class="string">"00:02:00"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">queueConnectionTestTime</span>=<span class="string">"00:00:05"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">requestQueueMax</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxRequestEntityAllowed</span>=<span class="string">"104857600"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">asp</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 別的設定值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>後來同事在 iis 調整後，就可以順利上傳較大的檔案了 :)</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://stackoverflow.com/questions/1989334/how-do-i-enable-upload-of-large-files-in-classic-asp-on-iis-7" target="_blank" rel="noopener">How do I enable upload of large files in classic ASP on IIS 7?</a><br><a href="https://docs.microsoft.com/en-us/iis/configuration/system.webServer/asp/limits" target="_blank" rel="noopener">ASP Limits <limits></limits></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近同事將一個 ASP 的系統從 Windows 2003 移機到 Windows 2008 ，在測試上傳檔案時，比較大的檔案時，會發生「-
      
    
    </summary>
    
    
      <category term="Request.BinaryRead" scheme="https://rainmakerho.github.io/tags/Request-BinaryRead/"/>
    
      <category term="ASP 0104" scheme="https://rainmakerho.github.io/tags/ASP-0104/"/>
    
      <category term="2147467259" scheme="https://rainmakerho.github.io/tags/2147467259/"/>
    
      <category term="Windows 2008" scheme="https://rainmakerho.github.io/tags/Windows-2008/"/>
    
      <category term="200k" scheme="https://rainmakerho.github.io/tags/200k/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Botframework + Adaptive Cards 快速打造 Chatbot 之 2</title>
    <link href="https://rainmakerho.github.io/2018/09/17/2018034/"/>
    <id>https://rainmakerho.github.io/2018/09/17/2018034/</id>
    <published>2018-09-17T01:29:38.000Z</published>
    <updated>2018-09-17T06:29:44.398Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 <a href="https://rainmakerho.github.io/2018/08/02/2018030/">Microsoft Botframework + Adaptive Cards 快速打造 Chatbot</a> 一篇中，<br>我們說明如何透過 Adaptive Cards 將所有的動作透過 Action 再依它的 Action Type 來轉換成對應的 Action 物件及處理該 Action 物件的 Strategy 物件。</p><p>但是當我們的 Action 逾來逾多時，原本使用 switch 勢必會造成相對應的複雜度，依 Strategy 的方式是建立對應表，以下將介紹使用 Dictionary&lt;string, Func&lt;T>> 及 Autofac 這2種方式。</p><p>另外，如果 Strategy 物件 中有使用到 Prompt dialogs 時，原本在執行完 Strategy 物件的 Method 後，如果直接呼叫 context.Done(“”); 將會造成 botframework Dialog Stack 運行上的錯誤，我們也將修正 Strategy 物件的 interface 。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><h4 id="調整-Strategy-物件的建立方式"><a href="#調整-Strategy-物件的建立方式" class="headerlink" title="調整 Strategy 物件的建立方式"></a>調整 Strategy 物件的建立方式</h4><p>因為對應的 Strategy 物件變成了4個，如果用 switch 判斷的話，程式如下，<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 依不同的 Type 決定要用那個 Class</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="type"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">Obsolete</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IActionStrategy <span class="title">ResolveActionStrategy</span>(<span class="params">BotAction botAction</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IActionStrategy result = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">switch</span> (botAction.ActionType)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> ActionTypes.ShowAcountAction:</span><br><span class="line">            result = <span class="keyword">new</span> ShowAccountActionStrategy();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ActionTypes.AccountAction:</span><br><span class="line">            result = <span class="keyword">new</span> AccountActionStrategy();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ActionTypes.ShowMenuAction:</span><br><span class="line">            result = <span class="keyword">new</span> ShowMenuActionStrategy();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ActionTypes.OrderAction:</span><br><span class="line">            result = <span class="keyword">new</span> OrderActionStrategy();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            result = <span class="keyword">new</span> NoneActionStrategy();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/2018/09/17/2018034/001.png" title="[用 switch 判斷 Strategy 物件]"><p>因為 botframework 已使用 Autofac ，所以我們可以透過 <a href="https://autofaccn.readthedocs.io/en/latest/advanced/keyed-services.html" target="_blank" rel="noopener">Autofac Named Services</a> 方式來建立對應表，所以在 ActionStrategyResolver 物件中建立 ResolveByActionTypes Method 然後在 Global.asax.cs Application_Start Method 中去呼叫 ResolveByActionTypes Method。如下，<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 設定 ACTION_TYPE 對應要建立的物件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="builder"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ResolveByActionTypes</span>(<span class="params">ContainerBuilder builder</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    builder</span><br><span class="line">        .RegisterType&lt;ShowAccountActionStrategy&gt;()</span><br><span class="line">        .Named&lt;IActionStrategy&gt;(ActionTypes.ShowAcountAction.ToString())</span><br><span class="line">        .InstancePerLifetimeScope();</span><br><span class="line"></span><br><span class="line">    builder</span><br><span class="line">        .RegisterType&lt;AccountActionStrategy&gt;()</span><br><span class="line">        .Named&lt;IActionStrategy&gt;(ActionTypes.AccountAction.ToString())</span><br><span class="line">        .InstancePerLifetimeScope();</span><br><span class="line"></span><br><span class="line">    builder</span><br><span class="line">        .RegisterType&lt;ShowMenuActionStrategy&gt;()</span><br><span class="line">        .Named&lt;IActionStrategy&gt;(ActionTypes.ShowMenuAction.ToString())</span><br><span class="line">        .InstancePerLifetimeScope();</span><br><span class="line"></span><br><span class="line">    builder</span><br><span class="line">        .RegisterType&lt;OrderActionStrategy&gt;()</span><br><span class="line">        .Named&lt;IActionStrategy&gt;(ActionTypes.OrderAction.ToString())</span><br><span class="line">        .InstancePerLifetimeScope();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而在取得對應的 Strategy 物件時，只要給 Action Type 值 ( var actionStrategy =scope.ResolveNamed<iactionstrategy>(botAction.ActionType.ToString()) )，就可以了哦! 如下，<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 透過 ACTION_TYPE 來建立對應的物件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="botAction"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="context"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">static</span> Task <span class="title">DoActionAsync</span>(<span class="params">BotAction botAction, IDialogContext context</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> scope = DialogModule.BeginLifetimeScope(Conversation.Container, context.Activity.AsMessageActivity()))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> actionStrategy = scope.ResolveNamed&lt;IActionStrategy&gt;(botAction.ActionType.ToString());</span><br><span class="line">        <span class="keyword">await</span> actionStrategy.DoActionAsync(botAction, context);</span><br><span class="line">        <span class="comment">//註:如果您的 strategy 有用到 PromptDialog Or Other ResumeAfter 你就不能在這裡 CALL context.Done()</span></span><br><span class="line">        <span class="keyword">if</span> (actionStrategy.IsContextDone)</span><br><span class="line">        &#123;</span><br><span class="line">            context.Done(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></iactionstrategy></p><h4 id="調整-Action-物件的建立方式"><a href="#調整-Action-物件的建立方式" class="headerlink" title="調整 Action 物件的建立方式"></a>調整 Action 物件的建立方式</h4><p>之前在 JsonConverter 中依 ActionType 透過 switch 來建立物件，我們可以建立一個 Dictionary 來對應生成的Function，因為會需要 jtoken 所以建立的 Dictionary為，Dictionary&lt;string, Func&lt;JToken, BotAction>> ，然後在 static construct 時建立它 (ActionConverter是我們的 class name)，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 設定依 ActionType 來建立物件的 Dictionary</span></span><br><span class="line"><span class="keyword">static</span> Dictionary&lt;<span class="keyword">string</span>, Func&lt;JToken, BotAction&gt;&gt; BotActionMapper;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">ActionConverter</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ResolveByActionTypes();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 依 ActionType 來決定要建立那個 Action 及初始化處理</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ResolveByActionTypes</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Func&lt;JToken, BotAction&gt; acountActionFun = jtoken =&gt; <span class="keyword">new</span> AccountAction();</span><br><span class="line">    Func&lt;JToken, BotAction&gt; orderActionFun = jtoken =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">new</span> OrderAction();</span><br><span class="line">        <span class="comment">//建立物件後，如果還有其他要處理的事，可以接著寫下去...</span></span><br><span class="line">        <span class="comment">//AssignProducts(result as OrderAction, jtoken as JObject);</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    BotActionMapper = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, Func&lt;JToken, BotAction&gt;&gt;()&#123;</span><br><span class="line">        &#123;ActionTypes.AccountAction.ToString(), acountActionFun &#125;,</span><br><span class="line">        &#123;ActionTypes.OrderAction.ToString(), orderActionFun &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以原本在 ReadJson Method 裡面的 switch 改成依 ActionType 當成 BotActionMapper 的 Key ，取出生成的 Function ，然後呼叫它( BotAction result = BotActionMapper<a href="jtoken">type.ToString()</a>; )，<br>如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 依 ActionType 來決定要轉回什麼物件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="reader"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="objectType"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="existingValue"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="serializer"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">object</span> <span class="title">ReadJson</span>(<span class="params">JsonReader reader, Type objectType, <span class="keyword">object</span> existingValue, JsonSerializer serializer</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> jtoken = JToken.ReadFrom(reader);</span><br><span class="line">    <span class="keyword">var</span> type = jtoken[<span class="string">"ActionType"</span>].ToObject&lt;ActionTypes&gt;();</span><br><span class="line">    BotAction result = BotActionMapper[type.ToString()](jtoken);</span><br><span class="line">    serializer.Populate(jtoken.CreateReader(), result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="設定是否呼叫-context-Done-“”"><a href="#設定是否呼叫-context-Done-“”" class="headerlink" title="設定是否呼叫 context.Done(“”)"></a>設定是否呼叫 context.Done(“”)</h4><p>之前我們執行完 Strategy 物件的 Method 後，會直接呼叫 context.Done(“”) ，這表示這個 Strategy 物件的事已做好了，再進來的訊息又是會對應到新的 Strategy 物件。</p><p>但有時，Strategy 物件會需要再從使用者那取得回應，例如用了 PromptDialog 相關的 Method， 它需要傳入一個 resume 的 Callback Function，在整個結束才會呼叫 contex.Done(“”)，所以這時候，就不可以直接呼叫 context.Done 。</p><p>所以 Strategy 物件的 interface 多加入一個設定是否呼叫 contex.Done(“”) 的屬性，或是改成不呼叫，全都交由 Strategy 物件自行決定。如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 定義 Action 共通的 interface </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IActionStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Task <span class="title">DoActionAsync</span>(<span class="params">BotAction botAction, IDialogContext context</span>)</span>;</span><br><span class="line">    <span class="keyword">bool</span> IsContextDone &#123; <span class="keyword">get</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以在上面的 DoActionAsync 有依 IsContextDone 屬性來判斷是否執行 contex.Done(“”) 。</p><p>經過將 switch 改以 Dictionary or  Autofac DI 方式來建立物件，改善了複雜度，也提升了可讀性。<br>另外在使用 contex.Done 的時機點，大家也要注意一下哦 :)<br>希望對大家以 Microsoft Botframework 來開發 Chatbot 有所幫助。</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://rainmakerho.github.io/2018/08/02/2018030/">Microsoft Botframework + Adaptive Cards 快速打造 Chatbot</a><br><a href="https://www.dofactory.com/net/strategy-design-pattern" target="_blank" rel="noopener">Strategy</a><br><a href="https://autofaccn.readthedocs.io/en/latest/advanced/keyed-services.html" target="_blank" rel="noopener">Autofac Named Services</a><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在 &lt;a href=&quot;https://rainmakerho.github.io/2018/08/02/2018030/&quot;&gt;Microsof
      
    
    </summary>
    
    
      <category term="chatbot" scheme="https://rainmakerho.github.io/tags/chatbot/"/>
    
      <category term="botframework" scheme="https://rainmakerho.github.io/tags/botframework/"/>
    
      <category term="adaptivecard" scheme="https://rainmakerho.github.io/tags/adaptivecard/"/>
    
      <category term="adaptive" scheme="https://rainmakerho.github.io/tags/adaptive/"/>
    
      <category term="Autofac" scheme="https://rainmakerho.github.io/tags/Autofac/"/>
    
  </entry>
  
  <entry>
    <title>NHibernate.Exceptions.GenericADOException System.Text.EncoderFallbackException</title>
    <link href="https://rainmakerho.github.io/2018/08/21/2018033/"/>
    <id>https://rainmakerho.github.io/2018/08/21/2018033/</id>
    <published>2018-08-21T10:22:37.000Z</published>
    <updated>2018-08-21T10:36:17.177Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>最近系統上有時會出現「NHibernate.Exceptions.GenericADOException System.Text.EncoderFallbackException」的錯誤，IIS Reset 後，又正常。<br>過一陣子，又會出現。到底怎麼回事呢?<br>錯誤訊息如下，<br>NHibernate.Exceptions.GenericADOException: could not execute query<br>[ select scuserm0_.USR_ID as col_0_0_, scuserm0_.USR_NAME as col_1_0_ from SCUSERM scuserm0_ where scuserm0_.USR_ID in (?) ]<br>Name:Scuserm - Value:RM4303<br>[SQL: select scuserm0_.USR_ID as col_0_0_, scuserm0_.USR_NAME as col_1_0_ from SCUSERM scuserm0_ where scuserm0_.USR_ID in (?)] —&gt; System.Text.EncoderFallbackException: 無法將索引 105 中的 Unicode 字元 \uD83C 轉譯為指定的字碼頁。<br>於 System.Text.EncoderExceptionFallbackBuffer.Fallback(Char charUnknown, Int32 index)<br>於 System.Text.EncoderFallbackBuffer.InternalFallback(Char ch, Char<em>&amp; chars)<br>於 System.Text.UTF8Encoding.GetBytes(Char</em> chars, Int32 charCount, Byte* bytes, Int32 byteCount, EncoderNLS baseEncoder)<br>於 System.Text.EncoderNLS.GetBytes(Char[] chars, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex, Boolean flush)<br>於 System.IO.StreamWriter.Flush(Boolean flushStream, Boolean flushEncoder)<br>於 System.IO.StreamWriter.Write(Char[] buffer, Int32 index, Int32 count)<br>於 System.IO.TextWriter.SyncTextWriter.WriteLine(String value)<br>於 NHibernate.AdoNet.AbstractBatcher.ExecuteReader(IDbCommand cmd)<br>於 NHibernate.Loader.Loader.GetResultSet(IDbCommand st, Boolean autoDiscoverTypes, Boolean callable, RowSelection selection, ISessionImplementor session)<br>於 NHibernate.Loader.Loader.DoQuery(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies)<br>於 NHibernate.Loader.Loader.DoQueryAndInitializeNonLazyCollections(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies)<br>於 NHibernate.Loader.Loader.DoList(ISessionImplementor session, QueryParameters queryParameters)<br>— 內部例外狀況堆疊追蹤的結尾 —<br>於 NHibernate.Loader.Loader.DoList(ISessionImplementor session, QueryParameters queryParameters)<br>於 NHibernate.Loader.Loader.ListIgnoreQueryCache(ISessionImplementor session, QueryParameters queryParameters)<br>於 NHibernate.Hql.Ast.ANTLR.Loader.QueryLoader.List(ISessionImplementor session, QueryParameters queryParameters)<br>於 NHibernate.Hql.Ast.ANTLR.QueryTranslatorImpl.List(ISessionImplementor session, QueryParameters queryParameters)<br>於 NHibernate.Engine.Query.HQLQueryPlan.PerformList(QueryParameters queryParameters, ISessionImplementor session, IList results)<br>於 NHibernate.Impl.SessionImpl.List(String query, QueryParameters queryParameters, IList results)<br>於 NHibernate.Impl.SessionImpl.List<a href="String query, QueryParameters parameters">T</a><br>於 NHibernate.Impl.QueryImpl.List<a href="">T</a></p><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><p>奇怪，查詢資料，為什麼會有 System.IO.TextWriter.SyncTextWriter.WriteLine 呢?<br>於是設定不要寫 log4net 的 log ，還是會出現。<br>後來參考 <a href="https://stackoverflow.com/questions/18504196/periodically-unable-to-translate-unicode-character-x-at-index-y-to-specified-c" target="_blank" rel="noopener">Periodically - Unable to translate Unicode character X at index Y to specified code page</a> 這篇的方式，將設定 show_sql 設為 false 。最近觀察，就沒有再發生那個錯誤了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;最近系統上有時會出現「NHibernate.Exceptions.GenericADOException System.Text.Encod
      
    
    </summary>
    
    
      <category term="NHibernate" scheme="https://rainmakerho.github.io/tags/NHibernate/"/>
    
      <category term="GenericADOException" scheme="https://rainmakerho.github.io/tags/GenericADOException/"/>
    
      <category term="EncoderFallbackException" scheme="https://rainmakerho.github.io/tags/EncoderFallbackException/"/>
    
      <category term="Unicode" scheme="https://rainmakerho.github.io/tags/Unicode/"/>
    
  </entry>
  
  <entry>
    <title>.NET Exception Handling</title>
    <link href="https://rainmakerho.github.io/2018/08/21/2018032/"/>
    <id>https://rainmakerho.github.io/2018/08/21/2018032/</id>
    <published>2018-08-21T08:31:47.000Z</published>
    <updated>2018-08-22T05:05:16.311Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近還是常常看到同仁在處理 Exception 時，將 Exception throw 出去，但這樣前面的 StackTrace 就會斷掉了哦!</p><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><p>許多人常常很習慣地將 ex throw 出去，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//exception code here</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">    <span class="comment">// do somthing</span></span><br><span class="line">    thorw ex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比較好的應該只要寫 throw 就會有完整的 StackTrace 資料，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//exception code here</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">    <span class="comment">// do somthing</span></span><br><span class="line">    thorw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="throw-new-Exception"><a href="#throw-new-Exception" class="headerlink" title="throw new Exception"></a>throw new Exception</h4><ul><li>參數值無效<br>一般我們在驗證參數時，如果參數值無效時，可以用 System.ArgumentException ，而參數可以使用 nameof([參數])，如下，</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CopyObject</span>(<span class="params">SampleClass original</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (original == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> System.ArgumentException(<span class="string">"Parameter cannot be null"</span>, <span class="keyword">nameof</span>(original));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果某參數發生了 IndexOutOfRangeException，則可以將它傳入 ArgumentException 作為 InnerException 參數，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetValueFromArray</span>(<span class="params"><span class="keyword">int</span>[] array, <span class="keyword">int</span> index</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> array[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.IndexOutOfRangeException ex)</span><br><span class="line">    &#123;</span><br><span class="line">        System.ArgumentException argEx = <span class="keyword">new</span> System.ArgumentException(<span class="string">"Index is out of range"</span>, <span class="string">"index"</span>, ex);</span><br><span class="line">        <span class="keyword">throw</span> argEx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不適當的操作，則可以使用 System.InvalidOperationException</li></ul><h4 id="自定的-Exception-Class"><a href="#自定的-Exception-Class" class="headerlink" title="自定的 Exception Class"></a>自定的 Exception Class</h4><p>我們可以繼承自 Exception ，並且可序列化，至少需要 4 個建構函式:</p><ol><li>預設建構函式</li><li>設定 Message 的建構函式</li><li>同時設定 Message 和 InnerException 屬性的建構函式</li><li>是用來序列化例外狀況。<br>如下，</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Serializable()</span>]</span><br><span class="line">public class InvalidDepartmentException : System.Exception</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvalidDepartmentException</span>(<span class="params"></span>) : <span class="title">base</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvalidDepartmentException</span>(<span class="params"><span class="keyword">string</span> message</span>) : <span class="title">base</span>(<span class="params">message</span>) </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvalidDepartmentException</span>(<span class="params"><span class="keyword">string</span> message, System.Exception inner</span>) : <span class="title">base</span>(<span class="params">message, inner</span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A constructor is needed for serialization when an</span></span><br><span class="line">    <span class="comment">// exception propagates from a remoting server to the client.</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">InvalidDepartmentException</span>(<span class="params">System.Runtime.Serialization.SerializationInfo info,</span></span></span><br><span class="line"><span class="function"><span class="params">        System.Runtime.Serialization.StreamingContext context</span>) </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>詳細可以參考 <a href="https://docs.microsoft.com/zh-tw/dotnet/csharp/programming-guide/exceptions/creating-and-throwing-exceptions" target="_blank" rel="noopener">建立和擲回例外狀況</a>。<br>如果程式中有一堆的 try…catch ，則可以參考 <a href="https://dotblogs.azurewebsites.net/rainmaker/2014/11/19/147361" target="_blank" rel="noopener">包裝程式中共用的 try…catch</a> 透過共用的 try…catch 去封裝。</p><h3 id="實作練習"><a href="#實作練習" class="headerlink" title="實作練習"></a>實作練習</h3><p>我們可以學習 <a href="https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonException.htm" target="_blank" rel="noopener">JsonException Class</a>的設計方式，來練習。<br><img src="/2018/08/21/2018032/001.png" title="[JsonException Class]"></p><p>以下為<a href="https://app.pluralsight.com/library/courses/c-sharp-error-handling-exceptions/table-of-contents" target="_blank" rel="noopener">Error Handling in C# with Exceptions</a>的範例，大家可以參考一下哦!</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Serializable()</span>]</span><br><span class="line"><span class="keyword">class</span> <span class="title">CalculationException</span> : <span class="title">Exception</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span> DefaultMessage = <span class="string">"CalculationException 預設Message"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalculationException</span>(<span class="params"></span>) : <span class="title">base</span>(<span class="params">DefaultMessage</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalculationException</span>(<span class="params"><span class="keyword">string</span> message</span>) : <span class="title">base</span>(<span class="params">message</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalculationException</span>(<span class="params">Exception innerException</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span> (<span class="params">DefaultMessage, innerException</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalculationException</span>(<span class="params"><span class="keyword">string</span> message, Exception innerException</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span> (<span class="params">message, innerException</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Serializable()</span>]</span><br><span class="line"><span class="keyword">class</span> <span class="title">CalculationOperationNotSupportedException</span> : <span class="title">CalculationException</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Operation &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalculationOperationNotSupportedException</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params"><span class="string">"Specified operation was out of the range of valid values."</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalculationOperationNotSupportedException</span>(<span class="params"><span class="keyword">string</span> operation</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">this</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Operation = operation;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalculationOperationNotSupportedException</span>(<span class="params"><span class="keyword">string</span> message,</span></span></span><br><span class="line"><span class="function"><span class="params">        Exception innerException</span>) : <span class="title">base</span> (<span class="params">message, innerException</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalculationOperationNotSupportedException</span>(<span class="params"><span class="keyword">string</span> operation, <span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span> (<span class="params">message</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Operation = operation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> Message</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">string</span> message = <span class="keyword">base</span>.Message;</span><br><span class="line">            <span class="keyword">if</span> (Operation != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> message + Environment.NewLine +</span><br><span class="line">                    <span class="string">$"不支援的運算: <span class="subst">&#123;Operation&#125;</span>"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CalculationException 繼承自 Exception ，而 CalculationOperationNotSupportedException 繼承自 CalculationException ，因為有運算子，所以 建構函數多了一個運算子的參數 。並且覆寫 Message 的屬性，讓 Message 可讀性更高。測試程式如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//處理非預期的錯誤</span></span><br><span class="line">AppDomain currentAppDomain = AppDomain.CurrentDomain;</span><br><span class="line">currentAppDomain.UnhandledException</span><br><span class="line">+= <span class="keyword">new</span> UnhandledExceptionEventHandler(HandleException);</span><br><span class="line"></span><br><span class="line">WriteLine(<span class="string">"請輸入第一個數值"</span>);</span><br><span class="line"><span class="keyword">int</span> number1 = <span class="keyword">int</span>.Parse(ReadLine());</span><br><span class="line"></span><br><span class="line">WriteLine(<span class="string">"請輸入第二個數值"</span>);</span><br><span class="line"><span class="keyword">int</span> number2 = <span class="keyword">int</span>.Parse(ReadLine());</span><br><span class="line"></span><br><span class="line">WriteLine(<span class="string">"請輸入運算子"</span>);</span><br><span class="line"><span class="keyword">string</span> op = ReadLine().ToUpperInvariant();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> result = calculator.Calculate(number1, number2, op);</span><br><span class="line">WriteLine(<span class="string">$"結果為: <span class="subst">&#123;result&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (CalculationException ex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Log.Error(ex);</span></span><br><span class="line">WriteLine(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">WriteLine(<span class="string">$"發生了錯誤. <span class="subst">&#123;ex&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">WriteLine(<span class="string">"... finally ..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">WriteLine(<span class="string">"\n請輸入 enter 離開"</span>);</span><br><span class="line">ReadLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HandleException</span>(<span class="params"><span class="keyword">object</span> sender, UnhandledExceptionEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WriteLine(<span class="string">$"發生非預期的錯誤: <span class="subst">&#123;e.ExceptionObject&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當輸入了不 support 的 運算子，output 如下，<br><img src="/2018/08/21/2018032/002.png" title="[不支援的運算]"></p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://dotblogs.azurewebsites.net/rainmaker/2014/11/19/147361" target="_blank" rel="noopener">包裝程式中共用的 try…catch</a><br><a href="https://docs.microsoft.com/zh-tw/dotnet/csharp/programming-guide/exceptions/creating-and-throwing-exceptions" target="_blank" rel="noopener">建立和擲回例外狀況</a><br><a href="https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonException.htm" target="_blank" rel="noopener">JsonException Class</a><br><a href="https://app.pluralsight.com/library/courses/c-sharp-error-handling-exceptions/table-of-contents" target="_blank" rel="noopener">Error Handling in C# with Exceptions</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近還是常常看到同仁在處理 Exception 時，將 Exception throw 出去，但這樣前面的 StackTrace 就會斷掉了
      
    
    </summary>
    
    
      <category term="c#" scheme="https://rainmakerho.github.io/tags/c/"/>
    
      <category term=".net" scheme="https://rainmakerho.github.io/tags/net/"/>
    
      <category term="exception" scheme="https://rainmakerho.github.io/tags/exception/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 500 內部伺服器錯誤</title>
    <link href="https://rainmakerho.github.io/2018/08/19/2018031/"/>
    <id>https://rainmakerho.github.io/2018/08/19/2018031/</id>
    <published>2018-08-19T15:04:40.000Z</published>
    <updated>2018-08-19T15:18:04.237Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>前陣子遇到了 http 403 的問題，今天又遇到了 http 500 的問題。<br>同事說，同一個資料，User A 連就 Ok, User B 連就出現 HTTP 500 內部伺服器錯誤 ，如下圖<br><img src="/2018/08/19/2018031/001.png" title="[HTTP 500]"></p><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><p>透過，IE 開發者工具的網路來查看發現的確是回 500，但回應本文中，卻有內容。<br>想說是不是「顯示易懂的 HTTP 錯誤訊息」被勾起來了，詳細可參考<a href="https://dotblogs.com.tw/rainmaker/2012/11/22/84984" target="_blank" rel="noopener">讓 IE 跟你說實話，http 500(網站無法顯示該網頁)再見!</a> ,結果是沒勾的。</p><p>後來請同事拿一下 IIS Log 看一下，結果發現的確是 500，但後面有其他的訊息，如下，</p><p>2018-08-17 01:50:14 172.16.33.71 GET /RMAP/LMP/rm001.ASP MPagKey=abc&amp;GSSMPagFUNC<em>RW=R&amp;GSStxtFunDeep=0&amp;GSStxtActFlag=UPT|140|800a000d|類型不符:</em>‘mobjSCUser.FunChk’ 80 - 172.16.33.72 Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+6.1;+WOW64;+Trident/7.0;+SLCC2;+.NET+CLR+2.0.50727;+.NET+CLR+3.5.30729;+.NET+CLR+3.0.30729;+.NET4.0C;+.NET4.0E;+Media+Center+PC+6.0) - 500 0 0 250</p><p><strong>類型不符:_‘mobjSCUser.FunChk’</strong><br>似乎是在檢查使用者使用權限時，發生錯誤。<br>同事檢查後發現，不能使用的使用者，的確使用權限沒有設定好。</p><p>這要跟大家分享的是，當發生 http 500 時，如果 Log 也沒寫到想到的資訊時，也可以看一下 iis log 哦!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;前陣子遇到了 http 403 的問題，今天又遇到了 http 500 的問題。&lt;br&gt;同事說，同一個資料，User A 連就 Ok, Us
      
    
    </summary>
    
    
      <category term="http" scheme="https://rainmakerho.github.io/tags/http/"/>
    
      <category term="500" scheme="https://rainmakerho.github.io/tags/500/"/>
    
      <category term="內部伺服器錯誤" scheme="https://rainmakerho.github.io/tags/%E5%85%A7%E9%83%A8%E4%BC%BA%E6%9C%8D%E5%99%A8%E9%8C%AF%E8%AA%A4/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Botframework + Adaptive Cards 快速打造 Chatbot</title>
    <link href="https://rainmakerho.github.io/2018/08/02/2018030/"/>
    <id>https://rainmakerho.github.io/2018/08/02/2018030/</id>
    <published>2018-08-02T09:55:13.000Z</published>
    <updated>2018-08-21T10:30:51.941Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今年的 Chatbot 很火紅，不知大家都用什麼來開發 Chatbot 呢?<br>筆者使用的是 Microsoft Botframework 來開發，它提供了很多語言的 SDK，讓我們可以快速的開發出 Chatbot。<br>最近開發 Vitals ESP (KM) Chatbot，一開始規劃好畫面及流程後，很快就開發完成了。<br>接下來就跟大家分享開發的過程 :)</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>Vitals ESP 是 KM 系統，希望 KM Chatbot 可以方便讓人查詢，在手機上畫面不大，所以需要分頁。如果有人 Mention 到你的話，也可以發通知到 Chatbot 上，讓你可以快速地回覆。<br>所以需求主要有 2 個，</p><h4 id="1-使用者在輸入框輸入文字，立即依關鍵字查詢，並顯示出查詢結果-分頁-，使用者可以按上一頁、下一頁去瀏覽，並可按文章串到系統去。"><a href="#1-使用者在輸入框輸入文字，立即依關鍵字查詢，並顯示出查詢結果-分頁-，使用者可以按上一頁、下一頁去瀏覽，並可按文章串到系統去。" class="headerlink" title="1.使用者在輸入框輸入文字，立即依關鍵字查詢，並顯示出查詢結果(分頁)，使用者可以按上一頁、下一頁去瀏覽，並可按文章串到系統去。"></a>1.使用者在輸入框輸入文字，立即依關鍵字查詢，並顯示出查詢結果(分頁)，使用者可以按上一頁、下一頁去瀏覽，並可按文章串到系統去。</h4><p>下圖為使用者在輸入框輸入「關鍵字」去查詢，並顯示出查詢結果<br><img src="/2018/08/02/2018030/001.png" title="[輸入關鍵字查詢]"></p><p>下圖為使用者按「下一頁」，系統切到第 2 頁<br><img src="/2018/08/02/2018030/002.png" title="[顯示第2頁]"></p><h4 id="2-當其他人在文章中有-Mention-到使用者時，使用者可以立馬收到別人在-Cue-你的內容。"><a href="#2-當其他人在文章中有-Mention-到使用者時，使用者可以立馬收到別人在-Cue-你的內容。" class="headerlink" title="2.當其他人在文章中有 Mention 到使用者時，使用者可以立馬收到別人在 Cue 你的內容。"></a>2.當其他人在文章中有 Mention 到使用者時，使用者可以立馬收到別人在 Cue 你的內容。</h4><p>下圖為當 KM 系統收到有人在 Cue 使用者時，除了 Mail 通知外，現在會再通知 IM ，讓使用者可以立馬可以知道<br><img src="/2018/08/02/2018030/003.png" title="[及時通知]"></p><p>下圖為使用者收到被 Cue 的內容後，可以針對該內容進行回覆<br><img src="/2018/08/02/2018030/004.png" title="[立即回覆文章]"></p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><h4 id="1-定義-Actions"><a href="#1-定義-Actions" class="headerlink" title="1.定義 Actions"></a>1.定義 Actions</h4><p>從需求來看，可以將目前行為規劃為 2 個 Action ，一個是 Keyword Search ，另一個是 Mention 回覆。<br>當使用者從輸入框輸入文字的查詢，它的查詢頁為第 1 頁，卡片中的上、下頁，則依 Acton 中的頁碼來決定。<br>Mention 回覆則需要記錄要要回覆的文章相關資訊及回覆的內容。<br>所以以下就建立這 2 個 Action 的類別，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> KMActionType</span><br><span class="line">&#123;</span><br><span class="line">none = <span class="number">0</span>,</span><br><span class="line">SearchKeyword,</span><br><span class="line">ReplyDoc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">JsonConverter(typeof(KMActionConverter))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">KMAction</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> KMActionType Action &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查詢 Keyword 的 Action</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">KMSearchAction</span> : <span class="title">KMAction</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">KMSearchAction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Action = KMActionType.SearchKeyword;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">string</span> Keyword &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> PageIndex &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//回覆 Mention 的 Action</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">KMReplyMentionAction</span> : <span class="title">KMAction</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">KMReplyMentionAction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Action = KMActionType.ReplyDoc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//這個是讓 User 輸入的內容，會對應到 TextInput 的 Id</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">string</span> ReplyContent &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//這個是要回覆所需要的資訊</span></span><br><span class="line"><span class="keyword">public</span> KMPost PostInfo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//回覆所需要的資訊物件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">KMPost</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">string</span> ParentId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; <span class="comment">//這裡指的是 Document Id</span></span><br><span class="line"><span class="comment">// .....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span>/https://blog.mbwarez.dk/deserializing-different-types-based-on-properties-with-newtonsoft-json/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">KMActionConverter</span> : <span class="title">JsonConverter</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 依 KMActionType 來決定要轉回什麼物件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="reader"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="objectType"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="existingValue"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="serializer"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">object</span> <span class="title">ReadJson</span>(<span class="params">JsonReader reader, Type objectType, <span class="keyword">object</span> existingValue, JsonSerializer serializer</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> jObject = JToken.ReadFrom(reader);</span><br><span class="line">KMActionType type = jObject[<span class="string">"Action"</span>].ToObject&lt;KMActionType&gt;();</span><br><span class="line"></span><br><span class="line">KMAction result = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">switch</span> (type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> KMActionType.SearchKeyword:</span><br><span class="line">result = <span class="keyword">new</span> KMSearchAction();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KMActionType.ReplyDoc:</span><br><span class="line">result = <span class="keyword">new</span> KMReplyMentionAction();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException();</span><br><span class="line">&#125;</span><br><span class="line">serializer.Populate(jObject.CreateReader(), result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">WriteJson</span>(<span class="params">JsonWriter writer, <span class="keyword">object</span> <span class="keyword">value</span>, JsonSerializer serializer</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">CanConvert</span>(<span class="params">Type objectType</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Not needed, as we register our converter directly on Vehicle</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只做Read，不做Write</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> CanWrite =&gt; <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>從上面可以發現我們定義了 2 個 Action ，分別為 KMSearchAction 及 KMReplyMentionAction ，它們都繼承自 KMAction 。<br>而設定 KMActionConverter 可以讓我們依 KMActionType 來分別 Deserialize 到對應的物件 ，如下的程式，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//會依 KMActionType 來分別轉成對應的物件 (KMSearchAction or KMReplyMentionAction )</span></span><br><span class="line">messageAction = JsonConvert.DeserializeObject&lt;KMAction&gt;(dataValue);</span><br></pre></td></tr></table></figure><p>當使用者按 上、下頁時，透過 JsonConvert.DeserializeObject<kmaction> 時，實際上會轉換成 KMSearchAction 類別，<br><img src="/2018/08/02/2018030/006.png" title="[查詢的 KMSearchAction]"></kmaction></p><p>當使用者在回覆卡片上按下送出時，透過 JsonConvert.DeserializeObject<kmaction> 時，實際上會轉換成 KMReplyMentionAction 類別，<br><img src="/2018/08/02/2018030/007.png" title="[回覆文章的 KMReplyMentionAction]"></kmaction></p><ul><li>註:詳細可參考 <a href="https://blog.mbwarez.dk/deserializing-different-types-based-on-properties-with-newtonsoft-json/" target="_blank" rel="noopener">Deserializing different types based on properties, with Newtonsoft.Json</a></li></ul><h4 id="2-建立查詢結果及-Mention-回覆的-Adaptive-Cards"><a href="#2-建立查詢結果及-Mention-回覆的-Adaptive-Cards" class="headerlink" title="2.建立查詢結果及 Mention 回覆的 Adaptive Cards"></a>2.建立查詢結果及 Mention 回覆的 Adaptive Cards</h4><p>使用 Adaptive Cards 時，需要從 Nuget 中安裝 AdaptiveCards 套件，如下，<br><img src="/2018/08/02/2018030/005.png" title="[AdaptiveCards 套件]"></p><p>AdaptiveSubmitAction 物件有一個 DataJson 的屬性，是可以讓我們放入物件的 JSON 字串 。<br>所以在建立畫面這些 Button 時，就可以建立 Action 物件後，將它們的 JSON 放到 DataJson 屬性中 。<br>當使用者按下 Button 時，它的值就會在 MessageActivity 的 Value 屬性之中 。<br>所以在 RootDialog 中，我們就可以用這個屬性值來區分是按下 Button 進來的，還是使用者從輸入框輸入字串進來的，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public class RootDialog : IDialog&lt;object&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">StartAsync</span>(<span class="params">IDialogContext context</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">context.Wait(MessageReceivedAsync);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">MessageReceivedAsync</span>(<span class="params">IDialogContext context, IAwaitable&lt;IMessageActivity&gt; result</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> message = <span class="keyword">await</span> result;</span><br><span class="line"><span class="keyword">var</span> searchKeyword = message.Text;</span><br><span class="line">KMAction messageAction = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> dataValue = message.Value?.ToString();</span><br><span class="line"><span class="comment">//如果 value 有值，就是按 action 進來的</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrWhiteSpace(dataValue))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//button 進來的</span></span><br><span class="line"><span class="comment">//會透過 KMActionConverter 來自動轉換</span></span><br><span class="line">messageAction = JsonConvert.DeserializeObject&lt;KMAction&gt;(dataValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//從輸入框進來的 Keyword，所以是在第一頁(base 0)</span></span><br><span class="line"><span class="keyword">var</span> pageIndex = <span class="number">0</span>;</span><br><span class="line">messageAction = <span class="keyword">new</span> KMSearchAction</span><br><span class="line">&#123;</span><br><span class="line">Action = KMActionType.SearchKeyword,</span><br><span class="line">Keyword = searchKeyword,</span><br><span class="line">PageIndex = pageIndex</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> kmUser = GetKMUser(message);</span><br><span class="line"><span class="comment">//依不同的 Action 來產生對應的處理 Class</span></span><br><span class="line"><span class="keyword">var</span> actionStrategy = ActionStrategyResolver.ResolveActionStrategy(messageAction.Action);</span><br><span class="line"><span class="keyword">await</span> actionStrategy.DoAction(context, kmUser, messageAction);</span><br><span class="line">context.Done(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 取得使用者的 UserName</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="userToBotMessage"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> KMUser <span class="title">GetKMUser</span>(<span class="params">IMessageActivity userToBotMessage</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> loginId = <span class="keyword">new</span> KMUser(userToBotMessage.From.Id);</span><br><span class="line"><span class="keyword">return</span> loginId;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>筆者建立執行 Action 的 IActionStrategy interface，然後將 Keywrod Search 與 回覆 Mention 分別放到不同的類別之中，並實作 IActionStrategy 。<br>然後再透過 KMActionType 來決定要生成那個類別，最後執行 DoAction 就可以了 。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 定義 Action 共通的 interface</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IActionStrategy</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function">Task <span class="title">DoAction</span>(<span class="params">IDialogContext context, KMUser user, KMAction action</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ActionStrategyResolver</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 依不同的 Type 決定要用那個 Class</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="type"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IActionStrategy <span class="title">ResolveActionStrategy</span>(<span class="params">KMActionType type</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IActionStrategy result = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">switch</span> (type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> KMActionType.SearchKeyword:</span><br><span class="line">result = <span class="keyword">new</span> SearchKeywordActionStrategy();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KMActionType.ReplyDoc:</span><br><span class="line">result = <span class="keyword">new</span> ReplyMentionActionStrategy();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 SearchKeywordActionStrategy Class 中，依 KMSearchAction 的內容，來建立查詢結果的 Adaptive Card</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 專門處理 KM Keyword Search</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SearchKeywordActionStrategy</span> : <span class="title">IActionStrategy</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 處理Search Keyword動作</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="context"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="userName"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="messageAction"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">DoAction</span>(<span class="params">IDialogContext context, KMUser kmUser, KMAction messageAction</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> action = messageAction <span class="keyword">as</span> KMSearchAction;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先做 Action 前的驗證</span></span><br><span class="line"><span class="comment">//1.必需要2個字(以上)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> lowestLength = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrWhiteSpace(action.Keyword) || action.Keyword.Length &lt; lowestLength)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BotException(<span class="string">$"查詢文字請至少<span class="subst">&#123;lowestLength&#125;</span>個字元，謝謝您!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> attachment = <span class="keyword">await</span> BuildSearchResultCard(kmUser.LoginId, action);</span><br><span class="line"><span class="keyword">if</span> (attachment == <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//查不到</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BotException(<span class="string">$"查不到任到資料，請重新查詢..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> replyMessage = context.MakeMessage();</span><br><span class="line">replyMessage.Attachments.Add(attachment);</span><br><span class="line"><span class="keyword">await</span> context.PostAsync(replyMessage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 依使用者及Action 建立 Search結果的卡片</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="userId"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="action"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">async</span> Task&lt;Attachment&gt; <span class="title">BuildSearchResultCard</span>(<span class="params"><span class="keyword">string</span> userId, KMSearchAction action</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> pageIndex = action.PageIndex;</span><br><span class="line"><span class="keyword">var</span> searchKeyword = action.Keyword;</span><br><span class="line"><span class="comment">//同時取回 文章及總筆數</span></span><br><span class="line"><span class="keyword">var</span> searchResult = SearchKM(searchKeyword, pageIndex);</span><br><span class="line"><span class="keyword">var</span> searchCount = searchResult.Item2;</span><br><span class="line"><span class="comment">//沒任何資料</span></span><br><span class="line"><span class="keyword">if</span> (searchCount == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> card = <span class="keyword">new</span> AdaptiveCard();</span><br><span class="line">card.Body.Add(<span class="keyword">new</span> AdaptiveTextBlock()</span><br><span class="line">&#123;</span><br><span class="line">Text = <span class="string">$"查詢「<span class="subst">&#123;searchKeyword&#125;</span>」共 <span class="subst">&#123;searchCount&#125;</span> 筆，"</span>,</span><br><span class="line">Weight = AdaptiveTextWeight.Bolder</span><br><span class="line">&#125;);</span><br><span class="line">card.Body.Add(<span class="keyword">new</span> AdaptiveTextBlock()</span><br><span class="line">&#123;</span><br><span class="line">Text = VitalsESPHelper.GetRangeString(pageIndex, searchCount),</span><br><span class="line">Weight = AdaptiveTextWeight.Bolder</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//內容</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> doc <span class="keyword">in</span> searchResult.Item1)</span><br><span class="line">&#123;</span><br><span class="line">card.Body.Add(<span class="keyword">new</span> AdaptiveTextBlock()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//markdown link</span></span><br><span class="line">Text = <span class="string">$"[<span class="subst">&#123;doc.Title&#125;</span>](<span class="subst">&#123;doc.Url&#125;</span>)"</span>,</span><br><span class="line">Weight = AdaptiveTextWeight.Bolder</span><br><span class="line">&#125;);</span><br><span class="line">card.Body.Add(<span class="keyword">new</span> AdaptiveTextBlock()</span><br><span class="line">&#123;</span><br><span class="line">Text = <span class="string">$"...子資訊..."</span>,</span><br><span class="line">IsSubtle = <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//產生上、下一頁</span></span><br><span class="line"><span class="keyword">var</span> pageSize = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> totalPage = (searchCount + pageSize - <span class="number">1</span>) / pageSize;</span><br><span class="line"><span class="keyword">if</span> (pageIndex &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//上一頁</span></span><br><span class="line"><span class="keyword">var</span> actionPageIndex = pageIndex - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> preAction = <span class="keyword">new</span> KMSearchAction</span><br><span class="line">&#123;</span><br><span class="line">Action = KMActionType.SearchKeyword,</span><br><span class="line">Keyword = searchKeyword,</span><br><span class="line">PageIndex = actionPageIndex</span><br><span class="line">&#125;;</span><br><span class="line">card.Actions.Add(<span class="keyword">new</span> AdaptiveSubmitAction()</span><br><span class="line">&#123;</span><br><span class="line">Title = <span class="string">"上一頁"</span>,</span><br><span class="line">Data = <span class="string">$""</span>,</span><br><span class="line">DataJson = JsonConvert.SerializeObject(preAction)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((pageIndex + <span class="number">1</span>) &lt; totalPage)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//下一頁</span></span><br><span class="line"><span class="keyword">var</span> actionPageIndex = pageIndex + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> nextAction = <span class="keyword">new</span> KMSearchAction</span><br><span class="line">&#123;</span><br><span class="line">Action = KMActionType.SearchKeyword,</span><br><span class="line">Keyword = searchKeyword,</span><br><span class="line">PageIndex = actionPageIndex</span><br><span class="line">&#125;;</span><br><span class="line">card.Actions.Add(<span class="keyword">new</span> AdaptiveSubmitAction()</span><br><span class="line">&#123;</span><br><span class="line">Title = <span class="string">"下一頁"</span>,</span><br><span class="line">Data = <span class="string">$""</span>,</span><br><span class="line">DataJson = JsonConvert.SerializeObject(nextAction)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> attachment = <span class="keyword">new</span> Attachment()</span><br><span class="line">&#123;</span><br><span class="line">ContentType = AdaptiveCard.ContentType,</span><br><span class="line">Content = card</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> attachment;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//依 keyword 去Search，取回查詢結果</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task&lt;Tuple&lt;List&lt;KMDocument&gt;, <span class="keyword">int</span>&gt;&gt; SearchKM(<span class="keyword">string</span> keyword, <span class="keyword">int</span> pageIndex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> searchCount = search 總筆數;</span><br><span class="line"><span class="keyword">var</span> kmDocs = search 總文件;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Tuple&lt;List&lt;KMDocument&gt;, <span class="keyword">int</span>&gt;(kmDocs, searchCount);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面建立 <a href="https://adaptivecards.io/" target="_blank" rel="noopener">Adaptive Cards</a> ，我是透過 Card Elements 一個一個來加入 。<br>您也可以到 <a href="https://acdesignerbeta.azurewebsites.net/" target="_blank" rel="noopener">Adaptive Cards Designer</a> 設計好之後，將 json 存檔後，透過 <a href="https://docs.microsoft.com/en-us/adaptive-cards/sdk/authoring-cards/net#example-parse-an-adaptivecard-from-json" target="_blank" rel="noopener">AdaptiveCard.FromJson</a>將它們匯進來哦!</p><p>建立 Mention 回覆的 Adaptive Cards ，是在另一個 Controller 在收到通知後，就建立它。<br>主要部份是建立 KMReplyMentionAction Class 一樣給 AdaptiveSubmitAction 的 DataJson 屬性，而 AdaptiveTextInput 的 Id 值要跟 KMReplyMentionAction Class 中的屬性值相同，只是 KMReplyMentionAction 是 PascalCase ，AdaptiveTextInput 的 Id 值是 CamelCase ，如下,</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task&lt;Attachment&gt; <span class="title">BuildMentionCard</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//顯示 mention reply card</span></span><br><span class="line"><span class="keyword">var</span> card = <span class="keyword">new</span> AdaptiveCard();</span><br><span class="line"><span class="comment">// Body content</span></span><br><span class="line">card.Body.Add(<span class="keyword">new</span> AdaptiveTextBlock()</span><br><span class="line">&#123;</span><br><span class="line">Text = <span class="string">$"誰誰誰在一篇文件(那篇文章)中提到你"</span>,</span><br><span class="line">Weight = AdaptiveTextWeight.Bolder,</span><br><span class="line">Wrap = <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//mention 內容</span></span><br><span class="line">card.Body.Add(<span class="keyword">new</span> AdaptiveTextBlock()</span><br><span class="line">&#123;</span><br><span class="line">Text = <span class="string">$"...文章內容..."</span>,</span><br><span class="line">IsSubtle = <span class="literal">true</span>,</span><br><span class="line">Wrap = <span class="literal">true</span>,</span><br><span class="line">Separator = <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//reply</span></span><br><span class="line">card.Body.Add(<span class="keyword">new</span> AdaptiveTextInput()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//id要跟 KMReplyMentionAction 中的 ReplyContent 屬性一樣</span></span><br><span class="line">Id = <span class="string">"replyContent"</span>,</span><br><span class="line">IsMultiline = <span class="literal">true</span>,</span><br><span class="line">Placeholder = <span class="string">$"訊息請回覆於此"</span>,</span><br><span class="line"><span class="comment">// IsRequired = true (未來才會實作)</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> post = 從km取得要回覆的相關資訊;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> replyAction = <span class="keyword">new</span> KMReplyMentionAction</span><br><span class="line">&#123;</span><br><span class="line">Action = KMActionType.ReplyDoc,</span><br><span class="line">PostInfo = post</span><br><span class="line">&#125;;</span><br><span class="line">card.Actions.Add(<span class="keyword">new</span> AdaptiveSubmitAction()</span><br><span class="line">&#123;</span><br><span class="line">Title = <span class="string">"送出"</span>,</span><br><span class="line">DataJson = JsonConvert.SerializeObject(replyAction)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> attachment = <span class="keyword">new</span> Attachment()</span><br><span class="line">&#123;</span><br><span class="line">ContentType = AdaptiveCard.ContentType,</span><br><span class="line">Content = card</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> attachment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>處理使用者回覆的 ReplyMentionActionStrategy Class ，只要呼叫 KM API 檢查狀態 OK ，就可以了，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReplyMentionActionStrategy</span> : <span class="title">IActionStrategy</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 處理快速回覆的Action</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="context"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="kmUser"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="messageAction"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">DoAction</span>(<span class="params">IDialogContext context, KMUser kmUser, KMAction messageAction</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> action = messageAction <span class="keyword">as</span> KMReplyMentionAction;</span><br><span class="line"><span class="keyword">var</span> replyMessage = context.MakeMessage();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrWhiteSpace(action.ReplyContent))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//將內容reply進去</span></span><br><span class="line"><span class="keyword">var</span> postResult = <span class="keyword">await</span> 呼叫KMAPI;</span><br><span class="line">replyMessage.Text = <span class="string">$"回覆完成!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BotException(<span class="string">$"您回覆的內容為「空白」，無法回覆!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">await</span> context.PostAsync(replyMessage);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在上面有些檢查筆者是 throw BotException，然後透過 <a href="https://rainmakerho.github.io/2018/02/13/2018008/">Bot Framework Custom Error Messages and Exception Handling</a> 來將訊息顯示給使用者，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BotException</span> : <span class="title">Exception</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BotException</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BotException</span>(<span class="params"><span class="keyword">string</span> message</span>) : <span class="title">base</span>(<span class="params">message</span>)</span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BotException</span>(<span class="params"><span class="keyword">string</span> message, Exception inner</span>) : <span class="title">base</span>(<span class="params">message, inner</span>)</span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PostUnhandledExceptionToUserOverrideTask</span> : <span class="title">IPostToBot</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> ResourceManager resources;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> IPostToBot inner;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> IBotToUser botToUser;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> TraceListener trace;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PostUnhandledExceptionToUserOverrideTask</span>(<span class="params">IPostToBot inner, IBotToUser botToUser, ResourceManager resources, TraceListener trace</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SetField.NotNull(<span class="keyword">out</span> <span class="keyword">this</span>.inner, <span class="keyword">nameof</span>(inner), inner);</span><br><span class="line">SetField.NotNull(<span class="keyword">out</span> <span class="keyword">this</span>.botToUser, <span class="keyword">nameof</span>(botToUser), botToUser);</span><br><span class="line">SetField.NotNull(<span class="keyword">out</span> <span class="keyword">this</span>.resources, <span class="keyword">nameof</span>(resources), resources);</span><br><span class="line">SetField.NotNull(<span class="keyword">out</span> <span class="keyword">this</span>.trace, <span class="keyword">nameof</span>(trace), trace);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">PostAsync</span>(<span class="params">IActivity activity, CancellationToken token</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">await</span> inner.PostAsync(activity, token);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//顯示 Message 給使用者看</span></span><br><span class="line"><span class="keyword">await</span> botToUser.PostAsync(ex.Message, cancellationToken: token);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception inner)</span><br><span class="line">&#123;</span><br><span class="line">trace.WriteLine(inner);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下圖是系統收到 Exception 後，透過客製的錯誤處理將訊息傳送給使用者，<br><img src="/2018/08/02/2018030/008.png" title="[BotException]"></p><ul><li>註:在 Application_Start 那記得要跟 Autofac 註冊 PostUnhandledExceptionToUserOverrideTask 哦!</li></ul><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>從上面的分享中，可以透過自定的 JsonConverter (KMActionConverter)，在 JsonConvert.DeserializeObject 時，取回正確的物件，再交給對應的 Strategy 類別來處理。<br>所以只要規劃好流程腳本，再透過 <a href="https://dev.botframework.com/" target="_blank" rel="noopener">Microsoft Bot Framework</a>，就可以讓我們快速開發出 Chatbot, 而 <a href="https://adaptivecards.io/" target="_blank" rel="noopener">Adaptive Cards</a> 則讓我們可以在 Chatbot 中建構出完整的 UI ，透過 <a href="https://adaptivecards.io/explorer/Action.Submit.html" target="_blank" rel="noopener">Action.Submit</a> 將 UI 轉化成需要的 Model 大大簡化開發的複雜度。<br>未來如果再加一個 Action 的話，只要擴充 KMActionType 及對應的 Action 及 ActionStrategy 就可以了哦。</p><ul><li><p>註 1: 目前 <a href="https://adaptivecards.io/" target="_blank" rel="noopener">Adaptive Cards</a> 的 Action 只能放在最下面，未來版本應該可以放在 Card 的中間，可以到 <a href="https://acdesignerbeta.azurewebsites.net/" target="_blank" rel="noopener">Adaptive Cards Designer</a> 設計看看哦~</p></li><li><p>註 2: 上述範例中，因為有使用 Makedown 的 link ，所以如果用 webchat 測試的話，請加入以下的 script 哦!</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/markdown-it/8.4.2/markdown-it.js"</span> /&gt;</span><br></pre></td></tr></table></figure><ul><li>註 3:有時想要讓使用者知道 Chatbot 有收到它的輸入，可以在 MessagesController 的 Post Method 中一收到訊息時，就先回個 Typing 的訊息給使用者，如下，</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先發送 typing 的 message</span></span><br><span class="line"><span class="keyword">var</span> connector = <span class="keyword">new</span> GssConnectorClient(<span class="keyword">new</span> Uri(activity.ServiceUrl));</span><br><span class="line"><span class="keyword">var</span> isTypingReply = activity.CreateReply();</span><br><span class="line">isTypingReply.Type = ActivityTypes.Typing;</span><br><span class="line"><span class="keyword">await</span> connector.Conversations.ReplyToActivityAsync(isTypingReply);</span><br></pre></td></tr></table></figure><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="http://adaptivecards.io/explorer/" target="_blank" rel="noopener">Schema Explorer</a><br><a href="https://acdesignerbeta.azurewebsites.net/" target="_blank" rel="noopener">Adaptive Cards Designer</a><br><a href="https://blog.mbwarez.dk/deserializing-different-types-based-on-properties-with-newtonsoft-json/" target="_blank" rel="noopener">Deserializing different types based on properties, with Newtonsoft.Json</a><br><a href="https://rainmakerho.github.io/2018/02/13/2018008/">Bot Framework Custom Error Messages and Exception Handling</a><br><a href="https://github.com/rainmakerho/WebChatCustomization" target="_blank" rel="noopener">BotFramework-WebChat Customization</a><br><a href="http://www.garypretty.co.uk/2016/07/18/bot-framework-typing-activity-let-users-know-your-bot-is-responding/" target="_blank" rel="noopener">Bot Framework Typing Activity – Let users know your bot is responding (and know when they are too)</a><br><a href="https://blog.gss.com.tw/index.php/2018/05/11/microsoftbotframeworkwebchat/" target="_blank" rel="noopener">Customize Web Chat for your websites - 亂馬客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;今年的 Chatbot 很火紅，不知大家都用什麼來開發 Chatbot 呢?&lt;br&gt;筆者使用的是 Microsoft Botframewor
      
    
    </summary>
    
    
      <category term="chatbot" scheme="https://rainmakerho.github.io/tags/chatbot/"/>
    
      <category term="botframework" scheme="https://rainmakerho.github.io/tags/botframework/"/>
    
      <category term="Adaptive Cards" scheme="https://rainmakerho.github.io/tags/Adaptive-Cards/"/>
    
      <category term="Microsoft Botframework" scheme="https://rainmakerho.github.io/tags/Microsoft-Botframework/"/>
    
      <category term="Customize Web Chat for your websites" scheme="https://rainmakerho.github.io/tags/Customize-Web-Chat-for-your-websites/"/>
    
  </entry>
  
  <entry>
    <title>IIS 403 - 禁止: 拒絕存取 跟 403.4 - Forbidden 問題</title>
    <link href="https://rainmakerho.github.io/2018/08/02/2018029/"/>
    <id>https://rainmakerho.github.io/2018/08/02/2018029/</id>
    <published>2018-08-02T08:41:33.000Z</published>
    <updated>2018-08-02T09:19:35.912Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近同事在裝機時，從 Client 端 Browser 去開系統時，發現圖檔都沒有顯示出來。<br>將圖檔的 url 貼到 browser 網址列上來看，結果出現「403 - 禁止: 拒絕存取」。如下圖所示，<br><img src="/2018/08/02/2018029/001.png" title="[403 - 禁止: 拒絕存取]"></p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>看起來似乎是權限不足，於是開啟檔案總管，將 IUser , Network Service 等帳號都加進去。 再看，還是 403 。天呀 ~~~ 怎麼回事呢?</p><p>今天另一位同事在 Server 上開 Browser 去試，結果出現的錯誤一樣是 403 ，但多了一個 .4 。<br>下面還寫著一行「<strong>您嘗試存取的網頁受到安全通訊端層(SSL)的保護</strong>」。 如下，<br><img src="/2018/08/02/2018029/002.png" title="[403.4 - Forbidden]"><br>查看 IIS 的設定，果然勾選了 「需要 SSL」 ，如下，<br><img src="/2018/08/02/2018029/003.png" title="[SSL 設定]"><br>結果改走 https 就好了。<br>所以如果出 403 的話，除了權限外，也請 Check 一下 SSL 的部份。<br>或是在 Server 上測試，這樣如果有錯誤的話，訊息會比較多一些。才不會浪費許多時間。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近同事在裝機時，從 Client 端 Browser 去開系統時，發現圖檔都沒有顯示出來。&lt;br&gt;將圖檔的 url 貼到 browser 
      
    
    </summary>
    
    
      <category term="iis" scheme="https://rainmakerho.github.io/tags/iis/"/>
    
      <category term="403" scheme="https://rainmakerho.github.io/tags/403/"/>
    
      <category term="403.4" scheme="https://rainmakerho.github.io/tags/403-4/"/>
    
      <category term="403 - 禁止: 拒絕存取" scheme="https://rainmakerho.github.io/tags/403-%E7%A6%81%E6%AD%A2-%E6%8B%92%E7%B5%95%E5%AD%98%E5%8F%96/"/>
    
      <category term="403.4 - Forbidden" scheme="https://rainmakerho.github.io/tags/403-4-Forbidden/"/>
    
  </entry>
  
</feed>
